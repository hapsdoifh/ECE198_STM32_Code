
Fall_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000156c  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800647c  0800647c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006484  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000088  0800650c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800650c  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8f4  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d21  00000000  00000000  0002a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fc  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164ea  00000000  00000000  0002d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d03e  00000000  00000000  00043e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c5d  00000000  00000000  00050eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000327c  00000000  00000000  000d8b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dbd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ef0 	.word	0x08004ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004ef0 	.word	0x08004ef0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	d901      	bls.n	8000ebe <writeRegister+0x1a>
		address = 63;
 8000eba:	233f      	movs	r3, #63	; 0x3f
 8000ebc:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <writeRegister+0x58>)
 8000ece:	f001 fbd7 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000ed2:	1df9      	adds	r1, r7, #7
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <writeRegister+0x5c>)
 8000eda:	f002 fd38 	bl	800394e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000ede:	1db9      	adds	r1, r7, #6
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <writeRegister+0x5c>)
 8000ee6:	f002 fd32 	bl	800394e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <writeRegister+0x58>)
 8000ef0:	f001 fbc6 	bl	8002680 <HAL_GPIO_WritePin>
	

}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020400 	.word	0x40020400
 8000f00:	20000108 	.word	0x20000108

08000f04 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b3f      	cmp	r3, #63	; 0x3f
 8000f18:	d901      	bls.n	8000f1e <readRegister+0x1a>
		address = 63;
 8000f1a:	233f      	movs	r3, #63	; 0x3f
 8000f1c:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d905      	bls.n	8000f30 <readRegister+0x2c>
		address |= 0x40;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e004      	b.n	8000f3a <readRegister+0x36>
		else	
		address &= ~(0x40);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <readRegister+0x78>)
 8000f4a:	f001 fb99 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	230a      	movs	r3, #10
 8000f52:	2201      	movs	r2, #1
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <readRegister+0x7c>)
 8000f56:	f002 fcfa 	bl	800394e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	230a      	movs	r3, #10
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <readRegister+0x7c>)
 8000f64:	f002 fe2f 	bl	8003bc6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <readRegister+0x78>)
 8000f6e:	f001 fb87 	bl	8002680 <HAL_GPIO_WritePin>
	
	
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	20000108 	.word	0x20000108

08000f84 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	4619      	mov	r1, r3
 8000f94:	202c      	movs	r0, #44	; 0x2c
 8000f96:	f7ff ff85 	bl	8000ea4 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d11a      	bne.n	8000fd8 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d807      	bhi.n	8000fc2 <adxlBW+0x3e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d903      	bls.n	8000fc2 <adxlBW+0x3e>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3307      	adds	r3, #7
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e004      	b.n	8000fcc <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	78da      	ldrb	r2, [r3, #3]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4413      	add	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	202c      	movs	r0, #44	; 0x2c
 8000fd2:	f7ff ff67 	bl	8000ea4 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 8000fd6:	e015      	b.n	8001004 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d807      	bhi.n	8000ff0 <adxlBW+0x6c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d903      	bls.n	8000ff0 <adxlBW+0x6c>
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3306      	adds	r3, #6
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e004      	b.n	8000ffa <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78da      	ldrb	r2, [r3, #3]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	202c      	movs	r0, #44	; 0x2c
 8001000:	f7ff ff50 	bl	8000ea4 <writeRegister>
		}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4619      	mov	r1, r3
 800101c:	2031      	movs	r0, #49	; 0x31
 800101e:	f7ff ff41 	bl	8000ea4 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	b25a      	sxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	799b      	ldrb	r3, [r3, #6]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b25a      	sxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	795b      	ldrb	r3, [r3, #5]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b25b      	sxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791a      	ldrb	r2, [r3, #4]
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4413      	add	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2031      	movs	r0, #49	; 0x31
 8001060:	f7ff ff20 	bl	8000ea4 <writeRegister>
			}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	484d      	ldr	r0, [pc, #308]	; (80011b0 <ADXL_Init+0x144>)
 800107a:	f001 fb01 	bl	8002680 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800107e:	2005      	movs	r0, #5
 8001080:	f001 f844 	bl	800210c <HAL_Delay>
	uint8_t testval = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff37 	bl	8000f04 <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2be5      	cmp	r3, #229	; 0xe5
 800109a:	d001      	beq.n	80010a0 <ADXL_Init+0x34>
 800109c:	2301      	movs	r3, #1
 800109e:	e082      	b.n	80011a6 <ADXL_Init+0x13a>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff6f 	bl	8000f84 <adxlBW>
	adxlFormat(adxl);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb0 	bl	800100c <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d13f      	bne.n	8001134 <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d846      	bhi.n	800114a <ADXL_Init+0xde>
 80010bc:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <ADXL_Init+0x58>)
 80010be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c2:	bf00      	nop
 80010c4:	080010d5 	.word	0x080010d5
 80010c8:	080010ed 	.word	0x080010ed
 80010cc:	08001105 	.word	0x08001105
 80010d0:	0800111d 	.word	0x0800111d
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <ADXL_Init+0x148>)
 80010d6:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <ADXL_Init+0x14c>)
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <ADXL_Init+0x148>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <ADXL_Init+0x150>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <ADXL_Init+0x150>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a36      	ldr	r2, [pc, #216]	; (80011c0 <ADXL_Init+0x154>)
 80010e8:	6013      	str	r3, [r2, #0]
								break;
 80010ea:	e02e      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <ADXL_Init+0x148>)
 80010ee:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <ADXL_Init+0x158>)
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <ADXL_Init+0x148>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <ADXL_Init+0x150>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <ADXL_Init+0x150>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <ADXL_Init+0x154>)
 8001100:	6013      	str	r3, [r2, #0]
								break;
 8001102:	e022      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <ADXL_Init+0x148>)
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <ADXL_Init+0x15c>)
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <ADXL_Init+0x148>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <ADXL_Init+0x150>)
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <ADXL_Init+0x150>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <ADXL_Init+0x154>)
 8001118:	6013      	str	r3, [r2, #0]
								break;
 800111a:	e016      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <ADXL_Init+0x148>)
 800111e:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <ADXL_Init+0x160>)
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <ADXL_Init+0x148>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <ADXL_Init+0x150>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <ADXL_Init+0x150>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <ADXL_Init+0x154>)
 8001130:	6013      	str	r3, [r2, #0]
								break;
 8001132:	e00a      	b.n	800114a <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <ADXL_Init+0x148>)
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <ADXL_Init+0x14c>)
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <ADXL_Init+0x148>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <ADXL_Init+0x150>)
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <ADXL_Init+0x150>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <ADXL_Init+0x154>)
 8001148:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800114a:	f107 030e 	add.w	r3, r7, #14
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	202d      	movs	r0, #45	; 0x2d
 8001154:	f7ff fed6 	bl	8000f04 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	79db      	ldrb	r3, [r3, #7]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <ADXL_Init+0x100>
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73bb      	strb	r3, [r7, #14]
 800116a:	e004      	b.n	8001176 <ADXL_Init+0x10a>
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	f023 0310 	bic.w	r3, r3, #16
 8001172:	b2db      	uxtb	r3, r3
 8001174:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <ADXL_Init+0x11e>
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	b2db      	uxtb	r3, r3
 8001186:	73bb      	strb	r3, [r7, #14]
 8001188:	e004      	b.n	8001194 <ADXL_Init+0x128>
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f023 0320 	bic.w	r3, r3, #32
 8001190:	b2db      	uxtb	r3, r3
 8001192:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg|0b1000);
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	202d      	movs	r0, #45	; 0x2d
 80011a0:	f7ff fe80 	bl	8000ea4 <writeRegister>
			
	return ADXL_OK;
 80011a4:	2300      	movs	r3, #0
	
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	3b808081 	.word	0x3b808081
 80011bc:	200000a8 	.word	0x200000a8
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	3c010204 	.word	0x3c010204
 80011c8:	3c820821 	.word	0x3c820821
 80011cc:	3d042108 	.word	0x3d042108

080011d0 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <ADXL_getAccel+0x110>)
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e6:	6018      	str	r0, [r3, #0]
 80011e8:	3304      	adds	r3, #4
 80011ea:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2206      	movs	r2, #6
 80011f2:	4619      	mov	r1, r3
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f7ff fe85 	bl	8000f04 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d125      	bne.n	800124c <ADXL_getAccel+0x7c>
		{
		int16_t * acc = Data;	
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29a      	uxth	r2, r3
 800120c:	7a3b      	ldrb	r3, [r7, #8]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21a      	sxth	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	b29b      	uxth	r3, r3
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b29a      	uxth	r2, r3
 8001222:	7abb      	ldrb	r3, [r7, #10]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b29a      	uxth	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3302      	adds	r3, #2
 800122e:	b212      	sxth	r2, r2
 8001230:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b29a      	uxth	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3304      	adds	r3, #4
 8001246:	b212      	sxth	r2, r2
 8001248:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 800124a:	e045      	b.n	80012d8 <ADXL_getAccel+0x108>
	else if (outputType == OUTPUT_FLOAT)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d142      	bne.n	80012d8 <ADXL_getAccel+0x108>
						float * fdata = Data;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8001256:	7a7b      	ldrb	r3, [r7, #9]
 8001258:	b29b      	uxth	r3, r3
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b29a      	uxth	r2, r3
 800125e:	7a3b      	ldrb	r3, [r7, #8]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	b21b      	sxth	r3, r3
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <ADXL_getAccel+0x114>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b29b      	uxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b29a      	uxth	r2, r3
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	b21b      	sxth	r3, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <ADXL_getAccel+0x118>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3304      	adds	r3, #4
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <ADXL_getAccel+0x11c>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3308      	adds	r3, #8
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	edc3 7a00 	vstr	s15, [r3]
	}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08004f08 	.word	0x08004f08
 80012e4:	200000a4 	.word	0x200000a4
 80012e8:	200000a8 	.word	0x200000a8
 80012ec:	200000ac 	.word	0x200000ac

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b096      	sub	sp, #88	; 0x58
 80012f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fe97 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f9a7 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fa73 	bl	80017e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001302:	f000 fa0d 	bl	8001720 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001306:	f000 fa39 	bl	800177c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADXL_Init(&InitInf);
 800130a:	48c3      	ldr	r0, [pc, #780]	; (8001618 <main+0x328>)
 800130c:	f7ff feae 	bl	800106c <ADXL_Init>
  ssd1306_Init();
 8001310:	f000 fb24 	bl	800195c <ssd1306_Init>
  ssd1306_Fill(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f000 fb8b 	bl	8001a30 <ssd1306_Fill>
  ssd1306_UpdateScreen ();
 800131a:	f000 fbad 	bl	8001a78 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5,5);
 800131e:	2105      	movs	r1, #5
 8001320:	2005      	movs	r0, #5
 8001322:	f000 fcd3 	bl	8001ccc <ssd1306_SetCursor>
  ssd1306_WriteString("Testing",Font_11x18,0x01);
 8001326:	4abd      	ldr	r2, [pc, #756]	; (800161c <main+0x32c>)
 8001328:	2301      	movs	r3, #1
 800132a:	ca06      	ldmia	r2, {r1, r2}
 800132c:	48bc      	ldr	r0, [pc, #752]	; (8001620 <main+0x330>)
 800132e:	f000 fca7 	bl	8001c80 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001332:	f000 fba1 	bl	8001a78 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char oledOut[50];
  int* ImpactList = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  int size = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
  int impact = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
  while (1)
  {

	int16_t data[3] = {0,0,0};
 8001342:	2300      	movs	r3, #0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	2300      	movs	r3, #0
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	2300      	movs	r3, #0
 800134c:	813b      	strh	r3, [r7, #8]
	ADXL_getAccel(data,OUTPUT_SIGNED);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2101      	movs	r1, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff3c 	bl	80011d0 <ADXL_getAccel>

	//sprintf(oledOut, "%d,%d,%d", data[0]/255,data[1]/255,data[2]/255);

	ssd1306_Fill(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 fb69 	bl	8001a30 <ssd1306_Fill>
	ssd1306_SetCursor(5,5);
 800135e:	2105      	movs	r1, #5
 8001360:	2005      	movs	r0, #5
 8001362:	f000 fcb3 	bl	8001ccc <ssd1306_SetCursor>
	int temp = (int)sqrt((data[0]*data[0]+data[1]*data[1]+data[2]*data[2])/255/255);
 8001366:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800136e:	fb03 f202 	mul.w	r2, r3, r2
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	441a      	add	r2, r3
 8001380:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001384:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	4aa5      	ldr	r2, [pc, #660]	; (8001624 <main+0x334>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	441a      	add	r2, r3
 8001396:	13d2      	asrs	r2, r2, #15
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8c1 	bl	8000524 <__aeabi_i2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	ec43 2b10 	vmov	d0, r2, r3
 80013aa:	f002 ffef 	bl	800438c <sqrt>
 80013ae:	ec53 2b10 	vmov	r2, r3, d0
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fbcf 	bl	8000b58 <__aeabi_d2iz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	643b      	str	r3, [r7, #64]	; 0x40
	if(temp > 4){
 80013be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	dd14      	ble.n	80013ee <main+0xfe>
		impact = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
		ImpactList = realloc(ImpactList, sizeof(int)*size);
 80013c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4619      	mov	r1, r3
 80013ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013d0:	f003 f8e2 	bl	8004598 <realloc>
 80013d4:	64f8      	str	r0, [r7, #76]	; 0x4c
		ImpactList[size-1] = temp;
 80013d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013dc:	3b01      	subs	r3, #1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013e2:	4413      	add	r3, r2
 80013e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013e6:	601a      	str	r2, [r3, #0]
		size++;
 80013e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ea:	3301      	adds	r3, #1
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if(impact == 0){
 80013ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 80b5 	bne.w	8001560 <main+0x270>
		sprintf(oledOut, "X:%d.%d,Y:%d.%d", data[0]*100/255/100,abs(data[0]*100/255%100),data[1]*100/255/100,abs(data[1]*100/255%100));
 80013f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fa:	4a8b      	ldr	r2, [pc, #556]	; (8001628 <main+0x338>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	441a      	add	r2, r3
 8001402:	11d2      	asrs	r2, r2, #7
 8001404:	17db      	asrs	r3, r3, #31
 8001406:	1ad4      	subs	r4, r2, r3
 8001408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800140c:	461a      	mov	r2, r3
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	4a84      	ldr	r2, [pc, #528]	; (8001628 <main+0x338>)
 8001416:	fb82 1203 	smull	r1, r2, r2, r3
 800141a:	441a      	add	r2, r3
 800141c:	11d2      	asrs	r2, r2, #7
 800141e:	17db      	asrs	r3, r3, #31
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <main+0x33c>)
 8001424:	fb83 1302 	smull	r1, r3, r3, r2
 8001428:	1159      	asrs	r1, r3, #5
 800142a:	17d3      	asrs	r3, r2, #31
 800142c:	1acb      	subs	r3, r1, r3
 800142e:	2164      	movs	r1, #100	; 0x64
 8001430:	fb01 f303 	mul.w	r3, r1, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800143a:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	4a79      	ldr	r2, [pc, #484]	; (8001628 <main+0x338>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	441a      	add	r2, r3
 800144a:	11d2      	asrs	r2, r2, #7
 800144c:	17db      	asrs	r3, r3, #31
 800144e:	1ad1      	subs	r1, r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	461a      	mov	r2, r3
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	4a72      	ldr	r2, [pc, #456]	; (8001628 <main+0x338>)
 800145e:	fb82 0203 	smull	r0, r2, r2, r3
 8001462:	441a      	add	r2, r3
 8001464:	11d2      	asrs	r2, r2, #7
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad2      	subs	r2, r2, r3
 800146a:	4b70      	ldr	r3, [pc, #448]	; (800162c <main+0x33c>)
 800146c:	fb83 0302 	smull	r0, r3, r3, r2
 8001470:	1158      	asrs	r0, r3, #5
 8001472:	17d3      	asrs	r3, r2, #31
 8001474:	1ac3      	subs	r3, r0, r3
 8001476:	2064      	movs	r0, #100	; 0x64
 8001478:	fb00 f303 	mul.w	r3, r0, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	bfb8      	it	lt
 8001482:	425b      	neglt	r3, r3
 8001484:	f107 000c 	add.w	r0, r7, #12
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9100      	str	r1, [sp, #0]
 800148c:	462b      	mov	r3, r5
 800148e:	4622      	mov	r2, r4
 8001490:	4967      	ldr	r1, [pc, #412]	; (8001630 <main+0x340>)
 8001492:	f003 f8b9 	bl	8004608 <siprintf>
		ssd1306_WriteString(oledOut,Font_7x10,0x01);
 8001496:	4a67      	ldr	r2, [pc, #412]	; (8001634 <main+0x344>)
 8001498:	f107 000c 	add.w	r0, r7, #12
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	f000 fbee 	bl	8001c80 <ssd1306_WriteString>
		ssd1306_SetCursor(5,15);
 80014a4:	210f      	movs	r1, #15
 80014a6:	2005      	movs	r0, #5
 80014a8:	f000 fc10 	bl	8001ccc <ssd1306_SetCursor>
		sprintf(oledOut, "Z:%d.%d, Mag:%d.%d",data[2]*100/255/100,abs(data[2]*100/255%100), temp*100/100, abs(temp*100/255%100));
 80014ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014b0:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <main+0x338>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	11d2      	asrs	r2, r2, #7
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1ad4      	subs	r4, r2, r3
 80014be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014c2:	461a      	mov	r2, r3
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a57      	ldr	r2, [pc, #348]	; (8001628 <main+0x338>)
 80014cc:	fb82 1203 	smull	r1, r2, r2, r3
 80014d0:	441a      	add	r2, r3
 80014d2:	11d2      	asrs	r2, r2, #7
 80014d4:	17db      	asrs	r3, r3, #31
 80014d6:	1ad2      	subs	r2, r2, r3
 80014d8:	4b54      	ldr	r3, [pc, #336]	; (800162c <main+0x33c>)
 80014da:	fb83 1302 	smull	r1, r3, r3, r2
 80014de:	1159      	asrs	r1, r3, #5
 80014e0:	17d3      	asrs	r3, r2, #31
 80014e2:	1acb      	subs	r3, r1, r3
 80014e4:	2164      	movs	r1, #100	; 0x64
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80014f0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80014f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014f6:	2264      	movs	r2, #100	; 0x64
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <main+0x338>)
 80014fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001502:	441a      	add	r2, r3
 8001504:	11d2      	asrs	r2, r2, #7
 8001506:	17db      	asrs	r3, r3, #31
 8001508:	1ad2      	subs	r2, r2, r3
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <main+0x33c>)
 800150c:	fb83 1302 	smull	r1, r3, r3, r2
 8001510:	1159      	asrs	r1, r3, #5
 8001512:	17d3      	asrs	r3, r2, #31
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	2164      	movs	r1, #100	; 0x64
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	bfb8      	it	lt
 8001522:	425b      	neglt	r3, r3
 8001524:	f107 000c 	add.w	r0, r7, #12
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	462b      	mov	r3, r5
 8001530:	4622      	mov	r2, r4
 8001532:	4941      	ldr	r1, [pc, #260]	; (8001638 <main+0x348>)
 8001534:	f003 f868 	bl	8004608 <siprintf>
		ssd1306_WriteString(oledOut,Font_7x10,0x01);
 8001538:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <main+0x344>)
 800153a:	f107 000c 	add.w	r0, r7, #12
 800153e:	2301      	movs	r3, #1
 8001540:	ca06      	ldmia	r2, {r1, r2}
 8001542:	f000 fb9d 	bl	8001c80 <ssd1306_WriteString>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2102      	movs	r1, #2
 800154a:	483c      	ldr	r0, [pc, #240]	; (800163c <main+0x34c>)
 800154c:	f001 f898 	bl	8002680 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4839      	ldr	r0, [pc, #228]	; (800163c <main+0x34c>)
 8001556:	f001 f893 	bl	8002680 <HAL_GPIO_WritePin>
		ssd1306_UpdateScreen();
 800155a:	f000 fa8d 	bl	8001a78 <ssd1306_UpdateScreen>
 800155e:	e6f0      	b.n	8001342 <main+0x52>
	}else{
		sprintf(oledOut, "IMPACT DETECTED");
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4936      	ldr	r1, [pc, #216]	; (8001640 <main+0x350>)
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f84e 	bl	8004608 <siprintf>
		ssd1306_WriteString(oledOut,Font_7x10,0x01);
 800156c:	4a31      	ldr	r2, [pc, #196]	; (8001634 <main+0x344>)
 800156e:	f107 000c 	add.w	r0, r7, #12
 8001572:	2301      	movs	r3, #1
 8001574:	ca06      	ldmia	r2, {r1, r2}
 8001576:	f000 fb83 	bl	8001c80 <ssd1306_WriteString>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2102      	movs	r1, #2
 800157e:	482f      	ldr	r0, [pc, #188]	; (800163c <main+0x34c>)
 8001580:	f001 f87e 	bl	8002680 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	2101      	movs	r1, #1
 8001588:	482c      	ldr	r0, [pc, #176]	; (800163c <main+0x34c>)
 800158a:	f001 f879 	bl	8002680 <HAL_GPIO_WritePin>
		ssd1306_SetCursor(5,15);
 800158e:	210f      	movs	r1, #15
 8001590:	2005      	movs	r0, #5
 8001592:	f000 fb9b 	bl	8001ccc <ssd1306_SetCursor>
		if(impactIndex >= size-1){
 8001596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <main+0x354>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dc02      	bgt.n	80015a8 <main+0x2b8>
			impactIndex = 0;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <main+0x354>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
		}
		sprintf(oledOut, "#%d, Mag:%d.%d m/s2", impactIndex+1, ImpactList[impactIndex]*100/100, abs(ImpactList[impactIndex]*100/255%100));
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <main+0x354>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1c5c      	adds	r4, r3, #1
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <main+0x354>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015b6:	4413      	add	r3, r2
 80015b8:	681d      	ldr	r5, [r3, #0]
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <main+0x354>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015c2:	4413      	add	r3, r2
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2264      	movs	r2, #100	; 0x64
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <main+0x338>)
 80015ce:	fb82 1203 	smull	r1, r2, r2, r3
 80015d2:	441a      	add	r2, r3
 80015d4:	11d2      	asrs	r2, r2, #7
 80015d6:	17db      	asrs	r3, r3, #31
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <main+0x33c>)
 80015dc:	fb83 1302 	smull	r1, r3, r3, r2
 80015e0:	1159      	asrs	r1, r3, #5
 80015e2:	17d3      	asrs	r3, r2, #31
 80015e4:	1acb      	subs	r3, r1, r3
 80015e6:	2164      	movs	r1, #100	; 0x64
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfb8      	it	lt
 80015f2:	425b      	neglt	r3, r3
 80015f4:	f107 000c 	add.w	r0, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	462b      	mov	r3, r5
 80015fc:	4622      	mov	r2, r4
 80015fe:	4912      	ldr	r1, [pc, #72]	; (8001648 <main+0x358>)
 8001600:	f003 f802 	bl	8004608 <siprintf>
		ssd1306_WriteString(oledOut,Font_7x10,0x01);
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <main+0x344>)
 8001606:	f107 000c 	add.w	r0, r7, #12
 800160a:	2301      	movs	r3, #1
 800160c:	ca06      	ldmia	r2, {r1, r2}
 800160e:	f000 fb37 	bl	8001c80 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001612:	f000 fa31 	bl	8001a78 <ssd1306_UpdateScreen>
  {
 8001616:	e694      	b.n	8001342 <main+0x52>
 8001618:	20000000 	.word	0x20000000
 800161c:	20000014 	.word	0x20000014
 8001620:	08004f10 	.word	0x08004f10
 8001624:	81018203 	.word	0x81018203
 8001628:	80808081 	.word	0x80808081
 800162c:	51eb851f 	.word	0x51eb851f
 8001630:	08004f18 	.word	0x08004f18
 8001634:	2000000c 	.word	0x2000000c
 8001638:	08004f28 	.word	0x08004f28
 800163c:	40020800 	.word	0x40020800
 8001640:	08004f3c 	.word	0x08004f3c
 8001644:	200000b0 	.word	0x200000b0
 8001648:	08004f4c 	.word	0x08004f4c

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2230      	movs	r2, #48	; 0x30
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fff4 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <SystemClock_Config+0xcc>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <SystemClock_Config+0xcc>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <SystemClock_Config+0xcc>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <SystemClock_Config+0xd0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <SystemClock_Config+0xd0>)
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2310      	movs	r3, #16
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c0:	2308      	movs	r3, #8
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fc6d 	bl	8002fb4 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016e0:	f000 f8fe 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80016ec:	2390      	movs	r3, #144	; 0x90
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fecf 	bl	80034a4 <HAL_RCC_ClockConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800170c:	f000 f8e8 	bl	80018e0 <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3750      	adds	r7, #80	; 0x50
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x50>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_I2C1_Init+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x50>)
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_I2C1_Init+0x58>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_I2C1_Init+0x50>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_I2C1_Init+0x50>)
 800175e:	f000 ffcd 	bl	80026fc <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 f8ba 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200000b4 	.word	0x200000b4
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0

0800177c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_SPI1_Init+0x64>)
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <MX_SPI1_Init+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_SPI1_Init+0x64>)
 8001788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800178c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_SPI1_Init+0x64>)
 800179c:	2202      	movs	r2, #2
 800179e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_SPI1_Init+0x64>)
 80017ce:	f002 f835 	bl	800383c <HAL_SPI_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017d8:	f000 f882 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000108 	.word	0x20000108
 80017e4:	40013000 	.word	0x40013000

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <MX_GPIO_Init+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <MX_GPIO_Init+0xec>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <MX_GPIO_Init+0xec>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2103      	movs	r1, #3
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <MX_GPIO_Init+0xf0>)
 8001858:	f000 ff12 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <MX_GPIO_Init+0xf4>)
 8001862:	f000 ff0d 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4619      	mov	r1, r3
 800187c:	4816      	ldr	r0, [pc, #88]	; (80018d8 <MX_GPIO_Init+0xf0>)
 800187e:	f000 fd7b 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001882:	2303      	movs	r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <MX_GPIO_Init+0xf0>)
 800189a:	f000 fd6d 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <MX_GPIO_Init+0xf4>)
 80018b6:	f000 fd5f 	bl	8002378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2028      	movs	r0, #40	; 0x28
 80018c0:	f000 fd23 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c4:	2028      	movs	r0, #40	; 0x28
 80018c6:	f000 fd3c 	bl	8002342 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020400 	.word	0x40020400

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>

080018ea <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2301      	movs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2200      	movs	r2, #0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	4803      	ldr	r0, [pc, #12]	; (8001924 <ssd1306_WriteCommand+0x2c>)
 8001918:	f001 f834 	bl	8002984 <HAL_I2C_Mem_Write>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000b4 	.word	0x200000b4

08001928 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	9202      	str	r2, [sp, #8]
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	2178      	movs	r1, #120	; 0x78
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <ssd1306_WriteData+0x30>)
 800194a:	f001 f81b 	bl	8002984 <HAL_I2C_Mem_Write>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200000b4 	.word	0x200000b4

0800195c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001960:	f7ff ffc3 	bl	80018ea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	f000 fbd1 	bl	800210c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f9da 	bl	8001d24 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001970:	2020      	movs	r0, #32
 8001972:	f7ff ffc1 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffbe 	bl	80018f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800197c:	20b0      	movs	r0, #176	; 0xb0
 800197e:	f7ff ffbb 	bl	80018f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001982:	20c8      	movs	r0, #200	; 0xc8
 8001984:	f7ff ffb8 	bl	80018f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ffb5 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff ffb2 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001994:	2040      	movs	r0, #64	; 0x40
 8001996:	f7ff ffaf 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800199a:	20ff      	movs	r0, #255	; 0xff
 800199c:	f000 f9ae 	bl	8001cfc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019a0:	20a1      	movs	r0, #161	; 0xa1
 80019a2:	f7ff ffa9 	bl	80018f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019a6:	20a6      	movs	r0, #166	; 0xa6
 80019a8:	f7ff ffa6 	bl	80018f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019ac:	20a8      	movs	r0, #168	; 0xa8
 80019ae:	f7ff ffa3 	bl	80018f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80019b2:	201f      	movs	r0, #31
 80019b4:	f7ff ffa0 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019b8:	20a4      	movs	r0, #164	; 0xa4
 80019ba:	f7ff ff9d 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019be:	20d3      	movs	r0, #211	; 0xd3
 80019c0:	f7ff ff9a 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff97 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ca:	20d5      	movs	r0, #213	; 0xd5
 80019cc:	f7ff ff94 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019d0:	20f0      	movs	r0, #240	; 0xf0
 80019d2:	f7ff ff91 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019d6:	20d9      	movs	r0, #217	; 0xd9
 80019d8:	f7ff ff8e 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019dc:	2022      	movs	r0, #34	; 0x22
 80019de:	f7ff ff8b 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019e2:	20da      	movs	r0, #218	; 0xda
 80019e4:	f7ff ff88 	bl	80018f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7ff ff85 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019ee:	20db      	movs	r0, #219	; 0xdb
 80019f0:	f7ff ff82 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019f4:	2020      	movs	r0, #32
 80019f6:	f7ff ff7f 	bl	80018f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019fa:	208d      	movs	r0, #141	; 0x8d
 80019fc:	f7ff ff7c 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a00:	2014      	movs	r0, #20
 8001a02:	f7ff ff79 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 f98c 	bl	8001d24 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f80f 	bl	8001a30 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a12:	f000 f831 	bl	8001a78 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <ssd1306_Init+0xd0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <ssd1306_Init+0xd0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a22:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <ssd1306_Init+0xd0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	711a      	strb	r2, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000360 	.word	0x20000360

08001a30 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e00d      	b.n	8001a5c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <ssd1306_Fill+0x1a>
 8001a46:	2100      	movs	r1, #0
 8001a48:	e000      	b.n	8001a4c <ssd1306_Fill+0x1c>
 8001a4a:	21ff      	movs	r1, #255	; 0xff
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <ssd1306_Fill+0x44>)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	460a      	mov	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d3ed      	bcc.n	8001a40 <ssd1306_Fill+0x10>
    }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000160 	.word	0x20000160

08001a78 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e016      	b.n	8001ab2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3b50      	subs	r3, #80	; 0x50
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff34 	bl	80018f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff31 	bl	80018f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a96:	2010      	movs	r0, #16
 8001a98:	f7ff ff2e 	bl	80018f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <ssd1306_UpdateScreen+0x4c>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff3e 	bl	8001928 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d9e5      	bls.n	8001a84 <ssd1306_UpdateScreen+0xc>
    }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000160 	.word	0x20000160

08001ac8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	71bb      	strb	r3, [r7, #6]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db3d      	blt.n	8001b5e <ssd1306_DrawPixel+0x96>
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	2b1f      	cmp	r3, #31
 8001ae6:	d83a      	bhi.n	8001b5e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d11a      	bne.n	8001b24 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	08db      	lsrs	r3, r3, #3
 8001af4:	b2d8      	uxtb	r0, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	01db      	lsls	r3, r3, #7
 8001afa:	4413      	add	r3, r2
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <ssd1306_DrawPixel+0xa4>)
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	b25a      	sxtb	r2, r3
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b259      	sxtb	r1, r3
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	4603      	mov	r3, r0
 8001b18:	01db      	lsls	r3, r3, #7
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b2c9      	uxtb	r1, r1
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <ssd1306_DrawPixel+0xa4>)
 8001b20:	54d1      	strb	r1, [r2, r3]
 8001b22:	e01d      	b.n	8001b60 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	b2d8      	uxtb	r0, r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	4413      	add	r3, r2
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <ssd1306_DrawPixel+0xa4>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	b259      	sxtb	r1, r3
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	4603      	mov	r3, r0
 8001b52:	01db      	lsls	r3, r3, #7
 8001b54:	4413      	add	r3, r2
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <ssd1306_DrawPixel+0xa4>)
 8001b5a:	54d1      	strb	r1, [r2, r3]
 8001b5c:	e000      	b.n	8001b60 <ssd1306_DrawPixel+0x98>
        return;
 8001b5e:	bf00      	nop
    }
}
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000160 	.word	0x20000160

08001b70 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	1d38      	adds	r0, r7, #4
 8001b7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4623      	mov	r3, r4
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	4613      	mov	r3, r2
 8001b86:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b1f      	cmp	r3, #31
 8001b8c:	d902      	bls.n	8001b94 <ssd1306_WriteChar+0x24>
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b7e      	cmp	r3, #126	; 0x7e
 8001b92:	d901      	bls.n	8001b98 <ssd1306_WriteChar+0x28>
        return 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e06d      	b.n	8001c74 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	793b      	ldrb	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	dc06      	bgt.n	8001bb4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001ba8:	885b      	ldrh	r3, [r3, #2]
 8001baa:	461a      	mov	r2, r3
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	dd01      	ble.n	8001bb8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e05d      	b.n	8001c74 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	e04c      	b.n	8001c58 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3b20      	subs	r3, #32
 8001bc4:	7979      	ldrb	r1, [r7, #5]
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	440b      	add	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e034      	b.n	8001c48 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d012      	beq.n	8001c14 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001bfe:	885b      	ldrh	r3, [r3, #2]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	7bba      	ldrb	r2, [r7, #14]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7ff ff5b 	bl	8001ac8 <ssd1306_DrawPixel>
 8001c12:	e016      	b.n	8001c42 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2d8      	uxtb	r0, r3
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001c24:	885b      	ldrh	r3, [r3, #2]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2d9      	uxtb	r1, r3
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f7ff ff43 	bl	8001ac8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	793b      	ldrb	r3, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d3c5      	bcc.n	8001bde <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	797b      	ldrb	r3, [r7, #5]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d3ad      	bcc.n	8001bbe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001c64:	881a      	ldrh	r2, [r3, #0]
 8001c66:	793b      	ldrb	r3, [r7, #4]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <ssd1306_WriteChar+0x10c>)
 8001c70:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3724      	adds	r7, #36	; 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	20000360 	.word	0x20000360

08001c80 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	1d38      	adds	r0, r7, #4
 8001c8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c8e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001c90:	e012      	b.n	8001cb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	7818      	ldrb	r0, [r3, #0]
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	1d3a      	adds	r2, r7, #4
 8001c9a:	ca06      	ldmia	r2, {r1, r2}
 8001c9c:	f7ff ff68 	bl	8001b70 <ssd1306_WriteChar>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d002      	beq.n	8001cb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	e008      	b.n	8001cc4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <ssd1306_SetCursor+0x2c>)
 8001ce2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <ssd1306_SetCursor+0x2c>)
 8001cea:	805a      	strh	r2, [r3, #2]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000360 	.word	0x20000360

08001cfc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d06:	2381      	movs	r3, #129	; 0x81
 8001d08:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fdf3 	bl	80018f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fdef 	bl	80018f8 <ssd1306_WriteCommand>
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d34:	23af      	movs	r3, #175	; 0xaf
 8001d36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <ssd1306_SetDisplayOn+0x38>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	715a      	strb	r2, [r3, #5]
 8001d3e:	e004      	b.n	8001d4a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d40:	23ae      	movs	r3, #174	; 0xae
 8001d42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <ssd1306_SetDisplayOn+0x38>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fdd3 	bl	80018f8 <ssd1306_WriteCommand>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000360 	.word	0x20000360

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_MspInit+0x4c>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x4c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_I2C_MspInit+0x84>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12c      	bne.n	8001e2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e00:	2304      	movs	r3, #4
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480c      	ldr	r0, [pc, #48]	; (8001e3c <HAL_I2C_MspInit+0x8c>)
 8001e0c:	f000 fab4 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_I2C_MspInit+0x88>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40005400 	.word	0x40005400
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020400 	.word	0x40020400

08001e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_SPI_MspInit+0x84>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12b      	bne.n	8001eba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	23e0      	movs	r3, #224	; 0xe0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001eb6:	f000 fa5f 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40013000 	.word	0x40013000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 f8d6 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	impactIndex++;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <EXTI15_10_IRQHandler+0x1c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <EXTI15_10_IRQHandler+0x1c>)
 8001f30:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f36:	f000 fbbd 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000b0 	.word	0x200000b0

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f002 fb70 	bl	8004658 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20018000 	.word	0x20018000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000368 	.word	0x20000368
 8001fac:	200004b8 	.word	0x200004b8

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff0:	4c0b      	ldr	r4, [pc, #44]	; (8002020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffe:	f7ff ffd7 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f002 fb2f 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff f973 	bl	80012f0 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800200c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002018:	08006484 	.word	0x08006484
  ldr r2, =_sbss
 800201c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002020:	200004b8 	.word	0x200004b8

08002024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 f94f 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fe80 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f967 	bl	800235e <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 f92f 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000001c 	.word	0x2000001c
 80020c4:	20000024 	.word	0x20000024
 80020c8:	20000020 	.word	0x20000020

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000024 	.word	0x20000024
 80020f0:	2000036c 	.word	0x2000036c

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000036c 	.word	0x2000036c

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000024 	.word	0x20000024

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e159      	b.n	8002648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 8148 	bne.w	8002642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d005      	beq.n	80023ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d130      	bne.n	800242c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0201 	and.w	r2, r3, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d017      	beq.n	8002468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d123      	bne.n	80024bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a2 	beq.w	8002642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <HAL_GPIO_Init+0x2e8>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a56      	ldr	r2, [pc, #344]	; (8002660 <HAL_GPIO_Init+0x2e8>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <HAL_GPIO_Init+0x2e8>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_GPIO_Init+0x2ec>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_GPIO_Init+0x2f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x202>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_GPIO_Init+0x2f4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x1fe>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_GPIO_Init+0x2f8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x1fa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_GPIO_Init+0x2fc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x1f6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_GPIO_Init+0x300>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x1f2>
 8002566:	2304      	movs	r3, #4
 8002568:	e008      	b.n	800257c <HAL_GPIO_Init+0x204>
 800256a:	2307      	movs	r3, #7
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x204>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <HAL_GPIO_Init+0x204>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <HAL_GPIO_Init+0x204>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x204>
 800257a:	2300      	movs	r3, #0
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f002 0203 	and.w	r2, r2, #3
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4093      	lsls	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258c:	4935      	ldr	r1, [pc, #212]	; (8002664 <HAL_GPIO_Init+0x2ec>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_GPIO_Init+0x304>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025be:	4a2f      	ldr	r2, [pc, #188]	; (800267c <HAL_GPIO_Init+0x304>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_GPIO_Init+0x304>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e8:	4a24      	ldr	r2, [pc, #144]	; (800267c <HAL_GPIO_Init+0x304>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_GPIO_Init+0x304>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002612:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_GPIO_Init+0x304>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_GPIO_Init+0x304>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_GPIO_Init+0x304>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	f67f aea2 	bls.w	8002394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40013800 	.word	0x40013800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f806 	bl	80026e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e12b      	b.n	8002966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fb44 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002760:	f001 f858 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a81      	ldr	r2, [pc, #516]	; (8002970 <HAL_I2C_Init+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d807      	bhi.n	8002780 <HAL_I2C_Init+0x84>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a80      	ldr	r2, [pc, #512]	; (8002974 <HAL_I2C_Init+0x278>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e006      	b.n	800278e <HAL_I2C_Init+0x92>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_I2C_Init+0x27c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0e7      	b.n	8002966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a78      	ldr	r2, [pc, #480]	; (800297c <HAL_I2C_Init+0x280>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_I2C_Init+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_I2C_Init+0xd4>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e009      	b.n	80027e4 <HAL_I2C_Init+0xe8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_I2C_Init+0x284>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	3301      	adds	r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	495c      	ldr	r1, [pc, #368]	; (8002970 <HAL_I2C_Init+0x274>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d819      	bhi.n	8002838 <HAL_I2C_Init+0x13c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002818:	400b      	ands	r3, r1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_I2C_Init+0x138>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fbb1 f3f3 	udiv	r3, r1, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	e051      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002834:	2304      	movs	r3, #4
 8002836:	e04f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_I2C_Init+0x168>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e012      	b.n	800288a <HAL_I2C_Init+0x18e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x196>
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10e      	bne.n	80028b8 <HAL_I2C_Init+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e58      	subs	r0, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6911      	ldr	r1, [r2, #16]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff fba9 	bl	80020f4 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80d9 	bne.w	8002b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2319      	movs	r3, #25
 80029b8:	2201      	movs	r2, #1
 80029ba:	496d      	ldr	r1, [pc, #436]	; (8002b70 <HAL_I2C_Mem_Write+0x1ec>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f971 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0cc      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Mem_Write+0x56>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0c5      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d007      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_I2C_Mem_Write+0x1f0>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a42:	88f8      	ldrh	r0, [r7, #6]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f890 	bl	8002b78 <I2C_RequestMemoryWrite>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d052      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e081      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f9f2 	bl	8002e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x180>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1aa      	bne.n	8002a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f9de 	bl	8002ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e016      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00100002 	.word	0x00100002
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f878 	bl	8002ca4 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d103      	bne.n	8002bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e05f      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	492d      	ldr	r1, [pc, #180]	; (8002ca0 <I2C_RequestMemoryWrite+0x128>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f8b0 	bl	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04c      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f91a 	bl	8002e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e02b      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e021      	b.n	8002c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8f4 	bl	8002e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e005      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00010002 	.word	0x00010002

08002ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb4:	e025      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d021      	beq.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7ff fa19 	bl	80020f4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d116      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e023      	b.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10d      	bne.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	e00c      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d0b6      	beq.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d60:	e051      	b.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d123      	bne.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e046      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d021      	beq.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc2:	f7ff f997 	bl	80020f4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d302      	bcc.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e020      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10c      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e00b      	b.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d18d      	bne.n	8002d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5c:	e02d      	b.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f878 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02d      	b.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7ff f93d 	bl	80020f4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e007      	b.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d1ca      	bne.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ede:	e02d      	b.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f837 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e02d      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d021      	beq.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7ff f8fc 	bl	80020f4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d1ca      	bne.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d11b      	bne.n	8002fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e267      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d075      	beq.n	80030be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05b      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d157      	bne.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e242      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x74>
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x98>
 8003032:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6f      	ldr	r2, [pc, #444]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6c      	ldr	r2, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a68      	ldr	r2, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7ff f842 	bl	80020f4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff f83e 	bl	80020f4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e207      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0xc0>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff f82e 	bl	80020f4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff f82a 	bl	80020f4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1f3      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d063      	beq.n	8003192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1c7      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e03a      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe ffe3 	bl	80020f4 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe ffdf 	bl	80020f4 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1a8      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4925      	ldr	r1, [pc, #148]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe ffc2 	bl	80020f4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe ffbe 	bl	80020f4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e187      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe ffa2 	bl	80020f4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fe ff9e 	bl	80020f4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e167      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x200>
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fe ff8b 	bl	80020f4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fe ff87 	bl	80020f4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e150      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b74      	ldr	r3, [pc, #464]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a73      	ldr	r2, [pc, #460]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fe ff47 	bl	80020f4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe ff43 	bl	80020f4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e10c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x2ea>
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a63      	ldr	r2, [pc, #396]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x30c>
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a5e      	ldr	r2, [pc, #376]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe ff08 	bl	80020f4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe ff04 	bl	80020f4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0cb      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x334>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fe fef2 	bl	80020f4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe feee 	bl	80020f4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0b5      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a1 	beq.w	8003494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d05c      	beq.n	8003418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d141      	bne.n	80033ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_OscConfig+0x478>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fec2 	bl	80020f4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe febe 	bl	80020f4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e087      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	491b      	ldr	r1, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe fe97 	bl	80020f4 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fe93 	bl	80020f4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e05c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x416>
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fe80 	bl	80020f4 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fe7c 	bl	80020f4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e045      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x444>
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e038      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
 800342c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4ec>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d028      	beq.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d121      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11a      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cc      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90c      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	2b03      	cmp	r3, #3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e067      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe fdae 	bl	80020f4 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe fdaa 	bl	80020f4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20c      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fd0e 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	08006428 	.word	0x08006428
 8003668:	2000001c 	.word	0x2000001c
 800366c:	20000020 	.word	0x20000020

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b090      	sub	sp, #64	; 0x40
 8003676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d00d      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003694:	2b08      	cmp	r3, #8
 8003696:	f200 80a1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x34>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x3a>
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036a8:	e09b      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ae:	e098      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	627a      	str	r2, [r7, #36]	; 0x24
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d8:	2100      	movs	r1, #0
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036dc:	fb03 f201 	mul.w	r2, r3, r1
 80036e0:	2300      	movs	r3, #0
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ea:	fba0 1202 	umull	r1, r2, r0, r2
 80036ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f0:	460a      	mov	r2, r1
 80036f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	4413      	add	r3, r2
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2200      	movs	r2, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800370a:	f7fd fa4d 	bl	8000ba8 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003716:	e053      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	617a      	str	r2, [r7, #20]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	ebb2 080a 	subs.w	r8, r2, sl
 800374a:	eb63 090b 	sbc.w	r9, r3, fp
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800375a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800375e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003762:	ebb2 0408 	subs.w	r4, r2, r8
 8003766:	eb63 0509 	sbc.w	r5, r3, r9
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003778:	00e2      	lsls	r2, r4, #3
 800377a:	4614      	mov	r4, r2
 800377c:	461d      	mov	r5, r3
 800377e:	eb14 030a 	adds.w	r3, r4, sl
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	eb45 030b 	adc.w	r3, r5, fp
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b4:	f7fd f9f8 	bl	8000ba8 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	017d7840 	.word	0x017d7840

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000001c 	.word	0x2000001c

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08006438 	.word	0x08006438

0800383c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07b      	b.n	8003946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d009      	beq.n	8003874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
 8003866:	e005      	b.n	8003874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fe fad6 	bl	8001e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0104 	and.w	r1, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f003 0210 	and.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_SPI_Transmit+0x22>
 800396c:	2302      	movs	r3, #2
 800396e:	e126      	b.n	8003bbe <HAL_SPI_Transmit+0x270>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003978:	f7fe fbbc 	bl	80020f4 <HAL_GetTick>
 800397c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003992:	e10b      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x52>
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a4:	e102      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	d10f      	bne.n	8003a0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a34:	d14b      	bne.n	8003ace <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0xf6>
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d13e      	bne.n	8003ac2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a68:	e02b      	b.n	8003ac2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d112      	bne.n	8003a9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9c:	e011      	b.n	8003ac2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fe fb29 	bl	80020f4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d803      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x168>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x16e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac0:	e074      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ce      	bne.n	8003a6a <HAL_SPI_Transmit+0x11c>
 8003acc:	e04c      	b.n	8003b68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x18e>
 8003ad6:	8afb      	ldrh	r3, [r7, #22]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d140      	bne.n	8003b5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b02:	e02c      	b.n	8003b5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d113      	bne.n	8003b3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b38:	e011      	b.n	8003b5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fe fadb 	bl	80020f4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_Transmit+0x204>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_Transmit+0x20a>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b5c:	e026      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1cd      	bne.n	8003b04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fbcb 	bl	8004308 <SPI_EndRxTxTransaction>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e000      	b.n	8003bac <HAL_SPI_Transmit+0x25e>
  }

error:
 8003baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b088      	sub	sp, #32
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d112      	bne.n	8003c0a <HAL_SPI_Receive+0x44>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10e      	bne.n	8003c0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8f1 	bl	8003de8 <HAL_SPI_TransmitReceive>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e0ea      	b.n	8003de0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_SPI_Receive+0x52>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0e3      	b.n	8003de0 <HAL_SPI_Receive+0x21a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c20:	f7fe fa68 	bl	80020f4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c36:	e0ca      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Receive+0x7e>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c48:	e0c1      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d10f      	bne.n	8003cb2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d007      	beq.n	8003cd0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d162      	bne.n	8003d9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cd8:	e02e      	b.n	8003d38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d115      	bne.n	8003d14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f103 020c 	add.w	r2, r3, #12
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d12:	e011      	b.n	8003d38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d14:	f7fe f9ee 	bl	80020f4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d803      	bhi.n	8003d2c <HAL_SPI_Receive+0x166>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Receive+0x16c>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d36:	e04a      	b.n	8003dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1cb      	bne.n	8003cda <HAL_SPI_Receive+0x114>
 8003d42:	e031      	b.n	8003da8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d113      	bne.n	8003d7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d78:	e011      	b.n	8003d9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7a:	f7fe f9bb 	bl	80020f4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d803      	bhi.n	8003d92 <HAL_SPI_Receive+0x1cc>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x1d2>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9c:	e017      	b.n	8003dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1cd      	bne.n	8003d44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fa45 	bl	800423c <SPI_EndRxTransaction>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
 8003dca:	e000      	b.n	8003dce <HAL_SPI_Receive+0x208>
  }

error :
 8003dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003df6:	2301      	movs	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x26>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e18a      	b.n	8004124 <HAL_SPI_TransmitReceive+0x33c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e16:	f7fe f96d 	bl	80020f4 <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d00f      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x70>
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d107      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x68>
 8003e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d003      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e56:	e15b      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x82>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x82>
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e70:	e14e      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d003      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2205      	movs	r2, #5
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d007      	beq.n	8003eda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d178      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x10a>
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d166      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f16:	e053      	b.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d113      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d119      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x1b8>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d014      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fa0:	f7fe f8a8 	bl	80020f4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d807      	bhi.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d003      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fbe:	e0a7      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1a6      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x130>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1a1      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x130>
 8003fd4:	e07c      	b.n	80040d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x1fc>
 8003fde:	8b7b      	ldrh	r3, [r7, #26]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d16b      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400a:	e057      	b.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d11c      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d017      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d114      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d119      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x2ae>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d014      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004096:	f7fe f82d 	bl	80020f4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <HAL_SPI_TransmitReceive+0x2c6>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x2cc>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040ba:	e029      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1a2      	bne.n	800400c <HAL_SPI_TransmitReceive+0x224>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d19d      	bne.n	800400c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f917 	bl	8004308 <SPI_EndRxTxTransaction>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040ec:	e010      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e000      	b.n	8004110 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800410e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004124:	4618      	mov	r0, r3
 8004126:	3730      	adds	r7, #48	; 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fd ffda 	bl	80020f4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fd ffd2 	bl	80020f4 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e054      	b.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d050      	beq.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416c:	f7fd ffc2 	bl	80020f4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d111      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d10f      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e017      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d19b      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000001c 	.word	0x2000001c

0800423c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004250:	d111      	bne.n	8004276 <SPI_EndRxTransaction+0x3a>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d004      	beq.n	8004266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d107      	bne.n	8004276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427e:	d12a      	bne.n	80042d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d012      	beq.n	80042b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2200      	movs	r2, #0
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff ff49 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02d      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e026      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2101      	movs	r1, #1
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff36 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e013      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	2101      	movs	r1, #1
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ff23 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e000      	b.n	80042fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <SPI_EndRxTxTransaction+0x7c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <SPI_EndRxTxTransaction+0x80>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0d5b      	lsrs	r3, r3, #21
 8004320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004324:	fb02 f303 	mul.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d112      	bne.n	800435a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff fef4 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3b01      	subs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d0f2      	beq.n	800435a <SPI_EndRxTxTransaction+0x52>
 8004374:	e000      	b.n	8004378 <SPI_EndRxTxTransaction+0x70>
        break;
 8004376:	bf00      	nop
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2000001c 	.word	0x2000001c
 8004388:	165e9f81 	.word	0x165e9f81

0800438c <sqrt>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	ed2d 8b02 	vpush	{d8}
 8004392:	ec55 4b10 	vmov	r4, r5, d0
 8004396:	f000 f825 	bl	80043e4 <__ieee754_sqrt>
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	eeb0 8a40 	vmov.f32	s16, s0
 80043a6:	eef0 8a60 	vmov.f32	s17, s1
 80043aa:	f7fc fbbf 	bl	8000b2c <__aeabi_dcmpun>
 80043ae:	b990      	cbnz	r0, 80043d6 <sqrt+0x4a>
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc fb90 	bl	8000adc <__aeabi_dcmplt>
 80043bc:	b158      	cbz	r0, 80043d6 <sqrt+0x4a>
 80043be:	f000 f94b 	bl	8004658 <__errno>
 80043c2:	2321      	movs	r3, #33	; 0x21
 80043c4:	6003      	str	r3, [r0, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2300      	movs	r3, #0
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fa3d 	bl	800084c <__aeabi_ddiv>
 80043d2:	ec41 0b18 	vmov	d8, r0, r1
 80043d6:	eeb0 0a48 	vmov.f32	s0, s16
 80043da:	eef0 0a68 	vmov.f32	s1, s17
 80043de:	ecbd 8b02 	vpop	{d8}
 80043e2:	bd38      	pop	{r3, r4, r5, pc}

080043e4 <__ieee754_sqrt>:
 80043e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	ec55 4b10 	vmov	r4, r5, d0
 80043ec:	4e67      	ldr	r6, [pc, #412]	; (800458c <__ieee754_sqrt+0x1a8>)
 80043ee:	43ae      	bics	r6, r5
 80043f0:	ee10 0a10 	vmov	r0, s0
 80043f4:	ee10 2a10 	vmov	r2, s0
 80043f8:	4629      	mov	r1, r5
 80043fa:	462b      	mov	r3, r5
 80043fc:	d10d      	bne.n	800441a <__ieee754_sqrt+0x36>
 80043fe:	f7fc f8fb 	bl	80005f8 <__aeabi_dmul>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4620      	mov	r0, r4
 8004408:	4629      	mov	r1, r5
 800440a:	f7fb ff3f 	bl	800028c <__adddf3>
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
 8004412:	ec45 4b10 	vmov	d0, r4, r5
 8004416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441a:	2d00      	cmp	r5, #0
 800441c:	dc0b      	bgt.n	8004436 <__ieee754_sqrt+0x52>
 800441e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004422:	4326      	orrs	r6, r4
 8004424:	d0f5      	beq.n	8004412 <__ieee754_sqrt+0x2e>
 8004426:	b135      	cbz	r5, 8004436 <__ieee754_sqrt+0x52>
 8004428:	f7fb ff2e 	bl	8000288 <__aeabi_dsub>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	f7fc fa0c 	bl	800084c <__aeabi_ddiv>
 8004434:	e7eb      	b.n	800440e <__ieee754_sqrt+0x2a>
 8004436:	1509      	asrs	r1, r1, #20
 8004438:	f000 808d 	beq.w	8004556 <__ieee754_sqrt+0x172>
 800443c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004440:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004448:	07c9      	lsls	r1, r1, #31
 800444a:	bf5c      	itt	pl
 800444c:	005b      	lslpl	r3, r3, #1
 800444e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004452:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004456:	bf58      	it	pl
 8004458:	0052      	lslpl	r2, r2, #1
 800445a:	2500      	movs	r5, #0
 800445c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004460:	1076      	asrs	r6, r6, #1
 8004462:	0052      	lsls	r2, r2, #1
 8004464:	f04f 0e16 	mov.w	lr, #22
 8004468:	46ac      	mov	ip, r5
 800446a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800446e:	eb0c 0001 	add.w	r0, ip, r1
 8004472:	4298      	cmp	r0, r3
 8004474:	bfde      	ittt	le
 8004476:	1a1b      	suble	r3, r3, r0
 8004478:	eb00 0c01 	addle.w	ip, r0, r1
 800447c:	186d      	addle	r5, r5, r1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	f1be 0e01 	subs.w	lr, lr, #1
 8004484:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004488:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800448c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004490:	d1ed      	bne.n	800446e <__ieee754_sqrt+0x8a>
 8004492:	4674      	mov	r4, lr
 8004494:	2720      	movs	r7, #32
 8004496:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800449a:	4563      	cmp	r3, ip
 800449c:	eb01 000e 	add.w	r0, r1, lr
 80044a0:	dc02      	bgt.n	80044a8 <__ieee754_sqrt+0xc4>
 80044a2:	d113      	bne.n	80044cc <__ieee754_sqrt+0xe8>
 80044a4:	4290      	cmp	r0, r2
 80044a6:	d811      	bhi.n	80044cc <__ieee754_sqrt+0xe8>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	eb00 0e01 	add.w	lr, r0, r1
 80044ae:	da57      	bge.n	8004560 <__ieee754_sqrt+0x17c>
 80044b0:	f1be 0f00 	cmp.w	lr, #0
 80044b4:	db54      	blt.n	8004560 <__ieee754_sqrt+0x17c>
 80044b6:	f10c 0801 	add.w	r8, ip, #1
 80044ba:	eba3 030c 	sub.w	r3, r3, ip
 80044be:	4290      	cmp	r0, r2
 80044c0:	bf88      	it	hi
 80044c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80044c6:	1a12      	subs	r2, r2, r0
 80044c8:	440c      	add	r4, r1
 80044ca:	46c4      	mov	ip, r8
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	3f01      	subs	r7, #1
 80044d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80044d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80044dc:	d1dd      	bne.n	800449a <__ieee754_sqrt+0xb6>
 80044de:	4313      	orrs	r3, r2
 80044e0:	d01b      	beq.n	800451a <__ieee754_sqrt+0x136>
 80044e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004590 <__ieee754_sqrt+0x1ac>
 80044e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004594 <__ieee754_sqrt+0x1b0>
 80044ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80044ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80044f2:	f7fb fec9 	bl	8000288 <__aeabi_dsub>
 80044f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4640      	mov	r0, r8
 8004500:	4649      	mov	r1, r9
 8004502:	f7fc faf5 	bl	8000af0 <__aeabi_dcmple>
 8004506:	b140      	cbz	r0, 800451a <__ieee754_sqrt+0x136>
 8004508:	f1b4 3fff 	cmp.w	r4, #4294967295
 800450c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004510:	e9db 2300 	ldrd	r2, r3, [fp]
 8004514:	d126      	bne.n	8004564 <__ieee754_sqrt+0x180>
 8004516:	3501      	adds	r5, #1
 8004518:	463c      	mov	r4, r7
 800451a:	106a      	asrs	r2, r5, #1
 800451c:	0863      	lsrs	r3, r4, #1
 800451e:	07e9      	lsls	r1, r5, #31
 8004520:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004524:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004528:	bf48      	it	mi
 800452a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800452e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004532:	461c      	mov	r4, r3
 8004534:	e76d      	b.n	8004412 <__ieee754_sqrt+0x2e>
 8004536:	0ad3      	lsrs	r3, r2, #11
 8004538:	3815      	subs	r0, #21
 800453a:	0552      	lsls	r2, r2, #21
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0fa      	beq.n	8004536 <__ieee754_sqrt+0x152>
 8004540:	02dc      	lsls	r4, r3, #11
 8004542:	d50a      	bpl.n	800455a <__ieee754_sqrt+0x176>
 8004544:	f1c1 0420 	rsb	r4, r1, #32
 8004548:	fa22 f404 	lsr.w	r4, r2, r4
 800454c:	1e4d      	subs	r5, r1, #1
 800454e:	408a      	lsls	r2, r1
 8004550:	4323      	orrs	r3, r4
 8004552:	1b41      	subs	r1, r0, r5
 8004554:	e772      	b.n	800443c <__ieee754_sqrt+0x58>
 8004556:	4608      	mov	r0, r1
 8004558:	e7f0      	b.n	800453c <__ieee754_sqrt+0x158>
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	3101      	adds	r1, #1
 800455e:	e7ef      	b.n	8004540 <__ieee754_sqrt+0x15c>
 8004560:	46e0      	mov	r8, ip
 8004562:	e7aa      	b.n	80044ba <__ieee754_sqrt+0xd6>
 8004564:	f7fb fe92 	bl	800028c <__adddf3>
 8004568:	e9da 8900 	ldrd	r8, r9, [sl]
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	f7fc fab2 	bl	8000adc <__aeabi_dcmplt>
 8004578:	b120      	cbz	r0, 8004584 <__ieee754_sqrt+0x1a0>
 800457a:	1ca0      	adds	r0, r4, #2
 800457c:	bf08      	it	eq
 800457e:	3501      	addeq	r5, #1
 8004580:	3402      	adds	r4, #2
 8004582:	e7ca      	b.n	800451a <__ieee754_sqrt+0x136>
 8004584:	3401      	adds	r4, #1
 8004586:	f024 0401 	bic.w	r4, r4, #1
 800458a:	e7c6      	b.n	800451a <__ieee754_sqrt+0x136>
 800458c:	7ff00000 	.word	0x7ff00000
 8004590:	20000028 	.word	0x20000028
 8004594:	20000030 	.word	0x20000030

08004598 <realloc>:
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <realloc+0xc>)
 800459a:	460a      	mov	r2, r1
 800459c:	4601      	mov	r1, r0
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	f000 b802 	b.w	80045a8 <_realloc_r>
 80045a4:	20000084 	.word	0x20000084

080045a8 <_realloc_r>:
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4680      	mov	r8, r0
 80045ae:	4614      	mov	r4, r2
 80045b0:	460e      	mov	r6, r1
 80045b2:	b921      	cbnz	r1, 80045be <_realloc_r+0x16>
 80045b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4611      	mov	r1, r2
 80045ba:	f000 b8f3 	b.w	80047a4 <_malloc_r>
 80045be:	b92a      	cbnz	r2, 80045cc <_realloc_r+0x24>
 80045c0:	f000 f884 	bl	80046cc <_free_r>
 80045c4:	4625      	mov	r5, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	f000 f976 	bl	80048bc <_malloc_usable_size_r>
 80045d0:	4284      	cmp	r4, r0
 80045d2:	4607      	mov	r7, r0
 80045d4:	d802      	bhi.n	80045dc <_realloc_r+0x34>
 80045d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045da:	d812      	bhi.n	8004602 <_realloc_r+0x5a>
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f000 f8e0 	bl	80047a4 <_malloc_r>
 80045e4:	4605      	mov	r5, r0
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ed      	beq.n	80045c6 <_realloc_r+0x1e>
 80045ea:	42bc      	cmp	r4, r7
 80045ec:	4622      	mov	r2, r4
 80045ee:	4631      	mov	r1, r6
 80045f0:	bf28      	it	cs
 80045f2:	463a      	movcs	r2, r7
 80045f4:	f000 f85c 	bl	80046b0 <memcpy>
 80045f8:	4631      	mov	r1, r6
 80045fa:	4640      	mov	r0, r8
 80045fc:	f000 f866 	bl	80046cc <_free_r>
 8004600:	e7e1      	b.n	80045c6 <_realloc_r+0x1e>
 8004602:	4635      	mov	r5, r6
 8004604:	e7df      	b.n	80045c6 <_realloc_r+0x1e>
	...

08004608 <siprintf>:
 8004608:	b40e      	push	{r1, r2, r3}
 800460a:	b500      	push	{lr}
 800460c:	b09c      	sub	sp, #112	; 0x70
 800460e:	ab1d      	add	r3, sp, #116	; 0x74
 8004610:	9002      	str	r0, [sp, #8]
 8004612:	9006      	str	r0, [sp, #24]
 8004614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <siprintf+0x38>)
 800461a:	9107      	str	r1, [sp, #28]
 800461c:	9104      	str	r1, [sp, #16]
 800461e:	4909      	ldr	r1, [pc, #36]	; (8004644 <siprintf+0x3c>)
 8004620:	f853 2b04 	ldr.w	r2, [r3], #4
 8004624:	9105      	str	r1, [sp, #20]
 8004626:	6800      	ldr	r0, [r0, #0]
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	a902      	add	r1, sp, #8
 800462c:	f000 f9a8 	bl	8004980 <_svfiprintf_r>
 8004630:	9b02      	ldr	r3, [sp, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	b01c      	add	sp, #112	; 0x70
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b003      	add	sp, #12
 800463e:	4770      	bx	lr
 8004640:	20000084 	.word	0x20000084
 8004644:	ffff0208 	.word	0xffff0208

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <__errno>:
 8004658:	4b01      	ldr	r3, [pc, #4]	; (8004660 <__errno+0x8>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000084 	.word	0x20000084

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4d0d      	ldr	r5, [pc, #52]	; (800469c <__libc_init_array+0x38>)
 8004668:	4c0d      	ldr	r4, [pc, #52]	; (80046a0 <__libc_init_array+0x3c>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	2600      	movs	r6, #0
 8004670:	42a6      	cmp	r6, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	4d0b      	ldr	r5, [pc, #44]	; (80046a4 <__libc_init_array+0x40>)
 8004676:	4c0c      	ldr	r4, [pc, #48]	; (80046a8 <__libc_init_array+0x44>)
 8004678:	f000 fc3a 	bl	8004ef0 <_init>
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	2600      	movs	r6, #0
 8004682:	42a6      	cmp	r6, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f855 3b04 	ldr.w	r3, [r5], #4
 800468c:	4798      	blx	r3
 800468e:	3601      	adds	r6, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f855 3b04 	ldr.w	r3, [r5], #4
 8004696:	4798      	blx	r3
 8004698:	3601      	adds	r6, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	0800647c 	.word	0x0800647c
 80046a0:	0800647c 	.word	0x0800647c
 80046a4:	0800647c 	.word	0x0800647c
 80046a8:	08006480 	.word	0x08006480

080046ac <__retarget_lock_acquire_recursive>:
 80046ac:	4770      	bx	lr

080046ae <__retarget_lock_release_recursive>:
 80046ae:	4770      	bx	lr

080046b0 <memcpy>:
 80046b0:	440a      	add	r2, r1
 80046b2:	4291      	cmp	r1, r2
 80046b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b8:	d100      	bne.n	80046bc <memcpy+0xc>
 80046ba:	4770      	bx	lr
 80046bc:	b510      	push	{r4, lr}
 80046be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c6:	4291      	cmp	r1, r2
 80046c8:	d1f9      	bne.n	80046be <memcpy+0xe>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <_free_r>:
 80046cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ce:	2900      	cmp	r1, #0
 80046d0:	d044      	beq.n	800475c <_free_r+0x90>
 80046d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d6:	9001      	str	r0, [sp, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f1a1 0404 	sub.w	r4, r1, #4
 80046de:	bfb8      	it	lt
 80046e0:	18e4      	addlt	r4, r4, r3
 80046e2:	f000 f8df 	bl	80048a4 <__malloc_lock>
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <_free_r+0x94>)
 80046e8:	9801      	ldr	r0, [sp, #4]
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	b933      	cbnz	r3, 80046fc <_free_r+0x30>
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	6014      	str	r4, [r2, #0]
 80046f2:	b003      	add	sp, #12
 80046f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f8:	f000 b8da 	b.w	80048b0 <__malloc_unlock>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d908      	bls.n	8004712 <_free_r+0x46>
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	1961      	adds	r1, r4, r5
 8004704:	428b      	cmp	r3, r1
 8004706:	bf01      	itttt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	1949      	addeq	r1, r1, r5
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	e7ed      	b.n	80046ee <_free_r+0x22>
 8004712:	461a      	mov	r2, r3
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b10b      	cbz	r3, 800471c <_free_r+0x50>
 8004718:	42a3      	cmp	r3, r4
 800471a:	d9fa      	bls.n	8004712 <_free_r+0x46>
 800471c:	6811      	ldr	r1, [r2, #0]
 800471e:	1855      	adds	r5, r2, r1
 8004720:	42a5      	cmp	r5, r4
 8004722:	d10b      	bne.n	800473c <_free_r+0x70>
 8004724:	6824      	ldr	r4, [r4, #0]
 8004726:	4421      	add	r1, r4
 8004728:	1854      	adds	r4, r2, r1
 800472a:	42a3      	cmp	r3, r4
 800472c:	6011      	str	r1, [r2, #0]
 800472e:	d1e0      	bne.n	80046f2 <_free_r+0x26>
 8004730:	681c      	ldr	r4, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	6053      	str	r3, [r2, #4]
 8004736:	440c      	add	r4, r1
 8004738:	6014      	str	r4, [r2, #0]
 800473a:	e7da      	b.n	80046f2 <_free_r+0x26>
 800473c:	d902      	bls.n	8004744 <_free_r+0x78>
 800473e:	230c      	movs	r3, #12
 8004740:	6003      	str	r3, [r0, #0]
 8004742:	e7d6      	b.n	80046f2 <_free_r+0x26>
 8004744:	6825      	ldr	r5, [r4, #0]
 8004746:	1961      	adds	r1, r4, r5
 8004748:	428b      	cmp	r3, r1
 800474a:	bf04      	itt	eq
 800474c:	6819      	ldreq	r1, [r3, #0]
 800474e:	685b      	ldreq	r3, [r3, #4]
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	bf04      	itt	eq
 8004754:	1949      	addeq	r1, r1, r5
 8004756:	6021      	streq	r1, [r4, #0]
 8004758:	6054      	str	r4, [r2, #4]
 800475a:	e7ca      	b.n	80046f2 <_free_r+0x26>
 800475c:	b003      	add	sp, #12
 800475e:	bd30      	pop	{r4, r5, pc}
 8004760:	200004b0 	.word	0x200004b0

08004764 <sbrk_aligned>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4e0e      	ldr	r6, [pc, #56]	; (80047a0 <sbrk_aligned+0x3c>)
 8004768:	460c      	mov	r4, r1
 800476a:	6831      	ldr	r1, [r6, #0]
 800476c:	4605      	mov	r5, r0
 800476e:	b911      	cbnz	r1, 8004776 <sbrk_aligned+0x12>
 8004770:	f000 fbae 	bl	8004ed0 <_sbrk_r>
 8004774:	6030      	str	r0, [r6, #0]
 8004776:	4621      	mov	r1, r4
 8004778:	4628      	mov	r0, r5
 800477a:	f000 fba9 	bl	8004ed0 <_sbrk_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d00a      	beq.n	8004798 <sbrk_aligned+0x34>
 8004782:	1cc4      	adds	r4, r0, #3
 8004784:	f024 0403 	bic.w	r4, r4, #3
 8004788:	42a0      	cmp	r0, r4
 800478a:	d007      	beq.n	800479c <sbrk_aligned+0x38>
 800478c:	1a21      	subs	r1, r4, r0
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fb9e 	bl	8004ed0 <_sbrk_r>
 8004794:	3001      	adds	r0, #1
 8004796:	d101      	bne.n	800479c <sbrk_aligned+0x38>
 8004798:	f04f 34ff 	mov.w	r4, #4294967295
 800479c:	4620      	mov	r0, r4
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	200004b4 	.word	0x200004b4

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4607      	mov	r7, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d905      	bls.n	80047cc <_malloc_r+0x28>
 80047c0:	230c      	movs	r3, #12
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	2600      	movs	r6, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048a0 <_malloc_r+0xfc>
 80047d0:	f000 f868 	bl	80048a4 <__malloc_lock>
 80047d4:	f8d8 3000 	ldr.w	r3, [r8]
 80047d8:	461c      	mov	r4, r3
 80047da:	bb5c      	cbnz	r4, 8004834 <_malloc_r+0x90>
 80047dc:	4629      	mov	r1, r5
 80047de:	4638      	mov	r0, r7
 80047e0:	f7ff ffc0 	bl	8004764 <sbrk_aligned>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	4604      	mov	r4, r0
 80047e8:	d155      	bne.n	8004896 <_malloc_r+0xf2>
 80047ea:	f8d8 4000 	ldr.w	r4, [r8]
 80047ee:	4626      	mov	r6, r4
 80047f0:	2e00      	cmp	r6, #0
 80047f2:	d145      	bne.n	8004880 <_malloc_r+0xdc>
 80047f4:	2c00      	cmp	r4, #0
 80047f6:	d048      	beq.n	800488a <_malloc_r+0xe6>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	4631      	mov	r1, r6
 80047fc:	4638      	mov	r0, r7
 80047fe:	eb04 0903 	add.w	r9, r4, r3
 8004802:	f000 fb65 	bl	8004ed0 <_sbrk_r>
 8004806:	4581      	cmp	r9, r0
 8004808:	d13f      	bne.n	800488a <_malloc_r+0xe6>
 800480a:	6821      	ldr	r1, [r4, #0]
 800480c:	1a6d      	subs	r5, r5, r1
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ffa7 	bl	8004764 <sbrk_aligned>
 8004816:	3001      	adds	r0, #1
 8004818:	d037      	beq.n	800488a <_malloc_r+0xe6>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	442b      	add	r3, r5
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	f8d8 3000 	ldr.w	r3, [r8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d038      	beq.n	800489a <_malloc_r+0xf6>
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	42a2      	cmp	r2, r4
 800482c:	d12b      	bne.n	8004886 <_malloc_r+0xe2>
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	e00f      	b.n	8004854 <_malloc_r+0xb0>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	1b52      	subs	r2, r2, r5
 8004838:	d41f      	bmi.n	800487a <_malloc_r+0xd6>
 800483a:	2a0b      	cmp	r2, #11
 800483c:	d917      	bls.n	800486e <_malloc_r+0xca>
 800483e:	1961      	adds	r1, r4, r5
 8004840:	42a3      	cmp	r3, r4
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	6059      	strne	r1, [r3, #4]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	bf08      	it	eq
 800484c:	f8c8 1000 	streq.w	r1, [r8]
 8004850:	5162      	str	r2, [r4, r5]
 8004852:	604b      	str	r3, [r1, #4]
 8004854:	4638      	mov	r0, r7
 8004856:	f104 060b 	add.w	r6, r4, #11
 800485a:	f000 f829 	bl	80048b0 <__malloc_unlock>
 800485e:	f026 0607 	bic.w	r6, r6, #7
 8004862:	1d23      	adds	r3, r4, #4
 8004864:	1af2      	subs	r2, r6, r3
 8004866:	d0ae      	beq.n	80047c6 <_malloc_r+0x22>
 8004868:	1b9b      	subs	r3, r3, r6
 800486a:	50a3      	str	r3, [r4, r2]
 800486c:	e7ab      	b.n	80047c6 <_malloc_r+0x22>
 800486e:	42a3      	cmp	r3, r4
 8004870:	6862      	ldr	r2, [r4, #4]
 8004872:	d1dd      	bne.n	8004830 <_malloc_r+0x8c>
 8004874:	f8c8 2000 	str.w	r2, [r8]
 8004878:	e7ec      	b.n	8004854 <_malloc_r+0xb0>
 800487a:	4623      	mov	r3, r4
 800487c:	6864      	ldr	r4, [r4, #4]
 800487e:	e7ac      	b.n	80047da <_malloc_r+0x36>
 8004880:	4634      	mov	r4, r6
 8004882:	6876      	ldr	r6, [r6, #4]
 8004884:	e7b4      	b.n	80047f0 <_malloc_r+0x4c>
 8004886:	4613      	mov	r3, r2
 8004888:	e7cc      	b.n	8004824 <_malloc_r+0x80>
 800488a:	230c      	movs	r3, #12
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4638      	mov	r0, r7
 8004890:	f000 f80e 	bl	80048b0 <__malloc_unlock>
 8004894:	e797      	b.n	80047c6 <_malloc_r+0x22>
 8004896:	6025      	str	r5, [r4, #0]
 8004898:	e7dc      	b.n	8004854 <_malloc_r+0xb0>
 800489a:	605b      	str	r3, [r3, #4]
 800489c:	deff      	udf	#255	; 0xff
 800489e:	bf00      	nop
 80048a0:	200004b0 	.word	0x200004b0

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <__malloc_lock+0x8>)
 80048a6:	f7ff bf01 	b.w	80046ac <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	200004ac 	.word	0x200004ac

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	; (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f7ff befc 	b.w	80046ae <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	200004ac 	.word	0x200004ac

080048bc <_malloc_usable_size_r>:
 80048bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c0:	1f18      	subs	r0, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfbc      	itt	lt
 80048c6:	580b      	ldrlt	r3, [r1, r0]
 80048c8:	18c0      	addlt	r0, r0, r3
 80048ca:	4770      	bx	lr

080048cc <__ssputs_r>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	688e      	ldr	r6, [r1, #8]
 80048d2:	461f      	mov	r7, r3
 80048d4:	42be      	cmp	r6, r7
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	4682      	mov	sl, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	4690      	mov	r8, r2
 80048de:	d82c      	bhi.n	800493a <__ssputs_r+0x6e>
 80048e0:	898a      	ldrh	r2, [r1, #12]
 80048e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048e6:	d026      	beq.n	8004936 <__ssputs_r+0x6a>
 80048e8:	6965      	ldr	r5, [r4, #20]
 80048ea:	6909      	ldr	r1, [r1, #16]
 80048ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048f0:	eba3 0901 	sub.w	r9, r3, r1
 80048f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048f8:	1c7b      	adds	r3, r7, #1
 80048fa:	444b      	add	r3, r9
 80048fc:	106d      	asrs	r5, r5, #1
 80048fe:	429d      	cmp	r5, r3
 8004900:	bf38      	it	cc
 8004902:	461d      	movcc	r5, r3
 8004904:	0553      	lsls	r3, r2, #21
 8004906:	d527      	bpl.n	8004958 <__ssputs_r+0x8c>
 8004908:	4629      	mov	r1, r5
 800490a:	f7ff ff4b 	bl	80047a4 <_malloc_r>
 800490e:	4606      	mov	r6, r0
 8004910:	b360      	cbz	r0, 800496c <__ssputs_r+0xa0>
 8004912:	6921      	ldr	r1, [r4, #16]
 8004914:	464a      	mov	r2, r9
 8004916:	f7ff fecb 	bl	80046b0 <memcpy>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	6126      	str	r6, [r4, #16]
 8004928:	6165      	str	r5, [r4, #20]
 800492a:	444e      	add	r6, r9
 800492c:	eba5 0509 	sub.w	r5, r5, r9
 8004930:	6026      	str	r6, [r4, #0]
 8004932:	60a5      	str	r5, [r4, #8]
 8004934:	463e      	mov	r6, r7
 8004936:	42be      	cmp	r6, r7
 8004938:	d900      	bls.n	800493c <__ssputs_r+0x70>
 800493a:	463e      	mov	r6, r7
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	4632      	mov	r2, r6
 8004940:	4641      	mov	r1, r8
 8004942:	f000 faab 	bl	8004e9c <memmove>
 8004946:	68a3      	ldr	r3, [r4, #8]
 8004948:	1b9b      	subs	r3, r3, r6
 800494a:	60a3      	str	r3, [r4, #8]
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	4433      	add	r3, r6
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	2000      	movs	r0, #0
 8004954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004958:	462a      	mov	r2, r5
 800495a:	f7ff fe25 	bl	80045a8 <_realloc_r>
 800495e:	4606      	mov	r6, r0
 8004960:	2800      	cmp	r0, #0
 8004962:	d1e0      	bne.n	8004926 <__ssputs_r+0x5a>
 8004964:	6921      	ldr	r1, [r4, #16]
 8004966:	4650      	mov	r0, sl
 8004968:	f7ff feb0 	bl	80046cc <_free_r>
 800496c:	230c      	movs	r3, #12
 800496e:	f8ca 3000 	str.w	r3, [sl]
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	e7e9      	b.n	8004954 <__ssputs_r+0x88>

08004980 <_svfiprintf_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	4698      	mov	r8, r3
 8004986:	898b      	ldrh	r3, [r1, #12]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	b09d      	sub	sp, #116	; 0x74
 800498c:	4607      	mov	r7, r0
 800498e:	460d      	mov	r5, r1
 8004990:	4614      	mov	r4, r2
 8004992:	d50e      	bpl.n	80049b2 <_svfiprintf_r+0x32>
 8004994:	690b      	ldr	r3, [r1, #16]
 8004996:	b963      	cbnz	r3, 80049b2 <_svfiprintf_r+0x32>
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	f7ff ff03 	bl	80047a4 <_malloc_r>
 800499e:	6028      	str	r0, [r5, #0]
 80049a0:	6128      	str	r0, [r5, #16]
 80049a2:	b920      	cbnz	r0, 80049ae <_svfiprintf_r+0x2e>
 80049a4:	230c      	movs	r3, #12
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e0d0      	b.n	8004b50 <_svfiprintf_r+0x1d0>
 80049ae:	2340      	movs	r3, #64	; 0x40
 80049b0:	616b      	str	r3, [r5, #20]
 80049b2:	2300      	movs	r3, #0
 80049b4:	9309      	str	r3, [sp, #36]	; 0x24
 80049b6:	2320      	movs	r3, #32
 80049b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c0:	2330      	movs	r3, #48	; 0x30
 80049c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b68 <_svfiprintf_r+0x1e8>
 80049c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049ca:	f04f 0901 	mov.w	r9, #1
 80049ce:	4623      	mov	r3, r4
 80049d0:	469a      	mov	sl, r3
 80049d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d6:	b10a      	cbz	r2, 80049dc <_svfiprintf_r+0x5c>
 80049d8:	2a25      	cmp	r2, #37	; 0x25
 80049da:	d1f9      	bne.n	80049d0 <_svfiprintf_r+0x50>
 80049dc:	ebba 0b04 	subs.w	fp, sl, r4
 80049e0:	d00b      	beq.n	80049fa <_svfiprintf_r+0x7a>
 80049e2:	465b      	mov	r3, fp
 80049e4:	4622      	mov	r2, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff ff6f 	bl	80048cc <__ssputs_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	f000 80a9 	beq.w	8004b46 <_svfiprintf_r+0x1c6>
 80049f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f6:	445a      	add	r2, fp
 80049f8:	9209      	str	r2, [sp, #36]	; 0x24
 80049fa:	f89a 3000 	ldrb.w	r3, [sl]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80a1 	beq.w	8004b46 <_svfiprintf_r+0x1c6>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0e:	f10a 0a01 	add.w	sl, sl, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a1c:	4654      	mov	r4, sl
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	4850      	ldr	r0, [pc, #320]	; (8004b68 <_svfiprintf_r+0x1e8>)
 8004a26:	f7fb fbdb 	bl	80001e0 <memchr>
 8004a2a:	9a04      	ldr	r2, [sp, #16]
 8004a2c:	b9d8      	cbnz	r0, 8004a66 <_svfiprintf_r+0xe6>
 8004a2e:	06d0      	lsls	r0, r2, #27
 8004a30:	bf44      	itt	mi
 8004a32:	2320      	movmi	r3, #32
 8004a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a38:	0711      	lsls	r1, r2, #28
 8004a3a:	bf44      	itt	mi
 8004a3c:	232b      	movmi	r3, #43	; 0x2b
 8004a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b2a      	cmp	r3, #42	; 0x2a
 8004a48:	d015      	beq.n	8004a76 <_svfiprintf_r+0xf6>
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	4654      	mov	r4, sl
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4621      	mov	r1, r4
 8004a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5a:	3b30      	subs	r3, #48	; 0x30
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d94d      	bls.n	8004afc <_svfiprintf_r+0x17c>
 8004a60:	b1b0      	cbz	r0, 8004a90 <_svfiprintf_r+0x110>
 8004a62:	9207      	str	r2, [sp, #28]
 8004a64:	e014      	b.n	8004a90 <_svfiprintf_r+0x110>
 8004a66:	eba0 0308 	sub.w	r3, r0, r8
 8004a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	46a2      	mov	sl, r4
 8004a74:	e7d2      	b.n	8004a1c <_svfiprintf_r+0x9c>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	9103      	str	r1, [sp, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfbb      	ittet	lt
 8004a82:	425b      	neglt	r3, r3
 8004a84:	f042 0202 	orrlt.w	r2, r2, #2
 8004a88:	9307      	strge	r3, [sp, #28]
 8004a8a:	9307      	strlt	r3, [sp, #28]
 8004a8c:	bfb8      	it	lt
 8004a8e:	9204      	strlt	r2, [sp, #16]
 8004a90:	7823      	ldrb	r3, [r4, #0]
 8004a92:	2b2e      	cmp	r3, #46	; 0x2e
 8004a94:	d10c      	bne.n	8004ab0 <_svfiprintf_r+0x130>
 8004a96:	7863      	ldrb	r3, [r4, #1]
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d134      	bne.n	8004b06 <_svfiprintf_r+0x186>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9203      	str	r2, [sp, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bfb8      	it	lt
 8004aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aac:	3402      	adds	r4, #2
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004b78 <_svfiprintf_r+0x1f8>
 8004ab4:	7821      	ldrb	r1, [r4, #0]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	4650      	mov	r0, sl
 8004aba:	f7fb fb91 	bl	80001e0 <memchr>
 8004abe:	b138      	cbz	r0, 8004ad0 <_svfiprintf_r+0x150>
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	eba0 000a 	sub.w	r0, r0, sl
 8004ac6:	2240      	movs	r2, #64	; 0x40
 8004ac8:	4082      	lsls	r2, r0
 8004aca:	4313      	orrs	r3, r2
 8004acc:	3401      	adds	r4, #1
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	4825      	ldr	r0, [pc, #148]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ada:	2206      	movs	r2, #6
 8004adc:	f7fb fb80 	bl	80001e0 <memchr>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d038      	beq.n	8004b56 <_svfiprintf_r+0x1d6>
 8004ae4:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <_svfiprintf_r+0x1f0>)
 8004ae6:	bb1b      	cbnz	r3, 8004b30 <_svfiprintf_r+0x1b0>
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	3307      	adds	r3, #7
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	3308      	adds	r3, #8
 8004af2:	9303      	str	r3, [sp, #12]
 8004af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af6:	4433      	add	r3, r6
 8004af8:	9309      	str	r3, [sp, #36]	; 0x24
 8004afa:	e768      	b.n	80049ce <_svfiprintf_r+0x4e>
 8004afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b00:	460c      	mov	r4, r1
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7a6      	b.n	8004a54 <_svfiprintf_r+0xd4>
 8004b06:	2300      	movs	r3, #0
 8004b08:	3401      	adds	r4, #1
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0c0a 	mov.w	ip, #10
 8004b12:	4620      	mov	r0, r4
 8004b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b18:	3a30      	subs	r2, #48	; 0x30
 8004b1a:	2a09      	cmp	r2, #9
 8004b1c:	d903      	bls.n	8004b26 <_svfiprintf_r+0x1a6>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0c6      	beq.n	8004ab0 <_svfiprintf_r+0x130>
 8004b22:	9105      	str	r1, [sp, #20]
 8004b24:	e7c4      	b.n	8004ab0 <_svfiprintf_r+0x130>
 8004b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e7f0      	b.n	8004b12 <_svfiprintf_r+0x192>
 8004b30:	ab03      	add	r3, sp, #12
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	462a      	mov	r2, r5
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <_svfiprintf_r+0x1f4>)
 8004b38:	a904      	add	r1, sp, #16
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f3af 8000 	nop.w
 8004b40:	1c42      	adds	r2, r0, #1
 8004b42:	4606      	mov	r6, r0
 8004b44:	d1d6      	bne.n	8004af4 <_svfiprintf_r+0x174>
 8004b46:	89ab      	ldrh	r3, [r5, #12]
 8004b48:	065b      	lsls	r3, r3, #25
 8004b4a:	f53f af2d 	bmi.w	80049a8 <_svfiprintf_r+0x28>
 8004b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b50:	b01d      	add	sp, #116	; 0x74
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	ab03      	add	r3, sp, #12
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <_svfiprintf_r+0x1f4>)
 8004b5e:	a904      	add	r1, sp, #16
 8004b60:	4638      	mov	r0, r7
 8004b62:	f000 f879 	bl	8004c58 <_printf_i>
 8004b66:	e7eb      	b.n	8004b40 <_svfiprintf_r+0x1c0>
 8004b68:	08006440 	.word	0x08006440
 8004b6c:	0800644a 	.word	0x0800644a
 8004b70:	00000000 	.word	0x00000000
 8004b74:	080048cd 	.word	0x080048cd
 8004b78:	08006446 	.word	0x08006446

08004b7c <_printf_common>:
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	4616      	mov	r6, r2
 8004b82:	4699      	mov	r9, r3
 8004b84:	688a      	ldr	r2, [r1, #8]
 8004b86:	690b      	ldr	r3, [r1, #16]
 8004b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	bfb8      	it	lt
 8004b90:	4613      	movlt	r3, r2
 8004b92:	6033      	str	r3, [r6, #0]
 8004b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b98:	4607      	mov	r7, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	b10a      	cbz	r2, 8004ba2 <_printf_common+0x26>
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	0699      	lsls	r1, r3, #26
 8004ba6:	bf42      	ittt	mi
 8004ba8:	6833      	ldrmi	r3, [r6, #0]
 8004baa:	3302      	addmi	r3, #2
 8004bac:	6033      	strmi	r3, [r6, #0]
 8004bae:	6825      	ldr	r5, [r4, #0]
 8004bb0:	f015 0506 	ands.w	r5, r5, #6
 8004bb4:	d106      	bne.n	8004bc4 <_printf_common+0x48>
 8004bb6:	f104 0a19 	add.w	sl, r4, #25
 8004bba:	68e3      	ldr	r3, [r4, #12]
 8004bbc:	6832      	ldr	r2, [r6, #0]
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	42ab      	cmp	r3, r5
 8004bc2:	dc26      	bgt.n	8004c12 <_printf_common+0x96>
 8004bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc8:	1e13      	subs	r3, r2, #0
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	bf18      	it	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	0692      	lsls	r2, r2, #26
 8004bd2:	d42b      	bmi.n	8004c2c <_printf_common+0xb0>
 8004bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c0      	blx	r8
 8004bde:	3001      	adds	r0, #1
 8004be0:	d01e      	beq.n	8004c20 <_printf_common+0xa4>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	6922      	ldr	r2, [r4, #16]
 8004be6:	f003 0306 	and.w	r3, r3, #6
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	bf02      	ittt	eq
 8004bee:	68e5      	ldreq	r5, [r4, #12]
 8004bf0:	6833      	ldreq	r3, [r6, #0]
 8004bf2:	1aed      	subeq	r5, r5, r3
 8004bf4:	68a3      	ldr	r3, [r4, #8]
 8004bf6:	bf0c      	ite	eq
 8004bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bfc:	2500      	movne	r5, #0
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	bfc4      	itt	gt
 8004c02:	1a9b      	subgt	r3, r3, r2
 8004c04:	18ed      	addgt	r5, r5, r3
 8004c06:	2600      	movs	r6, #0
 8004c08:	341a      	adds	r4, #26
 8004c0a:	42b5      	cmp	r5, r6
 8004c0c:	d11a      	bne.n	8004c44 <_printf_common+0xc8>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e008      	b.n	8004c24 <_printf_common+0xa8>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4652      	mov	r2, sl
 8004c16:	4649      	mov	r1, r9
 8004c18:	4638      	mov	r0, r7
 8004c1a:	47c0      	blx	r8
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d103      	bne.n	8004c28 <_printf_common+0xac>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c28:	3501      	adds	r5, #1
 8004c2a:	e7c6      	b.n	8004bba <_printf_common+0x3e>
 8004c2c:	18e1      	adds	r1, r4, r3
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	2030      	movs	r0, #48	; 0x30
 8004c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c36:	4422      	add	r2, r4
 8004c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c40:	3302      	adds	r3, #2
 8004c42:	e7c7      	b.n	8004bd4 <_printf_common+0x58>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4622      	mov	r2, r4
 8004c48:	4649      	mov	r1, r9
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	47c0      	blx	r8
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d0e6      	beq.n	8004c20 <_printf_common+0xa4>
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7d9      	b.n	8004c0a <_printf_common+0x8e>
	...

08004c58 <_printf_i>:
 8004c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	7e0f      	ldrb	r7, [r1, #24]
 8004c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c60:	2f78      	cmp	r7, #120	; 0x78
 8004c62:	4691      	mov	r9, r2
 8004c64:	4680      	mov	r8, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	469a      	mov	sl, r3
 8004c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c6e:	d807      	bhi.n	8004c80 <_printf_i+0x28>
 8004c70:	2f62      	cmp	r7, #98	; 0x62
 8004c72:	d80a      	bhi.n	8004c8a <_printf_i+0x32>
 8004c74:	2f00      	cmp	r7, #0
 8004c76:	f000 80d4 	beq.w	8004e22 <_printf_i+0x1ca>
 8004c7a:	2f58      	cmp	r7, #88	; 0x58
 8004c7c:	f000 80c0 	beq.w	8004e00 <_printf_i+0x1a8>
 8004c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c88:	e03a      	b.n	8004d00 <_printf_i+0xa8>
 8004c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8e:	2b15      	cmp	r3, #21
 8004c90:	d8f6      	bhi.n	8004c80 <_printf_i+0x28>
 8004c92:	a101      	add	r1, pc, #4	; (adr r1, 8004c98 <_printf_i+0x40>)
 8004c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c98:	08004cf1 	.word	0x08004cf1
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004c81 	.word	0x08004c81
 8004ca4:	08004c81 	.word	0x08004c81
 8004ca8:	08004c81 	.word	0x08004c81
 8004cac:	08004c81 	.word	0x08004c81
 8004cb0:	08004d05 	.word	0x08004d05
 8004cb4:	08004c81 	.word	0x08004c81
 8004cb8:	08004c81 	.word	0x08004c81
 8004cbc:	08004c81 	.word	0x08004c81
 8004cc0:	08004c81 	.word	0x08004c81
 8004cc4:	08004e09 	.word	0x08004e09
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004dc3 	.word	0x08004dc3
 8004cd0:	08004c81 	.word	0x08004c81
 8004cd4:	08004c81 	.word	0x08004c81
 8004cd8:	08004e2b 	.word	0x08004e2b
 8004cdc:	08004c81 	.word	0x08004c81
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004c81 	.word	0x08004c81
 8004ce8:	08004c81 	.word	0x08004c81
 8004cec:	08004dcb 	.word	0x08004dcb
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	1d1a      	adds	r2, r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	602a      	str	r2, [r5, #0]
 8004cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d00:	2301      	movs	r3, #1
 8004d02:	e09f      	b.n	8004e44 <_printf_i+0x1ec>
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	0607      	lsls	r7, r0, #24
 8004d0a:	f103 0104 	add.w	r1, r3, #4
 8004d0e:	6029      	str	r1, [r5, #0]
 8004d10:	d501      	bpl.n	8004d16 <_printf_i+0xbe>
 8004d12:	681e      	ldr	r6, [r3, #0]
 8004d14:	e003      	b.n	8004d1e <_printf_i+0xc6>
 8004d16:	0646      	lsls	r6, r0, #25
 8004d18:	d5fb      	bpl.n	8004d12 <_printf_i+0xba>
 8004d1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	da03      	bge.n	8004d2a <_printf_i+0xd2>
 8004d22:	232d      	movs	r3, #45	; 0x2d
 8004d24:	4276      	negs	r6, r6
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2a:	485a      	ldr	r0, [pc, #360]	; (8004e94 <_printf_i+0x23c>)
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	e012      	b.n	8004d56 <_printf_i+0xfe>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	0605      	lsls	r5, r0, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xe8>
 8004d3c:	681e      	ldr	r6, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xee>
 8004d40:	0641      	lsls	r1, r0, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe4>
 8004d44:	881e      	ldrh	r6, [r3, #0]
 8004d46:	4853      	ldr	r0, [pc, #332]	; (8004e94 <_printf_i+0x23c>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6865      	ldr	r5, [r4, #4]
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90e      	cbnz	r6, 8004d6c <_printf_i+0x114>
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	d04b      	beq.n	8004e04 <_printf_i+0x1ac>
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d72:	fb03 6711 	mls	r7, r3, r1, r6
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460e      	mov	r6, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x116>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x148>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07de      	lsls	r6, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x148>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee4 	bl	8004b7c <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14a      	bne.n	8004e4e <_printf_i+0x1f6>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f043 0320 	orr.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	4833      	ldr	r0, [pc, #204]	; (8004e98 <_printf_i+0x240>)
 8004dcc:	2778      	movs	r7, #120	; 0x78
 8004dce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	061f      	lsls	r7, r3, #24
 8004dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ddc:	d402      	bmi.n	8004de4 <_printf_i+0x18c>
 8004dde:	065f      	lsls	r7, r3, #25
 8004de0:	bf48      	it	mi
 8004de2:	b2b6      	uxthmi	r6, r6
 8004de4:	07df      	lsls	r7, r3, #31
 8004de6:	bf48      	it	mi
 8004de8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dec:	6029      	str	r1, [r5, #0]
 8004dee:	bf48      	it	mi
 8004df0:	6023      	strmi	r3, [r4, #0]
 8004df2:	b91e      	cbnz	r6, 8004dfc <_printf_i+0x1a4>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	f023 0320 	bic.w	r3, r3, #32
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	e7a7      	b.n	8004d50 <_printf_i+0xf8>
 8004e00:	4824      	ldr	r0, [pc, #144]	; (8004e94 <_printf_i+0x23c>)
 8004e02:	e7e4      	b.n	8004dce <_printf_i+0x176>
 8004e04:	4615      	mov	r5, r2
 8004e06:	e7bd      	b.n	8004d84 <_printf_i+0x12c>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	6826      	ldr	r6, [r4, #0]
 8004e0c:	6961      	ldr	r1, [r4, #20]
 8004e0e:	1d18      	adds	r0, r3, #4
 8004e10:	6028      	str	r0, [r5, #0]
 8004e12:	0635      	lsls	r5, r6, #24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0x1c4>
 8004e18:	6019      	str	r1, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0x1ca>
 8004e1c:	0670      	lsls	r0, r6, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0x1c0>
 8004e20:	8019      	strh	r1, [r3, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	4615      	mov	r5, r2
 8004e28:	e7bc      	b.n	8004da4 <_printf_i+0x14c>
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	602a      	str	r2, [r5, #0]
 8004e30:	681d      	ldr	r5, [r3, #0]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7fb f9d2 	bl	80001e0 <memchr>
 8004e3c:	b108      	cbz	r0, 8004e42 <_printf_i+0x1ea>
 8004e3e:	1b40      	subs	r0, r0, r5
 8004e40:	6060      	str	r0, [r4, #4]
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	2300      	movs	r3, #0
 8004e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4c:	e7aa      	b.n	8004da4 <_printf_i+0x14c>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0ad      	beq.n	8004db8 <_printf_i+0x160>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	079b      	lsls	r3, r3, #30
 8004e60:	d413      	bmi.n	8004e8a <_printf_i+0x232>
 8004e62:	68e0      	ldr	r0, [r4, #12]
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	4298      	cmp	r0, r3
 8004e68:	bfb8      	it	lt
 8004e6a:	4618      	movlt	r0, r3
 8004e6c:	e7a6      	b.n	8004dbc <_printf_i+0x164>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4632      	mov	r2, r6
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d09d      	beq.n	8004db8 <_printf_i+0x160>
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	9903      	ldr	r1, [sp, #12]
 8004e82:	1a5b      	subs	r3, r3, r1
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dcf2      	bgt.n	8004e6e <_printf_i+0x216>
 8004e88:	e7eb      	b.n	8004e62 <_printf_i+0x20a>
 8004e8a:	2500      	movs	r5, #0
 8004e8c:	f104 0619 	add.w	r6, r4, #25
 8004e90:	e7f5      	b.n	8004e7e <_printf_i+0x226>
 8004e92:	bf00      	nop
 8004e94:	08006451 	.word	0x08006451
 8004e98:	08006462 	.word	0x08006462

08004e9c <memmove>:
 8004e9c:	4288      	cmp	r0, r1
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	eb01 0402 	add.w	r4, r1, r2
 8004ea4:	d902      	bls.n	8004eac <memmove+0x10>
 8004ea6:	4284      	cmp	r4, r0
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	d807      	bhi.n	8004ebc <memmove+0x20>
 8004eac:	1e43      	subs	r3, r0, #1
 8004eae:	42a1      	cmp	r1, r4
 8004eb0:	d008      	beq.n	8004ec4 <memmove+0x28>
 8004eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eba:	e7f8      	b.n	8004eae <memmove+0x12>
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d100      	bne.n	8004ec6 <memmove+0x2a>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ece:	e7f7      	b.n	8004ec0 <memmove+0x24>

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	; (8004eec <_sbrk_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fd f832 	bl	8001f44 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200004a8 	.word	0x200004a8

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
