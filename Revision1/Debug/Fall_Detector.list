
Fall_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ec  080061ec  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061f4  080061f4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080061fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000088  08006284  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08006284  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a65c  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001caf  00000000  00000000  0002a757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f6  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164ea  00000000  00000000  0002d66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d081  00000000  00000000  00043b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c22  00000000  00000000  00050bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003240  00000000  00000000  000d87fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dba3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c8c 	.word	0x08004c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004c8c 	.word	0x08004c8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	d901      	bls.n	8000ebe <writeRegister+0x1a>
		address = 63;
 8000eba:	233f      	movs	r3, #63	; 0x3f
 8000ebc:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <writeRegister+0x58>)
 8000ece:	f001 fad1 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000ed2:	1df9      	adds	r1, r7, #7
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <writeRegister+0x5c>)
 8000eda:	f002 fc0e 	bl	80036fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000ede:	1db9      	adds	r1, r7, #6
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <writeRegister+0x5c>)
 8000ee6:	f002 fc08 	bl	80036fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <writeRegister+0x58>)
 8000ef0:	f001 fac0 	bl	8002474 <HAL_GPIO_WritePin>
	

}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020400 	.word	0x40020400
 8000f00:	20000104 	.word	0x20000104

08000f04 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b3f      	cmp	r3, #63	; 0x3f
 8000f18:	d901      	bls.n	8000f1e <readRegister+0x1a>
		address = 63;
 8000f1a:	233f      	movs	r3, #63	; 0x3f
 8000f1c:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d905      	bls.n	8000f30 <readRegister+0x2c>
		address |= 0x40;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e004      	b.n	8000f3a <readRegister+0x36>
		else	
		address &= ~(0x40);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <readRegister+0x78>)
 8000f4a:	f001 fa93 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	230a      	movs	r3, #10
 8000f52:	2201      	movs	r2, #1
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <readRegister+0x7c>)
 8000f56:	f002 fbd0 	bl	80036fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	230a      	movs	r3, #10
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <readRegister+0x7c>)
 8000f64:	f002 fd05 	bl	8003972 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <readRegister+0x78>)
 8000f6e:	f001 fa81 	bl	8002474 <HAL_GPIO_WritePin>
	
	
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	20000104 	.word	0x20000104

08000f84 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	4619      	mov	r1, r3
 8000f94:	202c      	movs	r0, #44	; 0x2c
 8000f96:	f7ff ff85 	bl	8000ea4 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d11a      	bne.n	8000fd8 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d807      	bhi.n	8000fc2 <adxlBW+0x3e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d903      	bls.n	8000fc2 <adxlBW+0x3e>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3307      	adds	r3, #7
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e004      	b.n	8000fcc <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	78da      	ldrb	r2, [r3, #3]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4413      	add	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	202c      	movs	r0, #44	; 0x2c
 8000fd2:	f7ff ff67 	bl	8000ea4 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 8000fd6:	e015      	b.n	8001004 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d807      	bhi.n	8000ff0 <adxlBW+0x6c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d903      	bls.n	8000ff0 <adxlBW+0x6c>
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3306      	adds	r3, #6
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e004      	b.n	8000ffa <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78da      	ldrb	r2, [r3, #3]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	202c      	movs	r0, #44	; 0x2c
 8001000:	f7ff ff50 	bl	8000ea4 <writeRegister>
		}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4619      	mov	r1, r3
 800101c:	2031      	movs	r0, #49	; 0x31
 800101e:	f7ff ff41 	bl	8000ea4 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	b25a      	sxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	799b      	ldrb	r3, [r3, #6]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b25a      	sxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	795b      	ldrb	r3, [r3, #5]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b25b      	sxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791a      	ldrb	r2, [r3, #4]
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4413      	add	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2031      	movs	r0, #49	; 0x31
 8001060:	f7ff ff20 	bl	8000ea4 <writeRegister>
			}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	484d      	ldr	r0, [pc, #308]	; (80011b0 <ADXL_Init+0x144>)
 800107a:	f001 f9fb 	bl	8002474 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800107e:	2005      	movs	r0, #5
 8001080:	f000 ff6a 	bl	8001f58 <HAL_Delay>
	uint8_t testval = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff37 	bl	8000f04 <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2be5      	cmp	r3, #229	; 0xe5
 800109a:	d001      	beq.n	80010a0 <ADXL_Init+0x34>
 800109c:	2301      	movs	r3, #1
 800109e:	e082      	b.n	80011a6 <ADXL_Init+0x13a>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff6f 	bl	8000f84 <adxlBW>
	adxlFormat(adxl);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb0 	bl	800100c <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d13f      	bne.n	8001134 <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d846      	bhi.n	800114a <ADXL_Init+0xde>
 80010bc:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <ADXL_Init+0x58>)
 80010be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c2:	bf00      	nop
 80010c4:	080010d5 	.word	0x080010d5
 80010c8:	080010ed 	.word	0x080010ed
 80010cc:	08001105 	.word	0x08001105
 80010d0:	0800111d 	.word	0x0800111d
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <ADXL_Init+0x148>)
 80010d6:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <ADXL_Init+0x14c>)
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <ADXL_Init+0x148>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <ADXL_Init+0x150>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <ADXL_Init+0x150>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a36      	ldr	r2, [pc, #216]	; (80011c0 <ADXL_Init+0x154>)
 80010e8:	6013      	str	r3, [r2, #0]
								break;
 80010ea:	e02e      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <ADXL_Init+0x148>)
 80010ee:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <ADXL_Init+0x158>)
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <ADXL_Init+0x148>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <ADXL_Init+0x150>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <ADXL_Init+0x150>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <ADXL_Init+0x154>)
 8001100:	6013      	str	r3, [r2, #0]
								break;
 8001102:	e022      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <ADXL_Init+0x148>)
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <ADXL_Init+0x15c>)
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <ADXL_Init+0x148>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <ADXL_Init+0x150>)
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <ADXL_Init+0x150>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <ADXL_Init+0x154>)
 8001118:	6013      	str	r3, [r2, #0]
								break;
 800111a:	e016      	b.n	800114a <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <ADXL_Init+0x148>)
 800111e:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <ADXL_Init+0x160>)
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <ADXL_Init+0x148>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <ADXL_Init+0x150>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <ADXL_Init+0x150>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <ADXL_Init+0x154>)
 8001130:	6013      	str	r3, [r2, #0]
								break;
 8001132:	e00a      	b.n	800114a <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <ADXL_Init+0x148>)
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <ADXL_Init+0x14c>)
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <ADXL_Init+0x148>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <ADXL_Init+0x150>)
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <ADXL_Init+0x150>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <ADXL_Init+0x154>)
 8001148:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800114a:	f107 030e 	add.w	r3, r7, #14
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	202d      	movs	r0, #45	; 0x2d
 8001154:	f7ff fed6 	bl	8000f04 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	79db      	ldrb	r3, [r3, #7]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <ADXL_Init+0x100>
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73bb      	strb	r3, [r7, #14]
 800116a:	e004      	b.n	8001176 <ADXL_Init+0x10a>
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	f023 0310 	bic.w	r3, r3, #16
 8001172:	b2db      	uxtb	r3, r3
 8001174:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <ADXL_Init+0x11e>
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	b2db      	uxtb	r3, r3
 8001186:	73bb      	strb	r3, [r7, #14]
 8001188:	e004      	b.n	8001194 <ADXL_Init+0x128>
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f023 0320 	bic.w	r3, r3, #32
 8001190:	b2db      	uxtb	r3, r3
 8001192:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg|0b1000);
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	202d      	movs	r0, #45	; 0x2d
 80011a0:	f7ff fe80 	bl	8000ea4 <writeRegister>
			
	return ADXL_OK;
 80011a4:	2300      	movs	r3, #0
	
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	3b808081 	.word	0x3b808081
 80011bc:	200000a8 	.word	0x200000a8
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	3c010204 	.word	0x3c010204
 80011c8:	3c820821 	.word	0x3c820821
 80011cc:	3d042108 	.word	0x3d042108

080011d0 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <ADXL_getAccel+0x110>)
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e6:	6018      	str	r0, [r3, #0]
 80011e8:	3304      	adds	r3, #4
 80011ea:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2206      	movs	r2, #6
 80011f2:	4619      	mov	r1, r3
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f7ff fe85 	bl	8000f04 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d125      	bne.n	800124c <ADXL_getAccel+0x7c>
		{
		int16_t * acc = Data;	
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29a      	uxth	r2, r3
 800120c:	7a3b      	ldrb	r3, [r7, #8]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21a      	sxth	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	b29b      	uxth	r3, r3
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b29a      	uxth	r2, r3
 8001222:	7abb      	ldrb	r3, [r7, #10]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b29a      	uxth	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3302      	adds	r3, #2
 800122e:	b212      	sxth	r2, r2
 8001230:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b29a      	uxth	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3304      	adds	r3, #4
 8001246:	b212      	sxth	r2, r2
 8001248:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 800124a:	e045      	b.n	80012d8 <ADXL_getAccel+0x108>
	else if (outputType == OUTPUT_FLOAT)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d142      	bne.n	80012d8 <ADXL_getAccel+0x108>
						float * fdata = Data;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8001256:	7a7b      	ldrb	r3, [r7, #9]
 8001258:	b29b      	uxth	r3, r3
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b29a      	uxth	r2, r3
 800125e:	7a3b      	ldrb	r3, [r7, #8]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	b21b      	sxth	r3, r3
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <ADXL_getAccel+0x114>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b29b      	uxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b29a      	uxth	r2, r3
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	b21b      	sxth	r3, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <ADXL_getAccel+0x118>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3304      	adds	r3, #4
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <ADXL_getAccel+0x11c>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3308      	adds	r3, #8
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	edc3 7a00 	vstr	s15, [r3]
	}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08004ca4 	.word	0x08004ca4
 80012e4:	200000a4 	.word	0x200000a4
 80012e8:	200000a8 	.word	0x200000a8
 80012ec:	200000ac 	.word	0x200000ac

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b092      	sub	sp, #72	; 0x48
 80012f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fdbd 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f917 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 f9e3 	bl	80016c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001302:	f000 f97d 	bl	8001600 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001306:	f000 f9a9 	bl	800165c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADXL_Init(&InitInf);
 800130a:	487f      	ldr	r0, [pc, #508]	; (8001508 <main+0x218>)
 800130c:	f7ff feae 	bl	800106c <ADXL_Init>
  ssd1306_Init();
 8001310:	f000 fa5a 	bl	80017c8 <ssd1306_Init>
  ssd1306_Fill(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f000 fac1 	bl	800189c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800131a:	f000 fae3 	bl	80018e4 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5,5);
 800131e:	2105      	movs	r1, #5
 8001320:	2005      	movs	r0, #5
 8001322:	f000 fc09 	bl	8001b38 <ssd1306_SetCursor>
  ssd1306_WriteString("Testing",Font_11x18,0x01);
 8001326:	4a79      	ldr	r2, [pc, #484]	; (800150c <main+0x21c>)
 8001328:	2301      	movs	r3, #1
 800132a:	ca06      	ldmia	r2, {r1, r2}
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <main+0x220>)
 800132e:	f000 fbdd 	bl	8001aec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001332:	f000 fad7 	bl	80018e4 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char oledOut[50];
  while (1)
  {
	int16_t data[3] = {0,0,0};
 8001336:	2300      	movs	r3, #0
 8001338:	803b      	strh	r3, [r7, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	2300      	movs	r3, #0
 8001340:	80bb      	strh	r3, [r7, #4]
	ADXL_getAccel(data,OUTPUT_SIGNED);
 8001342:	463b      	mov	r3, r7
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff42 	bl	80011d0 <ADXL_getAccel>
	//sprintf(oledOut, "%d,%d,%d", data[0]/255,data[1]/255,data[2]/255);

	ssd1306_Fill(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 faa5 	bl	800189c <ssd1306_Fill>
	ssd1306_SetCursor(5,5);
 8001352:	2105      	movs	r1, #5
 8001354:	2005      	movs	r0, #5
 8001356:	f000 fbef 	bl	8001b38 <ssd1306_SetCursor>
	sprintf(oledOut, "X:%d.%dY:%d.%d", data[0]*100/255/100,abs(data[0]*100/255%100),data[1]*100/255/100,abs(data[1]*100/255%100));
 800135a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <main+0x224>)
 8001360:	fb82 1203 	smull	r1, r2, r2, r3
 8001364:	441a      	add	r2, r3
 8001366:	11d2      	asrs	r2, r2, #7
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad4      	subs	r4, r2, r3
 800136c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001370:	461a      	mov	r2, r3
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a66      	ldr	r2, [pc, #408]	; (8001514 <main+0x224>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	441a      	add	r2, r3
 8001380:	11d2      	asrs	r2, r2, #7
 8001382:	17db      	asrs	r3, r3, #31
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	4b64      	ldr	r3, [pc, #400]	; (8001518 <main+0x228>)
 8001388:	fb83 1302 	smull	r1, r3, r3, r2
 800138c:	1159      	asrs	r1, r3, #5
 800138e:	17d3      	asrs	r3, r2, #31
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800139e:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80013a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013a6:	4a5b      	ldr	r2, [pc, #364]	; (8001514 <main+0x224>)
 80013a8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ac:	441a      	add	r2, r3
 80013ae:	11d2      	asrs	r2, r2, #7
 80013b0:	17db      	asrs	r3, r3, #31
 80013b2:	1ad1      	subs	r1, r2, r3
 80013b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <main+0x224>)
 80013c2:	fb82 0203 	smull	r0, r2, r2, r3
 80013c6:	441a      	add	r2, r3
 80013c8:	11d2      	asrs	r2, r2, #7
 80013ca:	17db      	asrs	r3, r3, #31
 80013cc:	1ad2      	subs	r2, r2, r3
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <main+0x228>)
 80013d0:	fb83 0302 	smull	r0, r3, r3, r2
 80013d4:	1158      	asrs	r0, r3, #5
 80013d6:	17d3      	asrs	r3, r2, #31
 80013d8:	1ac3      	subs	r3, r0, r3
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	fb00 f303 	mul.w	r3, r0, r3
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bfb8      	it	lt
 80013e6:	425b      	neglt	r3, r3
 80013e8:	f107 0008 	add.w	r0, r7, #8
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	9100      	str	r1, [sp, #0]
 80013f0:	462b      	mov	r3, r5
 80013f2:	4622      	mov	r2, r4
 80013f4:	4949      	ldr	r1, [pc, #292]	; (800151c <main+0x22c>)
 80013f6:	f002 ffa5 	bl	8004344 <siprintf>
	ssd1306_WriteString(oledOut,Font_7x10,0x01);
 80013fa:	4a49      	ldr	r2, [pc, #292]	; (8001520 <main+0x230>)
 80013fc:	f107 0008 	add.w	r0, r7, #8
 8001400:	2301      	movs	r3, #1
 8001402:	ca06      	ldmia	r2, {r1, r2}
 8001404:	f000 fb72 	bl	8001aec <ssd1306_WriteString>
	int temp = (int)sqrt((data[0]*data[0]+data[1]*data[1]+data[2]*data[2])/255/255);
 8001408:	f9b7 3000 	ldrsh.w	r3, [r7]
 800140c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001410:	fb03 f202 	mul.w	r2, r3, r2
 8001414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001418:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	441a      	add	r2, r3
 8001422:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001426:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <main+0x234>)
 8001432:	fb82 1203 	smull	r1, r2, r2, r3
 8001436:	441a      	add	r2, r3
 8001438:	13d2      	asrs	r2, r2, #15
 800143a:	17db      	asrs	r3, r3, #31
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <__aeabi_i2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b10 	vmov	d0, r2, r3
 800144c:	f002 fe74 	bl	8004138 <sqrt>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb7e 	bl	8000b58 <__aeabi_d2iz>
 800145c:	4603      	mov	r3, r0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sprintf(oledOut, "Z:%d.%d, Mag:%d.%d",data[2]*100/255/100,abs(data[2]*100/255%100), temp*100/100, abs(temp*100/255%100));
 8001460:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001464:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <main+0x224>)
 8001466:	fb82 1203 	smull	r1, r2, r2, r3
 800146a:	441a      	add	r2, r3
 800146c:	11d2      	asrs	r2, r2, #7
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad4      	subs	r4, r2, r3
 8001472:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001476:	461a      	mov	r2, r3
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <main+0x224>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	441a      	add	r2, r3
 8001486:	11d2      	asrs	r2, r2, #7
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <main+0x228>)
 800148e:	fb83 1302 	smull	r1, r3, r3, r2
 8001492:	1159      	asrs	r1, r3, #5
 8001494:	17d3      	asrs	r3, r2, #31
 8001496:	1acb      	subs	r3, r1, r3
 8001498:	2164      	movs	r1, #100	; 0x64
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80014a4:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80014a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <main+0x224>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	11d2      	asrs	r2, r2, #7
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1ad2      	subs	r2, r2, r3
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <main+0x228>)
 80014c0:	fb83 1302 	smull	r1, r3, r3, r2
 80014c4:	1159      	asrs	r1, r3, #5
 80014c6:	17d3      	asrs	r3, r2, #31
 80014c8:	1acb      	subs	r3, r1, r3
 80014ca:	2164      	movs	r1, #100	; 0x64
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfb8      	it	lt
 80014d6:	425b      	neglt	r3, r3
 80014d8:	f107 0008 	add.w	r0, r7, #8
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	462b      	mov	r3, r5
 80014e4:	4622      	mov	r2, r4
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <main+0x238>)
 80014e8:	f002 ff2c 	bl	8004344 <siprintf>
	ssd1306_SetCursor(5,15);
 80014ec:	210f      	movs	r1, #15
 80014ee:	2005      	movs	r0, #5
 80014f0:	f000 fb22 	bl	8001b38 <ssd1306_SetCursor>
	ssd1306_WriteString(oledOut,Font_7x10,0x01);
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <main+0x230>)
 80014f6:	f107 0008 	add.w	r0, r7, #8
 80014fa:	2301      	movs	r3, #1
 80014fc:	ca06      	ldmia	r2, {r1, r2}
 80014fe:	f000 faf5 	bl	8001aec <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001502:	f000 f9ef 	bl	80018e4 <ssd1306_UpdateScreen>
  {
 8001506:	e716      	b.n	8001336 <main+0x46>
 8001508:	20000000 	.word	0x20000000
 800150c:	20000014 	.word	0x20000014
 8001510:	08004cac 	.word	0x08004cac
 8001514:	80808081 	.word	0x80808081
 8001518:	51eb851f 	.word	0x51eb851f
 800151c:	08004cb4 	.word	0x08004cb4
 8001520:	2000000c 	.word	0x2000000c
 8001524:	81018203 	.word	0x81018203
 8001528:	08004cc4 	.word	0x08004cc4

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f002 ff22 	bl	8004384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <SystemClock_Config+0xcc>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001578:	4a20      	ldr	r2, [pc, #128]	; (80015fc <SystemClock_Config+0xd0>)
 800157a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fbd3 	bl	8002d60 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015c0:	f000 f8c4 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80015cc:	2390      	movs	r3, #144	; 0x90
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fe35 	bl	8003250 <HAL_RCC_ClockConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015ec:	f000 f8ae 	bl	800174c <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3750      	adds	r7, #80	; 0x50
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2C1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x50>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_I2C1_Init+0x58>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2C1_Init+0x50>)
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x50>)
 800163e:	f000 ff33 	bl	80024a8 <HAL_I2C_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f880 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000b0 	.word	0x200000b0
 8001654:	40005400 	.word	0x40005400
 8001658:	000186a0 	.word	0x000186a0

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <MX_SPI1_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI1_Init+0x64>)
 800167c:	2202      	movs	r2, #2
 800167e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001682:	2201      	movs	r2, #1
 8001684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016ae:	f001 ff9b 	bl	80035e8 <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b8:	f000 f848 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000104 	.word	0x20000104
 80016c4:	40013000 	.word	0x40013000

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_GPIO_Init+0x7c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <MX_GPIO_Init+0x7c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_GPIO_Init+0x7c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_GPIO_Init+0x7c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <MX_GPIO_Init+0x7c>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_GPIO_Init+0x7c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0x80>)
 800171c:	f000 feaa 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0x80>)
 8001738:	f000 fd18 	bl	800216c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>

08001756 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af04      	add	r7, sp, #16
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2301      	movs	r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	2200      	movs	r2, #0
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <ssd1306_WriteCommand+0x2c>)
 8001784:	f000 ffd4 	bl	8002730 <HAL_I2C_Mem_Write>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200000b0 	.word	0x200000b0

08001794 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295
 80017a6:	9202      	str	r2, [sp, #8]
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	2240      	movs	r2, #64	; 0x40
 80017b2:	2178      	movs	r1, #120	; 0x78
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <ssd1306_WriteData+0x30>)
 80017b6:	f000 ffbb 	bl	8002730 <HAL_I2C_Mem_Write>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000b0 	.word	0x200000b0

080017c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80017cc:	f7ff ffc3 	bl	8001756 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80017d0:	2064      	movs	r0, #100	; 0x64
 80017d2:	f000 fbc1 	bl	8001f58 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f9da 	bl	8001b90 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80017dc:	2020      	movs	r0, #32
 80017de:	f7ff ffc1 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff ffbe 	bl	8001764 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017e8:	20b0      	movs	r0, #176	; 0xb0
 80017ea:	f7ff ffbb 	bl	8001764 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017ee:	20c8      	movs	r0, #200	; 0xc8
 80017f0:	f7ff ffb8 	bl	8001764 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ffb5 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017fa:	2010      	movs	r0, #16
 80017fc:	f7ff ffb2 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001800:	2040      	movs	r0, #64	; 0x40
 8001802:	f7ff ffaf 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001806:	20ff      	movs	r0, #255	; 0xff
 8001808:	f000 f9ae 	bl	8001b68 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800180c:	20a1      	movs	r0, #161	; 0xa1
 800180e:	f7ff ffa9 	bl	8001764 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001812:	20a6      	movs	r0, #166	; 0xa6
 8001814:	f7ff ffa6 	bl	8001764 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001818:	20a8      	movs	r0, #168	; 0xa8
 800181a:	f7ff ffa3 	bl	8001764 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800181e:	201f      	movs	r0, #31
 8001820:	f7ff ffa0 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001824:	20a4      	movs	r0, #164	; 0xa4
 8001826:	f7ff ff9d 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800182a:	20d3      	movs	r0, #211	; 0xd3
 800182c:	f7ff ff9a 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff97 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001836:	20d5      	movs	r0, #213	; 0xd5
 8001838:	f7ff ff94 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800183c:	20f0      	movs	r0, #240	; 0xf0
 800183e:	f7ff ff91 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001842:	20d9      	movs	r0, #217	; 0xd9
 8001844:	f7ff ff8e 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001848:	2022      	movs	r0, #34	; 0x22
 800184a:	f7ff ff8b 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800184e:	20da      	movs	r0, #218	; 0xda
 8001850:	f7ff ff88 	bl	8001764 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff ff85 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800185a:	20db      	movs	r0, #219	; 0xdb
 800185c:	f7ff ff82 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001860:	2020      	movs	r0, #32
 8001862:	f7ff ff7f 	bl	8001764 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001866:	208d      	movs	r0, #141	; 0x8d
 8001868:	f7ff ff7c 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800186c:	2014      	movs	r0, #20
 800186e:	f7ff ff79 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001872:	2001      	movs	r0, #1
 8001874:	f000 f98c 	bl	8001b90 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001878:	2000      	movs	r0, #0
 800187a:	f000 f80f 	bl	800189c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800187e:	f000 f831 	bl	80018e4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <ssd1306_Init+0xd0>)
 8001884:	2200      	movs	r2, #0
 8001886:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <ssd1306_Init+0xd0>)
 800188a:	2200      	movs	r2, #0
 800188c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800188e:	4b02      	ldr	r3, [pc, #8]	; (8001898 <ssd1306_Init+0xd0>)
 8001890:	2201      	movs	r2, #1
 8001892:	711a      	strb	r2, [r3, #4]
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000035c 	.word	0x2000035c

0800189c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e00d      	b.n	80018c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <ssd1306_Fill+0x1a>
 80018b2:	2100      	movs	r1, #0
 80018b4:	e000      	b.n	80018b8 <ssd1306_Fill+0x1c>
 80018b6:	21ff      	movs	r1, #255	; 0xff
 80018b8:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <ssd1306_Fill+0x44>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ce:	d3ed      	bcc.n	80018ac <ssd1306_Fill+0x10>
    }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000015c 	.word	0x2000015c

080018e4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]
 80018ee:	e016      	b.n	800191e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	3b50      	subs	r3, #80	; 0x50
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff34 	bl	8001764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ff31 	bl	8001764 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001902:	2010      	movs	r0, #16
 8001904:	f7ff ff2e 	bl	8001764 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <ssd1306_UpdateScreen+0x4c>)
 800190e:	4413      	add	r3, r2
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff3e 	bl	8001794 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	3301      	adds	r3, #1
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d9e5      	bls.n	80018f0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000015c 	.word	0x2000015c

08001934 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	460b      	mov	r3, r1
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db3d      	blt.n	80019ca <ssd1306_DrawPixel+0x96>
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	2b1f      	cmp	r3, #31
 8001952:	d83a      	bhi.n	80019ca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001954:	797b      	ldrb	r3, [r7, #5]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d11a      	bne.n	8001990 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	b2d8      	uxtb	r0, r3
 8001962:	4603      	mov	r3, r0
 8001964:	01db      	lsls	r3, r3, #7
 8001966:	4413      	add	r3, r2
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <ssd1306_DrawPixel+0xa4>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	b25a      	sxtb	r2, r3
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	b25b      	sxtb	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b259      	sxtb	r1, r3
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	4603      	mov	r3, r0
 8001984:	01db      	lsls	r3, r3, #7
 8001986:	4413      	add	r3, r2
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <ssd1306_DrawPixel+0xa4>)
 800198c:	54d1      	strb	r1, [r2, r3]
 800198e:	e01d      	b.n	80019cc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2d8      	uxtb	r0, r3
 8001998:	4603      	mov	r3, r0
 800199a:	01db      	lsls	r3, r3, #7
 800199c:	4413      	add	r3, r2
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <ssd1306_DrawPixel+0xa4>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	4013      	ands	r3, r2
 80019b8:	b259      	sxtb	r1, r3
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	4603      	mov	r3, r0
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	4413      	add	r3, r2
 80019c2:	b2c9      	uxtb	r1, r1
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <ssd1306_DrawPixel+0xa4>)
 80019c6:	54d1      	strb	r1, [r2, r3]
 80019c8:	e000      	b.n	80019cc <ssd1306_DrawPixel+0x98>
        return;
 80019ca:	bf00      	nop
    }
}
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000015c 	.word	0x2000015c

080019dc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4604      	mov	r4, r0
 80019e4:	1d38      	adds	r0, r7, #4
 80019e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	4613      	mov	r3, r2
 80019f2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b1f      	cmp	r3, #31
 80019f8:	d902      	bls.n	8001a00 <ssd1306_WriteChar+0x24>
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b7e      	cmp	r3, #126	; 0x7e
 80019fe:	d901      	bls.n	8001a04 <ssd1306_WriteChar+0x28>
        return 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e06d      	b.n	8001ae0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	793b      	ldrb	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2b80      	cmp	r3, #128	; 0x80
 8001a10:	dc06      	bgt.n	8001a20 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a14:	885b      	ldrh	r3, [r3, #2]
 8001a16:	461a      	mov	r2, r3
 8001a18:	797b      	ldrb	r3, [r7, #5]
 8001a1a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	dd01      	ble.n	8001a24 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e05d      	b.n	8001ae0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	e04c      	b.n	8001ac4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3b20      	subs	r3, #32
 8001a30:	7979      	ldrb	r1, [r7, #5]
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	440b      	add	r3, r1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	e034      	b.n	8001ab4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b2d8      	uxtb	r0, r3
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	7bba      	ldrb	r2, [r7, #14]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff ff5b 	bl	8001934 <ssd1306_DrawPixel>
 8001a7e:	e016      	b.n	8001aae <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2d8      	uxtb	r0, r3
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001a90:	885b      	ldrh	r3, [r3, #2]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b2d9      	uxtb	r1, r3
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f7ff ff43 	bl	8001934 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	793b      	ldrb	r3, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d3c5      	bcc.n	8001a4a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	797b      	ldrb	r3, [r7, #5]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d3ad      	bcc.n	8001a2a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	793b      	ldrb	r3, [r7, #4]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <ssd1306_WriteChar+0x10c>)
 8001adc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	2000035c 	.word	0x2000035c

08001aec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	1d38      	adds	r0, r7, #4
 8001af6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001afa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001afc:	e012      	b.n	8001b24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	7818      	ldrb	r0, [r3, #0]
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	1d3a      	adds	r2, r7, #4
 8001b06:	ca06      	ldmia	r2, {r1, r2}
 8001b08:	f7ff ff68 	bl	80019dc <ssd1306_WriteChar>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d002      	beq.n	8001b1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	e008      	b.n	8001b30 <ssd1306_WriteString+0x44>
        }
        str++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e8      	bne.n	8001afe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <ssd1306_SetCursor+0x2c>)
 8001b4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <ssd1306_SetCursor+0x2c>)
 8001b56:	805a      	strh	r2, [r3, #2]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	2000035c 	.word	0x2000035c

08001b68 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b72:	2381      	movs	r3, #129	; 0x81
 8001b74:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fdf3 	bl	8001764 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fdef 	bl	8001764 <ssd1306_WriteCommand>
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ba0:	23af      	movs	r3, #175	; 0xaf
 8001ba2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <ssd1306_SetDisplayOn+0x38>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	715a      	strb	r2, [r3, #5]
 8001baa:	e004      	b.n	8001bb6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bac:	23ae      	movs	r3, #174	; 0xae
 8001bae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <ssd1306_SetDisplayOn+0x38>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fdd3 	bl	8001764 <ssd1306_WriteCommand>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000035c 	.word	0x2000035c

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_I2C_MspInit+0x84>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12c      	bne.n	8001c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c60:	2312      	movs	r3, #18
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_I2C_MspInit+0x8c>)
 8001c78:	f000 fa78 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_SPI_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12b      	bne.n	8001d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	23e0      	movs	r3, #224	; 0xe0
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d16:	2305      	movs	r3, #5
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x8c>)
 8001d22:	f000 fa23 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40013000 	.word	0x40013000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f8c6 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f002 fae8 	bl	8004394 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20018000 	.word	0x20018000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000364 	.word	0x20000364
 8001df8:	200004b8 	.word	0x200004b8

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	; (8001e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff ffd7 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f002 faa7 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff fa4d 	bl	80012f0 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e64:	080061fc 	.word	0x080061fc
  ldr r2, =_sbss
 8001e68:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e6c:	200004b4 	.word	0x200004b4

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f931 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fe90 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f93b 	bl	8002152 <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f000 f911 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000001c 	.word	0x2000001c
 8001f10:	20000024 	.word	0x20000024
 8001f14:	20000020 	.word	0x20000020

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000024 	.word	0x20000024
 8001f3c:	20000368 	.word	0x20000368

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000368 	.word	0x20000368

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000024 	.word	0x20000024

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff47 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff5c 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb0 	bl	80020c0 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e159      	b.n	800243c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8148 	bne.w	8002436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a2 	beq.w	8002436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a52      	ldr	r2, [pc, #328]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	; (800245c <HAL_GPIO_Init+0x2f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x202>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1fe>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_GPIO_Init+0x2f8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1fa>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a46      	ldr	r2, [pc, #280]	; (8002468 <HAL_GPIO_Init+0x2fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1f6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_GPIO_Init+0x300>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1f2>
 800235a:	2304      	movs	r3, #4
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800235e:	2307      	movs	r3, #7
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x304>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002430:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f aea2 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e12b      	b.n	8002712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fba4 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800250c:	f001 f858 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a81      	ldr	r2, [pc, #516]	; (800271c <HAL_I2C_Init+0x274>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d807      	bhi.n	800252c <HAL_I2C_Init+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a80      	ldr	r2, [pc, #512]	; (8002720 <HAL_I2C_Init+0x278>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x92>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7d      	ldr	r2, [pc, #500]	; (8002724 <HAL_I2C_Init+0x27c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a78      	ldr	r2, [pc, #480]	; (8002728 <HAL_I2C_Init+0x280>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a6a      	ldr	r2, [pc, #424]	; (800271c <HAL_I2C_Init+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d802      	bhi.n	800257c <HAL_I2C_Init+0xd4>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	e009      	b.n	8002590 <HAL_I2C_Init+0xe8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_I2C_Init+0x284>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	; (800271c <HAL_I2C_Init+0x274>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d819      	bhi.n	80025e4 <HAL_I2C_Init+0x13c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e59      	subs	r1, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_Init+0x138>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	e051      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e04f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_I2C_Init+0x168>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e012      	b.n	8002636 <HAL_I2C_Init+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x196>
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <HAL_I2C_Init+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e58      	subs	r0, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	fbb0 f3f3 	udiv	r3, r0, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6809      	ldr	r1, [r1, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6911      	ldr	r1, [r2, #16]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	003d08ff 	.word	0x003d08ff
 8002728:	431bde83 	.word	0x431bde83
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	817b      	strh	r3, [r7, #10]
 8002742:	460b      	mov	r3, r1
 8002744:	813b      	strh	r3, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800274a:	f7ff fbf9 	bl	8001f40 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	f040 80d9 	bne.w	8002910 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2319      	movs	r3, #25
 8002764:	2201      	movs	r2, #1
 8002766:	496d      	ldr	r1, [pc, #436]	; (800291c <HAL_I2C_Mem_Write+0x1ec>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f971 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
 8002776:	e0cc      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Mem_Write+0x56>
 8002782:	2302      	movs	r3, #2
 8002784:	e0c5      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d007      	beq.n	80027ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	; 0x21
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_I2C_Mem_Write+0x1f0>)
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ee:	88f8      	ldrh	r0, [r7, #6]
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f890 	bl	8002924 <I2C_RequestMemoryWrite>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d052      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e081      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f9f2 	bl	8002bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b04      	cmp	r3, #4
 8002824:	d107      	bne.n	8002836 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06b      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d11b      	bne.n	80028b0 <HAL_I2C_Mem_Write+0x180>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1aa      	bne.n	800280e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f9de 	bl	8002c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d107      	bne.n	80028e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e016      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	00100002 	.word	0x00100002
 8002920:	ffff0000 	.word	0xffff0000

08002924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f878 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d103      	bne.n	800297e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e05f      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	492d      	ldr	r1, [pc, #180]	; (8002a4c <I2C_RequestMemoryWrite+0x128>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f8b0 	bl	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04c      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f91a 	bl	8002bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02b      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e021      	b.n	8002a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f8f4 	bl	8002bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e005      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e025      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d021      	beq.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff fa69 	bl	8001f40 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e023      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	e00c      	b.n	8002aee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d0b6      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b0c:	e051      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d123      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e046      	b.n	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d021      	beq.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7ff f9e7 	bl	8001f40 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e020      	b.n	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10c      	bne.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e00b      	b.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d18d      	bne.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c08:	e02d      	b.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f878 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e02d      	b.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d021      	beq.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff f98d 	bl	8001f40 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d116      	bne.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d1ca      	bne.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c8a:	e02d      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f837 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e02d      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d021      	beq.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7ff f94c 	bl	8001f40 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e007      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d1ca      	bne.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d11b      	bne.n	8002d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e267      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d075      	beq.n	8002e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7e:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b85      	ldr	r3, [pc, #532]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d112      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b82      	ldr	r3, [pc, #520]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	4b7e      	ldr	r3, [pc, #504]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05b      	beq.n	8002e68 <HAL_RCC_OscConfig+0x108>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d157      	bne.n	8002e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e242      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x74>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x98>
 8002dde:	4b70      	ldr	r3, [pc, #448]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6f      	ldr	r2, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6c      	ldr	r2, [pc, #432]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002df8:	4b69      	ldr	r3, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a68      	ldr	r2, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b66      	ldr	r3, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff f892 	bl	8001f40 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff f88e 	bl	8001f40 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e207      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xc0>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff f87e 	bl	8001f40 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff f87a 	bl	8001f40 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1f3      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0xe8>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e76:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1c7      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4937      	ldr	r1, [pc, #220]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7ff f833 	bl	8001f40 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ede:	f7ff f82f 	bl	8001f40 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1a8      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4925      	ldr	r1, [pc, #148]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7ff f812 	bl	8001f40 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f20:	f7ff f80e 	bl	8001f40 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e187      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fff2 	bl	8001f40 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe ffee 	bl	8001f40 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e167      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x200>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe ffdb 	bl	8001f40 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00e      	b.n	8002fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe ffd7 	bl	8001f40 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d907      	bls.n	8002fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e150      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ea      	bne.n	8002f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b7d      	ldr	r3, [pc, #500]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a7c      	ldr	r2, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b77      	ldr	r3, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b74      	ldr	r3, [pc, #464]	; (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a73      	ldr	r2, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe ff97 	bl	8001f40 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe ff93 	bl	8001f40 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e10c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x474>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x2ea>
 800303c:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a63      	ldr	r2, [pc, #396]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x30c>
 8003052:	4b5f      	ldr	r3, [pc, #380]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800306c:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a54      	ldr	r2, [pc, #336]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe ff58 	bl	8001f40 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe ff54 	bl	8001f40 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0cb      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x334>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe ff42 	bl	8001f40 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe ff3e 	bl	8001f40 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0b5      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a1 	beq.w	8003240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d05c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d141      	bne.n	8003196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe ff12 	bl	8001f40 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe ff0e 	bl	8001f40 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e087      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	491b      	ldr	r1, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x478>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe fee7 	bl	8001f40 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe fee3 	bl	8001f40 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e05c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x416>
 8003194:	e054      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fed0 	bl	8001f40 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fecc 	bl	8001f40 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e045      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x470>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x444>
 80031c2:	e03d      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e038      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x4ec>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d028      	beq.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d121      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11a      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	3b01      	subs	r3, #1
 8003226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe fdfe 	bl	8001f40 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fdfa 	bl	8001f40 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fd5e 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	080061a0 	.word	0x080061a0
 8003414:	2000001c 	.word	0x2000001c
 8003418:	20000020 	.word	0x20000020

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b090      	sub	sp, #64	; 0x40
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80a1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e09b      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003454:	e09b      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003458:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800345a:	e098      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003466:	4b4d      	ldr	r3, [pc, #308]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	627a      	str	r2, [r7, #36]	; 0x24
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003484:	2100      	movs	r1, #0
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003488:	fb03 f201 	mul.w	r2, r3, r1
 800348c:	2300      	movs	r3, #0
 800348e:	fb00 f303 	mul.w	r3, r0, r3
 8003492:	4413      	add	r3, r2
 8003494:	4a43      	ldr	r2, [pc, #268]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003496:	fba0 1202 	umull	r1, r2, r0, r2
 800349a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800349c:	460a      	mov	r2, r1
 800349e:	62ba      	str	r2, [r7, #40]	; 0x28
 80034a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a2:	4413      	add	r3, r2
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a8:	2200      	movs	r2, #0
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	61fa      	str	r2, [r7, #28]
 80034ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034b6:	f7fd fb77 	bl	8000ba8 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4613      	mov	r3, r2
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c2:	e053      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	617a      	str	r2, [r7, #20]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034d6:	f04f 0b00 	mov.w	fp, #0
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	ebb2 080a 	subs.w	r8, r2, sl
 80034f6:	eb63 090b 	sbc.w	r9, r3, fp
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003506:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800350a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800350e:	ebb2 0408 	subs.w	r4, r2, r8
 8003512:	eb63 0509 	sbc.w	r5, r3, r9
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	00eb      	lsls	r3, r5, #3
 8003520:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003524:	00e2      	lsls	r2, r4, #3
 8003526:	4614      	mov	r4, r2
 8003528:	461d      	mov	r5, r3
 800352a:	eb14 030a 	adds.w	r3, r4, sl
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	eb45 030b 	adc.w	r3, r5, fp
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003560:	f7fd fb22 	bl	8000ba8 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800357c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003590:	4618      	mov	r0, r3
 8003592:	3740      	adds	r7, #64	; 0x40
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	017d7840 	.word	0x017d7840

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000001c 	.word	0x2000001c

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a9b      	lsrs	r3, r3, #10
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	080061b0 	.word	0x080061b0

080035e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07b      	b.n	80036f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360a:	d009      	beq.n	8003620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	61da      	str	r2, [r3, #28]
 8003612:	e005      	b.n	8003620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe fb36 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	ea42 0103 	orr.w	r1, r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	f003 0104 	and.w	r1, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0210 	and.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b088      	sub	sp, #32
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_SPI_Transmit+0x22>
 8003718:	2302      	movs	r3, #2
 800371a:	e126      	b.n	800396a <HAL_SPI_Transmit+0x270>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003724:	f7fe fc0c 	bl	8001f40 <HAL_GetTick>
 8003728:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800373e:	e10b      	b.n	8003958 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_SPI_Transmit+0x52>
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003750:	e102      	b.n	8003958 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2203      	movs	r2, #3
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	d10f      	bne.n	80037ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d007      	beq.n	80037d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d14b      	bne.n	800387a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Transmit+0xf6>
 80037ea:	8afb      	ldrh	r3, [r7, #22]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d13e      	bne.n	800386e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003814:	e02b      	b.n	800386e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d112      	bne.n	800384a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	1c9a      	adds	r2, r3, #2
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	86da      	strh	r2, [r3, #54]	; 0x36
 8003848:	e011      	b.n	800386e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384a:	f7fe fb79 	bl	8001f40 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d803      	bhi.n	8003862 <HAL_SPI_Transmit+0x168>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d102      	bne.n	8003868 <HAL_SPI_Transmit+0x16e>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386c:	e074      	b.n	8003958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ce      	bne.n	8003816 <HAL_SPI_Transmit+0x11c>
 8003878:	e04c      	b.n	8003914 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x18e>
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d140      	bne.n	800390a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038ae:	e02c      	b.n	800390a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d113      	bne.n	80038e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038e4:	e011      	b.n	800390a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e6:	f7fe fb2b 	bl	8001f40 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d803      	bhi.n	80038fe <HAL_SPI_Transmit+0x204>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_Transmit+0x20a>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003908:	e026      	b.n	8003958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1cd      	bne.n	80038b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fbcb 	bl	80040b4 <SPI_EndRxTxTransaction>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e000      	b.n	8003958 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003968:	7ffb      	ldrb	r3, [r7, #31]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af02      	add	r7, sp, #8
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398e:	d112      	bne.n	80039b6 <HAL_SPI_Receive+0x44>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2204      	movs	r2, #4
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f8f1 	bl	8003b94 <HAL_SPI_TransmitReceive>
 80039b2:	4603      	mov	r3, r0
 80039b4:	e0ea      	b.n	8003b8c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_SPI_Receive+0x52>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0e3      	b.n	8003b8c <HAL_SPI_Receive+0x21a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039cc:	f7fe fab8 	bl	8001f40 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e2:	e0ca      	b.n	8003b7a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Receive+0x7e>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039f4:	e0c1      	b.n	8003b7a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2204      	movs	r2, #4
 80039fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	d10f      	bne.n	8003a5e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d007      	beq.n	8003a7c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d162      	bne.n	8003b4a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a84:	e02e      	b.n	8003ae4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d115      	bne.n	8003ac0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f103 020c 	add.w	r2, r3, #12
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003abe:	e011      	b.n	8003ae4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac0:	f7fe fa3e 	bl	8001f40 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d803      	bhi.n	8003ad8 <HAL_SPI_Receive+0x166>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_Receive+0x16c>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ae2:	e04a      	b.n	8003b7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1cb      	bne.n	8003a86 <HAL_SPI_Receive+0x114>
 8003aee:	e031      	b.n	8003b54 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d113      	bne.n	8003b26 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	1c9a      	adds	r2, r3, #2
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b24:	e011      	b.n	8003b4a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b26:	f7fe fa0b 	bl	8001f40 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d803      	bhi.n	8003b3e <HAL_SPI_Receive+0x1cc>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d102      	bne.n	8003b44 <HAL_SPI_Receive+0x1d2>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b48:	e017      	b.n	8003b7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1cd      	bne.n	8003af0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa45 	bl	8003fe8 <SPI_EndRxTransaction>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
 8003b76:	e000      	b.n	8003b7a <HAL_SPI_Receive+0x208>
  }

error :
 8003b78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x26>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e18a      	b.n	8003ed0 <HAL_SPI_TransmitReceive+0x33c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc2:	f7fe f9bd 	bl	8001f40 <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d00f      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x70>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d107      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x68>
 8003bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d003      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c02:	e15b      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x82>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x82>
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c1c:	e14e      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d003      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	887a      	ldrh	r2, [r7, #2]
 8003c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	887a      	ldrh	r2, [r7, #2]
 8003c5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d007      	beq.n	8003c86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8e:	d178      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x10a>
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d166      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc2:	e053      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d11b      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x176>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d016      	beq.n	8003d0a <HAL_SPI_TransmitReceive+0x176>
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d113      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	1c9a      	adds	r2, r3, #2
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d119      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x1b8>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d014      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d4c:	f7fe f8f8 	bl	8001f40 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d807      	bhi.n	8003d6c <HAL_SPI_TransmitReceive+0x1d8>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d003      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d6a:	e0a7      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1a6      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x130>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1a1      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x130>
 8003d80:	e07c      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x1fc>
 8003d8a:	8b7b      	ldrh	r3, [r7, #26]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d16b      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db6:	e057      	b.n	8003e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d11c      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x26c>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d017      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x26c>
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d114      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d119      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x2ae>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d014      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e42:	f7fe f87d 	bl	8001f40 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d803      	bhi.n	8003e5a <HAL_SPI_TransmitReceive+0x2c6>
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d102      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x2cc>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e66:	e029      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1a2      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x224>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d19d      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f917 	bl	80040b4 <SPI_EndRxTxTransaction>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e98:	e010      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	e000      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3730      	adds	r7, #48	; 0x30
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ee8:	f7fe f82a 	bl	8001f40 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ef8:	f7fe f822 	bl	8001f40 <HAL_GetTick>
 8003efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	015b      	lsls	r3, r3, #5
 8003f04:	0d1b      	lsrs	r3, r3, #20
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0e:	e054      	b.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d050      	beq.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f18:	f7fe f812 	bl	8001f40 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d902      	bls.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13d      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f46:	d111      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f50:	d004      	beq.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d107      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f74:	d10f      	bne.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e017      	b.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d19b      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000001c 	.word	0x2000001c

08003fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffc:	d111      	bne.n	8004022 <SPI_EndRxTransaction+0x3a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004006:	d004      	beq.n	8004012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d107      	bne.n	8004022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d12a      	bne.n	8004082 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d012      	beq.n	800405c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ff49 	bl	8003ed8 <SPI_WaitFlagStateUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02d      	beq.n	80040a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e026      	b.n	80040aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	2101      	movs	r1, #1
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff ff36 	bl	8003ed8 <SPI_WaitFlagStateUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01a      	beq.n	80040a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e013      	b.n	80040aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	2101      	movs	r1, #1
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ff23 	bl	8003ed8 <SPI_WaitFlagStateUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e000      	b.n	80040aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <SPI_EndRxTxTransaction+0x7c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <SPI_EndRxTxTransaction+0x80>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0d5b      	lsrs	r3, r3, #21
 80040cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040de:	d112      	bne.n	8004106 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fef4 	bl	8003ed8 <SPI_WaitFlagStateUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e00f      	b.n	8004126 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3b01      	subs	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d0f2      	beq.n	8004106 <SPI_EndRxTxTransaction+0x52>
 8004120:	e000      	b.n	8004124 <SPI_EndRxTxTransaction+0x70>
        break;
 8004122:	bf00      	nop
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000001c 	.word	0x2000001c
 8004134:	165e9f81 	.word	0x165e9f81

08004138 <sqrt>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	ed2d 8b02 	vpush	{d8}
 800413e:	ec55 4b10 	vmov	r4, r5, d0
 8004142:	f000 f825 	bl	8004190 <__ieee754_sqrt>
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	4620      	mov	r0, r4
 800414c:	4629      	mov	r1, r5
 800414e:	eeb0 8a40 	vmov.f32	s16, s0
 8004152:	eef0 8a60 	vmov.f32	s17, s1
 8004156:	f7fc fce9 	bl	8000b2c <__aeabi_dcmpun>
 800415a:	b990      	cbnz	r0, 8004182 <sqrt+0x4a>
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	4620      	mov	r0, r4
 8004162:	4629      	mov	r1, r5
 8004164:	f7fc fcba 	bl	8000adc <__aeabi_dcmplt>
 8004168:	b158      	cbz	r0, 8004182 <sqrt+0x4a>
 800416a:	f000 f913 	bl	8004394 <__errno>
 800416e:	2321      	movs	r3, #33	; 0x21
 8004170:	6003      	str	r3, [r0, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	2300      	movs	r3, #0
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	f7fc fb67 	bl	800084c <__aeabi_ddiv>
 800417e:	ec41 0b18 	vmov	d8, r0, r1
 8004182:	eeb0 0a48 	vmov.f32	s0, s16
 8004186:	eef0 0a68 	vmov.f32	s1, s17
 800418a:	ecbd 8b02 	vpop	{d8}
 800418e:	bd38      	pop	{r3, r4, r5, pc}

08004190 <__ieee754_sqrt>:
 8004190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ec55 4b10 	vmov	r4, r5, d0
 8004198:	4e67      	ldr	r6, [pc, #412]	; (8004338 <__ieee754_sqrt+0x1a8>)
 800419a:	43ae      	bics	r6, r5
 800419c:	ee10 0a10 	vmov	r0, s0
 80041a0:	ee10 2a10 	vmov	r2, s0
 80041a4:	4629      	mov	r1, r5
 80041a6:	462b      	mov	r3, r5
 80041a8:	d10d      	bne.n	80041c6 <__ieee754_sqrt+0x36>
 80041aa:	f7fc fa25 	bl	80005f8 <__aeabi_dmul>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fc f869 	bl	800028c <__adddf3>
 80041ba:	4604      	mov	r4, r0
 80041bc:	460d      	mov	r5, r1
 80041be:	ec45 4b10 	vmov	d0, r4, r5
 80041c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	dc0b      	bgt.n	80041e2 <__ieee754_sqrt+0x52>
 80041ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80041ce:	4326      	orrs	r6, r4
 80041d0:	d0f5      	beq.n	80041be <__ieee754_sqrt+0x2e>
 80041d2:	b135      	cbz	r5, 80041e2 <__ieee754_sqrt+0x52>
 80041d4:	f7fc f858 	bl	8000288 <__aeabi_dsub>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	f7fc fb36 	bl	800084c <__aeabi_ddiv>
 80041e0:	e7eb      	b.n	80041ba <__ieee754_sqrt+0x2a>
 80041e2:	1509      	asrs	r1, r1, #20
 80041e4:	f000 808d 	beq.w	8004302 <__ieee754_sqrt+0x172>
 80041e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80041f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f4:	07c9      	lsls	r1, r1, #31
 80041f6:	bf5c      	itt	pl
 80041f8:	005b      	lslpl	r3, r3, #1
 80041fa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80041fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004202:	bf58      	it	pl
 8004204:	0052      	lslpl	r2, r2, #1
 8004206:	2500      	movs	r5, #0
 8004208:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800420c:	1076      	asrs	r6, r6, #1
 800420e:	0052      	lsls	r2, r2, #1
 8004210:	f04f 0e16 	mov.w	lr, #22
 8004214:	46ac      	mov	ip, r5
 8004216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800421a:	eb0c 0001 	add.w	r0, ip, r1
 800421e:	4298      	cmp	r0, r3
 8004220:	bfde      	ittt	le
 8004222:	1a1b      	suble	r3, r3, r0
 8004224:	eb00 0c01 	addle.w	ip, r0, r1
 8004228:	186d      	addle	r5, r5, r1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	f1be 0e01 	subs.w	lr, lr, #1
 8004230:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004234:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004238:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800423c:	d1ed      	bne.n	800421a <__ieee754_sqrt+0x8a>
 800423e:	4674      	mov	r4, lr
 8004240:	2720      	movs	r7, #32
 8004242:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004246:	4563      	cmp	r3, ip
 8004248:	eb01 000e 	add.w	r0, r1, lr
 800424c:	dc02      	bgt.n	8004254 <__ieee754_sqrt+0xc4>
 800424e:	d113      	bne.n	8004278 <__ieee754_sqrt+0xe8>
 8004250:	4290      	cmp	r0, r2
 8004252:	d811      	bhi.n	8004278 <__ieee754_sqrt+0xe8>
 8004254:	2800      	cmp	r0, #0
 8004256:	eb00 0e01 	add.w	lr, r0, r1
 800425a:	da57      	bge.n	800430c <__ieee754_sqrt+0x17c>
 800425c:	f1be 0f00 	cmp.w	lr, #0
 8004260:	db54      	blt.n	800430c <__ieee754_sqrt+0x17c>
 8004262:	f10c 0801 	add.w	r8, ip, #1
 8004266:	eba3 030c 	sub.w	r3, r3, ip
 800426a:	4290      	cmp	r0, r2
 800426c:	bf88      	it	hi
 800426e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004272:	1a12      	subs	r2, r2, r0
 8004274:	440c      	add	r4, r1
 8004276:	46c4      	mov	ip, r8
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	3f01      	subs	r7, #1
 800427c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004280:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004284:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004288:	d1dd      	bne.n	8004246 <__ieee754_sqrt+0xb6>
 800428a:	4313      	orrs	r3, r2
 800428c:	d01b      	beq.n	80042c6 <__ieee754_sqrt+0x136>
 800428e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800433c <__ieee754_sqrt+0x1ac>
 8004292:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004340 <__ieee754_sqrt+0x1b0>
 8004296:	e9da 0100 	ldrd	r0, r1, [sl]
 800429a:	e9db 2300 	ldrd	r2, r3, [fp]
 800429e:	f7fb fff3 	bl	8000288 <__aeabi_dsub>
 80042a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fc fc1f 	bl	8000af0 <__aeabi_dcmple>
 80042b2:	b140      	cbz	r0, 80042c6 <__ieee754_sqrt+0x136>
 80042b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80042b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80042bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80042c0:	d126      	bne.n	8004310 <__ieee754_sqrt+0x180>
 80042c2:	3501      	adds	r5, #1
 80042c4:	463c      	mov	r4, r7
 80042c6:	106a      	asrs	r2, r5, #1
 80042c8:	0863      	lsrs	r3, r4, #1
 80042ca:	07e9      	lsls	r1, r5, #31
 80042cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80042d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80042d4:	bf48      	it	mi
 80042d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80042da:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80042de:	461c      	mov	r4, r3
 80042e0:	e76d      	b.n	80041be <__ieee754_sqrt+0x2e>
 80042e2:	0ad3      	lsrs	r3, r2, #11
 80042e4:	3815      	subs	r0, #21
 80042e6:	0552      	lsls	r2, r2, #21
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0fa      	beq.n	80042e2 <__ieee754_sqrt+0x152>
 80042ec:	02dc      	lsls	r4, r3, #11
 80042ee:	d50a      	bpl.n	8004306 <__ieee754_sqrt+0x176>
 80042f0:	f1c1 0420 	rsb	r4, r1, #32
 80042f4:	fa22 f404 	lsr.w	r4, r2, r4
 80042f8:	1e4d      	subs	r5, r1, #1
 80042fa:	408a      	lsls	r2, r1
 80042fc:	4323      	orrs	r3, r4
 80042fe:	1b41      	subs	r1, r0, r5
 8004300:	e772      	b.n	80041e8 <__ieee754_sqrt+0x58>
 8004302:	4608      	mov	r0, r1
 8004304:	e7f0      	b.n	80042e8 <__ieee754_sqrt+0x158>
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	3101      	adds	r1, #1
 800430a:	e7ef      	b.n	80042ec <__ieee754_sqrt+0x15c>
 800430c:	46e0      	mov	r8, ip
 800430e:	e7aa      	b.n	8004266 <__ieee754_sqrt+0xd6>
 8004310:	f7fb ffbc 	bl	800028c <__adddf3>
 8004314:	e9da 8900 	ldrd	r8, r9, [sl]
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4640      	mov	r0, r8
 800431e:	4649      	mov	r1, r9
 8004320:	f7fc fbdc 	bl	8000adc <__aeabi_dcmplt>
 8004324:	b120      	cbz	r0, 8004330 <__ieee754_sqrt+0x1a0>
 8004326:	1ca0      	adds	r0, r4, #2
 8004328:	bf08      	it	eq
 800432a:	3501      	addeq	r5, #1
 800432c:	3402      	adds	r4, #2
 800432e:	e7ca      	b.n	80042c6 <__ieee754_sqrt+0x136>
 8004330:	3401      	adds	r4, #1
 8004332:	f024 0401 	bic.w	r4, r4, #1
 8004336:	e7c6      	b.n	80042c6 <__ieee754_sqrt+0x136>
 8004338:	7ff00000 	.word	0x7ff00000
 800433c:	20000028 	.word	0x20000028
 8004340:	20000030 	.word	0x20000030

08004344 <siprintf>:
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	b500      	push	{lr}
 8004348:	b09c      	sub	sp, #112	; 0x70
 800434a:	ab1d      	add	r3, sp, #116	; 0x74
 800434c:	9002      	str	r0, [sp, #8]
 800434e:	9006      	str	r0, [sp, #24]
 8004350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <siprintf+0x38>)
 8004356:	9107      	str	r1, [sp, #28]
 8004358:	9104      	str	r1, [sp, #16]
 800435a:	4909      	ldr	r1, [pc, #36]	; (8004380 <siprintf+0x3c>)
 800435c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	6800      	ldr	r0, [r0, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	a902      	add	r1, sp, #8
 8004368:	f000 f9a0 	bl	80046ac <_svfiprintf_r>
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	b01c      	add	sp, #112	; 0x70
 8004374:	f85d eb04 	ldr.w	lr, [sp], #4
 8004378:	b003      	add	sp, #12
 800437a:	4770      	bx	lr
 800437c:	20000084 	.word	0x20000084
 8004380:	ffff0208 	.word	0xffff0208

08004384 <memset>:
 8004384:	4402      	add	r2, r0
 8004386:	4603      	mov	r3, r0
 8004388:	4293      	cmp	r3, r2
 800438a:	d100      	bne.n	800438e <memset+0xa>
 800438c:	4770      	bx	lr
 800438e:	f803 1b01 	strb.w	r1, [r3], #1
 8004392:	e7f9      	b.n	8004388 <memset+0x4>

08004394 <__errno>:
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <__errno+0x8>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000084 	.word	0x20000084

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4d0d      	ldr	r5, [pc, #52]	; (80043d8 <__libc_init_array+0x38>)
 80043a4:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	2600      	movs	r6, #0
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	4d0b      	ldr	r5, [pc, #44]	; (80043e0 <__libc_init_array+0x40>)
 80043b2:	4c0c      	ldr	r4, [pc, #48]	; (80043e4 <__libc_init_array+0x44>)
 80043b4:	f000 fc6a 	bl	8004c8c <_init>
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	2600      	movs	r6, #0
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	080061f4 	.word	0x080061f4
 80043dc:	080061f4 	.word	0x080061f4
 80043e0:	080061f4 	.word	0x080061f4
 80043e4:	080061f8 	.word	0x080061f8

080043e8 <__retarget_lock_acquire_recursive>:
 80043e8:	4770      	bx	lr

080043ea <__retarget_lock_release_recursive>:
 80043ea:	4770      	bx	lr

080043ec <memcpy>:
 80043ec:	440a      	add	r2, r1
 80043ee:	4291      	cmp	r1, r2
 80043f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f4:	d100      	bne.n	80043f8 <memcpy+0xc>
 80043f6:	4770      	bx	lr
 80043f8:	b510      	push	{r4, lr}
 80043fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004402:	4291      	cmp	r1, r2
 8004404:	d1f9      	bne.n	80043fa <memcpy+0xe>
 8004406:	bd10      	pop	{r4, pc}

08004408 <_free_r>:
 8004408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800440a:	2900      	cmp	r1, #0
 800440c:	d044      	beq.n	8004498 <_free_r+0x90>
 800440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f1a1 0404 	sub.w	r4, r1, #4
 800441a:	bfb8      	it	lt
 800441c:	18e4      	addlt	r4, r4, r3
 800441e:	f000 f8df 	bl	80045e0 <__malloc_lock>
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <_free_r+0x94>)
 8004424:	9801      	ldr	r0, [sp, #4]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x30>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	b003      	add	sp, #12
 8004430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004434:	f000 b8da 	b.w	80045ec <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x46>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x22>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x50>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x46>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1855      	adds	r5, r2, r1
 800445c:	42a5      	cmp	r5, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x70>
 8004460:	6824      	ldr	r4, [r4, #0]
 8004462:	4421      	add	r1, r4
 8004464:	1854      	adds	r4, r2, r1
 8004466:	42a3      	cmp	r3, r4
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x26>
 800446c:	681c      	ldr	r4, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6053      	str	r3, [r2, #4]
 8004472:	440c      	add	r4, r1
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	e7da      	b.n	800442e <_free_r+0x26>
 8004478:	d902      	bls.n	8004480 <_free_r+0x78>
 800447a:	230c      	movs	r3, #12
 800447c:	6003      	str	r3, [r0, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x26>
 8004480:	6825      	ldr	r5, [r4, #0]
 8004482:	1961      	adds	r1, r4, r5
 8004484:	428b      	cmp	r3, r1
 8004486:	bf04      	itt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	bf04      	itt	eq
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7ca      	b.n	800442e <_free_r+0x26>
 8004498:	b003      	add	sp, #12
 800449a:	bd30      	pop	{r4, r5, pc}
 800449c:	200004ac 	.word	0x200004ac

080044a0 <sbrk_aligned>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0e      	ldr	r6, [pc, #56]	; (80044dc <sbrk_aligned+0x3c>)
 80044a4:	460c      	mov	r4, r1
 80044a6:	6831      	ldr	r1, [r6, #0]
 80044a8:	4605      	mov	r5, r0
 80044aa:	b911      	cbnz	r1, 80044b2 <sbrk_aligned+0x12>
 80044ac:	f000 fba6 	bl	8004bfc <_sbrk_r>
 80044b0:	6030      	str	r0, [r6, #0]
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 fba1 	bl	8004bfc <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d00a      	beq.n	80044d4 <sbrk_aligned+0x34>
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d007      	beq.n	80044d8 <sbrk_aligned+0x38>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 fb96 	bl	8004bfc <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d101      	bne.n	80044d8 <sbrk_aligned+0x38>
 80044d4:	f04f 34ff 	mov.w	r4, #4294967295
 80044d8:	4620      	mov	r0, r4
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	200004b0 	.word	0x200004b0

080044e0 <_malloc_r>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	1ccd      	adds	r5, r1, #3
 80044e6:	f025 0503 	bic.w	r5, r5, #3
 80044ea:	3508      	adds	r5, #8
 80044ec:	2d0c      	cmp	r5, #12
 80044ee:	bf38      	it	cc
 80044f0:	250c      	movcc	r5, #12
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	4607      	mov	r7, r0
 80044f6:	db01      	blt.n	80044fc <_malloc_r+0x1c>
 80044f8:	42a9      	cmp	r1, r5
 80044fa:	d905      	bls.n	8004508 <_malloc_r+0x28>
 80044fc:	230c      	movs	r3, #12
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	2600      	movs	r6, #0
 8004502:	4630      	mov	r0, r6
 8004504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045dc <_malloc_r+0xfc>
 800450c:	f000 f868 	bl	80045e0 <__malloc_lock>
 8004510:	f8d8 3000 	ldr.w	r3, [r8]
 8004514:	461c      	mov	r4, r3
 8004516:	bb5c      	cbnz	r4, 8004570 <_malloc_r+0x90>
 8004518:	4629      	mov	r1, r5
 800451a:	4638      	mov	r0, r7
 800451c:	f7ff ffc0 	bl	80044a0 <sbrk_aligned>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	4604      	mov	r4, r0
 8004524:	d155      	bne.n	80045d2 <_malloc_r+0xf2>
 8004526:	f8d8 4000 	ldr.w	r4, [r8]
 800452a:	4626      	mov	r6, r4
 800452c:	2e00      	cmp	r6, #0
 800452e:	d145      	bne.n	80045bc <_malloc_r+0xdc>
 8004530:	2c00      	cmp	r4, #0
 8004532:	d048      	beq.n	80045c6 <_malloc_r+0xe6>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	4631      	mov	r1, r6
 8004538:	4638      	mov	r0, r7
 800453a:	eb04 0903 	add.w	r9, r4, r3
 800453e:	f000 fb5d 	bl	8004bfc <_sbrk_r>
 8004542:	4581      	cmp	r9, r0
 8004544:	d13f      	bne.n	80045c6 <_malloc_r+0xe6>
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	1a6d      	subs	r5, r5, r1
 800454a:	4629      	mov	r1, r5
 800454c:	4638      	mov	r0, r7
 800454e:	f7ff ffa7 	bl	80044a0 <sbrk_aligned>
 8004552:	3001      	adds	r0, #1
 8004554:	d037      	beq.n	80045c6 <_malloc_r+0xe6>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	442b      	add	r3, r5
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	f8d8 3000 	ldr.w	r3, [r8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d038      	beq.n	80045d6 <_malloc_r+0xf6>
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	42a2      	cmp	r2, r4
 8004568:	d12b      	bne.n	80045c2 <_malloc_r+0xe2>
 800456a:	2200      	movs	r2, #0
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e00f      	b.n	8004590 <_malloc_r+0xb0>
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	1b52      	subs	r2, r2, r5
 8004574:	d41f      	bmi.n	80045b6 <_malloc_r+0xd6>
 8004576:	2a0b      	cmp	r2, #11
 8004578:	d917      	bls.n	80045aa <_malloc_r+0xca>
 800457a:	1961      	adds	r1, r4, r5
 800457c:	42a3      	cmp	r3, r4
 800457e:	6025      	str	r5, [r4, #0]
 8004580:	bf18      	it	ne
 8004582:	6059      	strne	r1, [r3, #4]
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	bf08      	it	eq
 8004588:	f8c8 1000 	streq.w	r1, [r8]
 800458c:	5162      	str	r2, [r4, r5]
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	4638      	mov	r0, r7
 8004592:	f104 060b 	add.w	r6, r4, #11
 8004596:	f000 f829 	bl	80045ec <__malloc_unlock>
 800459a:	f026 0607 	bic.w	r6, r6, #7
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	1af2      	subs	r2, r6, r3
 80045a2:	d0ae      	beq.n	8004502 <_malloc_r+0x22>
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	50a3      	str	r3, [r4, r2]
 80045a8:	e7ab      	b.n	8004502 <_malloc_r+0x22>
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	6862      	ldr	r2, [r4, #4]
 80045ae:	d1dd      	bne.n	800456c <_malloc_r+0x8c>
 80045b0:	f8c8 2000 	str.w	r2, [r8]
 80045b4:	e7ec      	b.n	8004590 <_malloc_r+0xb0>
 80045b6:	4623      	mov	r3, r4
 80045b8:	6864      	ldr	r4, [r4, #4]
 80045ba:	e7ac      	b.n	8004516 <_malloc_r+0x36>
 80045bc:	4634      	mov	r4, r6
 80045be:	6876      	ldr	r6, [r6, #4]
 80045c0:	e7b4      	b.n	800452c <_malloc_r+0x4c>
 80045c2:	4613      	mov	r3, r2
 80045c4:	e7cc      	b.n	8004560 <_malloc_r+0x80>
 80045c6:	230c      	movs	r3, #12
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4638      	mov	r0, r7
 80045cc:	f000 f80e 	bl	80045ec <__malloc_unlock>
 80045d0:	e797      	b.n	8004502 <_malloc_r+0x22>
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	e7dc      	b.n	8004590 <_malloc_r+0xb0>
 80045d6:	605b      	str	r3, [r3, #4]
 80045d8:	deff      	udf	#255	; 0xff
 80045da:	bf00      	nop
 80045dc:	200004ac 	.word	0x200004ac

080045e0 <__malloc_lock>:
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <__malloc_lock+0x8>)
 80045e2:	f7ff bf01 	b.w	80043e8 <__retarget_lock_acquire_recursive>
 80045e6:	bf00      	nop
 80045e8:	200004a8 	.word	0x200004a8

080045ec <__malloc_unlock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__malloc_unlock+0x8>)
 80045ee:	f7ff befc 	b.w	80043ea <__retarget_lock_release_recursive>
 80045f2:	bf00      	nop
 80045f4:	200004a8 	.word	0x200004a8

080045f8 <__ssputs_r>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	688e      	ldr	r6, [r1, #8]
 80045fe:	461f      	mov	r7, r3
 8004600:	42be      	cmp	r6, r7
 8004602:	680b      	ldr	r3, [r1, #0]
 8004604:	4682      	mov	sl, r0
 8004606:	460c      	mov	r4, r1
 8004608:	4690      	mov	r8, r2
 800460a:	d82c      	bhi.n	8004666 <__ssputs_r+0x6e>
 800460c:	898a      	ldrh	r2, [r1, #12]
 800460e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004612:	d026      	beq.n	8004662 <__ssputs_r+0x6a>
 8004614:	6965      	ldr	r5, [r4, #20]
 8004616:	6909      	ldr	r1, [r1, #16]
 8004618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800461c:	eba3 0901 	sub.w	r9, r3, r1
 8004620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004624:	1c7b      	adds	r3, r7, #1
 8004626:	444b      	add	r3, r9
 8004628:	106d      	asrs	r5, r5, #1
 800462a:	429d      	cmp	r5, r3
 800462c:	bf38      	it	cc
 800462e:	461d      	movcc	r5, r3
 8004630:	0553      	lsls	r3, r2, #21
 8004632:	d527      	bpl.n	8004684 <__ssputs_r+0x8c>
 8004634:	4629      	mov	r1, r5
 8004636:	f7ff ff53 	bl	80044e0 <_malloc_r>
 800463a:	4606      	mov	r6, r0
 800463c:	b360      	cbz	r0, 8004698 <__ssputs_r+0xa0>
 800463e:	6921      	ldr	r1, [r4, #16]
 8004640:	464a      	mov	r2, r9
 8004642:	f7ff fed3 	bl	80043ec <memcpy>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	81a3      	strh	r3, [r4, #12]
 8004652:	6126      	str	r6, [r4, #16]
 8004654:	6165      	str	r5, [r4, #20]
 8004656:	444e      	add	r6, r9
 8004658:	eba5 0509 	sub.w	r5, r5, r9
 800465c:	6026      	str	r6, [r4, #0]
 800465e:	60a5      	str	r5, [r4, #8]
 8004660:	463e      	mov	r6, r7
 8004662:	42be      	cmp	r6, r7
 8004664:	d900      	bls.n	8004668 <__ssputs_r+0x70>
 8004666:	463e      	mov	r6, r7
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	4632      	mov	r2, r6
 800466c:	4641      	mov	r1, r8
 800466e:	f000 faab 	bl	8004bc8 <memmove>
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	1b9b      	subs	r3, r3, r6
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	4433      	add	r3, r6
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	2000      	movs	r0, #0
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	462a      	mov	r2, r5
 8004686:	f000 fac9 	bl	8004c1c <_realloc_r>
 800468a:	4606      	mov	r6, r0
 800468c:	2800      	cmp	r0, #0
 800468e:	d1e0      	bne.n	8004652 <__ssputs_r+0x5a>
 8004690:	6921      	ldr	r1, [r4, #16]
 8004692:	4650      	mov	r0, sl
 8004694:	f7ff feb8 	bl	8004408 <_free_r>
 8004698:	230c      	movs	r3, #12
 800469a:	f8ca 3000 	str.w	r3, [sl]
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	e7e9      	b.n	8004680 <__ssputs_r+0x88>

080046ac <_svfiprintf_r>:
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	4698      	mov	r8, r3
 80046b2:	898b      	ldrh	r3, [r1, #12]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	b09d      	sub	sp, #116	; 0x74
 80046b8:	4607      	mov	r7, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	4614      	mov	r4, r2
 80046be:	d50e      	bpl.n	80046de <_svfiprintf_r+0x32>
 80046c0:	690b      	ldr	r3, [r1, #16]
 80046c2:	b963      	cbnz	r3, 80046de <_svfiprintf_r+0x32>
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	f7ff ff0b 	bl	80044e0 <_malloc_r>
 80046ca:	6028      	str	r0, [r5, #0]
 80046cc:	6128      	str	r0, [r5, #16]
 80046ce:	b920      	cbnz	r0, 80046da <_svfiprintf_r+0x2e>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	e0d0      	b.n	800487c <_svfiprintf_r+0x1d0>
 80046da:	2340      	movs	r3, #64	; 0x40
 80046dc:	616b      	str	r3, [r5, #20]
 80046de:	2300      	movs	r3, #0
 80046e0:	9309      	str	r3, [sp, #36]	; 0x24
 80046e2:	2320      	movs	r3, #32
 80046e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ec:	2330      	movs	r3, #48	; 0x30
 80046ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004894 <_svfiprintf_r+0x1e8>
 80046f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046f6:	f04f 0901 	mov.w	r9, #1
 80046fa:	4623      	mov	r3, r4
 80046fc:	469a      	mov	sl, r3
 80046fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004702:	b10a      	cbz	r2, 8004708 <_svfiprintf_r+0x5c>
 8004704:	2a25      	cmp	r2, #37	; 0x25
 8004706:	d1f9      	bne.n	80046fc <_svfiprintf_r+0x50>
 8004708:	ebba 0b04 	subs.w	fp, sl, r4
 800470c:	d00b      	beq.n	8004726 <_svfiprintf_r+0x7a>
 800470e:	465b      	mov	r3, fp
 8004710:	4622      	mov	r2, r4
 8004712:	4629      	mov	r1, r5
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ff6f 	bl	80045f8 <__ssputs_r>
 800471a:	3001      	adds	r0, #1
 800471c:	f000 80a9 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004722:	445a      	add	r2, fp
 8004724:	9209      	str	r2, [sp, #36]	; 0x24
 8004726:	f89a 3000 	ldrb.w	r3, [sl]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a1 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004730:	2300      	movs	r3, #0
 8004732:	f04f 32ff 	mov.w	r2, #4294967295
 8004736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473a:	f10a 0a01 	add.w	sl, sl, #1
 800473e:	9304      	str	r3, [sp, #16]
 8004740:	9307      	str	r3, [sp, #28]
 8004742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004746:	931a      	str	r3, [sp, #104]	; 0x68
 8004748:	4654      	mov	r4, sl
 800474a:	2205      	movs	r2, #5
 800474c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004750:	4850      	ldr	r0, [pc, #320]	; (8004894 <_svfiprintf_r+0x1e8>)
 8004752:	f7fb fd45 	bl	80001e0 <memchr>
 8004756:	9a04      	ldr	r2, [sp, #16]
 8004758:	b9d8      	cbnz	r0, 8004792 <_svfiprintf_r+0xe6>
 800475a:	06d0      	lsls	r0, r2, #27
 800475c:	bf44      	itt	mi
 800475e:	2320      	movmi	r3, #32
 8004760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004764:	0711      	lsls	r1, r2, #28
 8004766:	bf44      	itt	mi
 8004768:	232b      	movmi	r3, #43	; 0x2b
 800476a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800476e:	f89a 3000 	ldrb.w	r3, [sl]
 8004772:	2b2a      	cmp	r3, #42	; 0x2a
 8004774:	d015      	beq.n	80047a2 <_svfiprintf_r+0xf6>
 8004776:	9a07      	ldr	r2, [sp, #28]
 8004778:	4654      	mov	r4, sl
 800477a:	2000      	movs	r0, #0
 800477c:	f04f 0c0a 	mov.w	ip, #10
 8004780:	4621      	mov	r1, r4
 8004782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004786:	3b30      	subs	r3, #48	; 0x30
 8004788:	2b09      	cmp	r3, #9
 800478a:	d94d      	bls.n	8004828 <_svfiprintf_r+0x17c>
 800478c:	b1b0      	cbz	r0, 80047bc <_svfiprintf_r+0x110>
 800478e:	9207      	str	r2, [sp, #28]
 8004790:	e014      	b.n	80047bc <_svfiprintf_r+0x110>
 8004792:	eba0 0308 	sub.w	r3, r0, r8
 8004796:	fa09 f303 	lsl.w	r3, r9, r3
 800479a:	4313      	orrs	r3, r2
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	46a2      	mov	sl, r4
 80047a0:	e7d2      	b.n	8004748 <_svfiprintf_r+0x9c>
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	9103      	str	r1, [sp, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bfbb      	ittet	lt
 80047ae:	425b      	neglt	r3, r3
 80047b0:	f042 0202 	orrlt.w	r2, r2, #2
 80047b4:	9307      	strge	r3, [sp, #28]
 80047b6:	9307      	strlt	r3, [sp, #28]
 80047b8:	bfb8      	it	lt
 80047ba:	9204      	strlt	r2, [sp, #16]
 80047bc:	7823      	ldrb	r3, [r4, #0]
 80047be:	2b2e      	cmp	r3, #46	; 0x2e
 80047c0:	d10c      	bne.n	80047dc <_svfiprintf_r+0x130>
 80047c2:	7863      	ldrb	r3, [r4, #1]
 80047c4:	2b2a      	cmp	r3, #42	; 0x2a
 80047c6:	d134      	bne.n	8004832 <_svfiprintf_r+0x186>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	9203      	str	r2, [sp, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bfb8      	it	lt
 80047d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047d8:	3402      	adds	r4, #2
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048a4 <_svfiprintf_r+0x1f8>
 80047e0:	7821      	ldrb	r1, [r4, #0]
 80047e2:	2203      	movs	r2, #3
 80047e4:	4650      	mov	r0, sl
 80047e6:	f7fb fcfb 	bl	80001e0 <memchr>
 80047ea:	b138      	cbz	r0, 80047fc <_svfiprintf_r+0x150>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	eba0 000a 	sub.w	r0, r0, sl
 80047f2:	2240      	movs	r2, #64	; 0x40
 80047f4:	4082      	lsls	r2, r0
 80047f6:	4313      	orrs	r3, r2
 80047f8:	3401      	adds	r4, #1
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	4825      	ldr	r0, [pc, #148]	; (8004898 <_svfiprintf_r+0x1ec>)
 8004802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004806:	2206      	movs	r2, #6
 8004808:	f7fb fcea 	bl	80001e0 <memchr>
 800480c:	2800      	cmp	r0, #0
 800480e:	d038      	beq.n	8004882 <_svfiprintf_r+0x1d6>
 8004810:	4b22      	ldr	r3, [pc, #136]	; (800489c <_svfiprintf_r+0x1f0>)
 8004812:	bb1b      	cbnz	r3, 800485c <_svfiprintf_r+0x1b0>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	3307      	adds	r3, #7
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	3308      	adds	r3, #8
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004822:	4433      	add	r3, r6
 8004824:	9309      	str	r3, [sp, #36]	; 0x24
 8004826:	e768      	b.n	80046fa <_svfiprintf_r+0x4e>
 8004828:	fb0c 3202 	mla	r2, ip, r2, r3
 800482c:	460c      	mov	r4, r1
 800482e:	2001      	movs	r0, #1
 8004830:	e7a6      	b.n	8004780 <_svfiprintf_r+0xd4>
 8004832:	2300      	movs	r3, #0
 8004834:	3401      	adds	r4, #1
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	4619      	mov	r1, r3
 800483a:	f04f 0c0a 	mov.w	ip, #10
 800483e:	4620      	mov	r0, r4
 8004840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004844:	3a30      	subs	r2, #48	; 0x30
 8004846:	2a09      	cmp	r2, #9
 8004848:	d903      	bls.n	8004852 <_svfiprintf_r+0x1a6>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c6      	beq.n	80047dc <_svfiprintf_r+0x130>
 800484e:	9105      	str	r1, [sp, #20]
 8004850:	e7c4      	b.n	80047dc <_svfiprintf_r+0x130>
 8004852:	fb0c 2101 	mla	r1, ip, r1, r2
 8004856:	4604      	mov	r4, r0
 8004858:	2301      	movs	r3, #1
 800485a:	e7f0      	b.n	800483e <_svfiprintf_r+0x192>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <_svfiprintf_r+0x1f4>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4638      	mov	r0, r7
 8004868:	f3af 8000 	nop.w
 800486c:	1c42      	adds	r2, r0, #1
 800486e:	4606      	mov	r6, r0
 8004870:	d1d6      	bne.n	8004820 <_svfiprintf_r+0x174>
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	065b      	lsls	r3, r3, #25
 8004876:	f53f af2d 	bmi.w	80046d4 <_svfiprintf_r+0x28>
 800487a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800487c:	b01d      	add	sp, #116	; 0x74
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	ab03      	add	r3, sp, #12
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	462a      	mov	r2, r5
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <_svfiprintf_r+0x1f4>)
 800488a:	a904      	add	r1, sp, #16
 800488c:	4638      	mov	r0, r7
 800488e:	f000 f879 	bl	8004984 <_printf_i>
 8004892:	e7eb      	b.n	800486c <_svfiprintf_r+0x1c0>
 8004894:	080061b8 	.word	0x080061b8
 8004898:	080061c2 	.word	0x080061c2
 800489c:	00000000 	.word	0x00000000
 80048a0:	080045f9 	.word	0x080045f9
 80048a4:	080061be 	.word	0x080061be

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4616      	mov	r6, r2
 80048ae:	4699      	mov	r9, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bfb8      	it	lt
 80048bc:	4613      	movlt	r3, r2
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c4:	4607      	mov	r7, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b10a      	cbz	r2, 80048ce <_printf_common+0x26>
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	6833      	ldrmi	r3, [r6, #0]
 80048d6:	3302      	addmi	r3, #2
 80048d8:	6033      	strmi	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d106      	bne.n	80048f0 <_printf_common+0x48>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc26      	bgt.n	800493e <_printf_common+0x96>
 80048f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048f4:	1e13      	subs	r3, r2, #0
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	bf18      	it	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d42b      	bmi.n	8004958 <_printf_common+0xb0>
 8004900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004904:	4649      	mov	r1, r9
 8004906:	4638      	mov	r0, r7
 8004908:	47c0      	blx	r8
 800490a:	3001      	adds	r0, #1
 800490c:	d01e      	beq.n	800494c <_printf_common+0xa4>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	f003 0306 	and.w	r3, r3, #6
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf02      	ittt	eq
 800491a:	68e5      	ldreq	r5, [r4, #12]
 800491c:	6833      	ldreq	r3, [r6, #0]
 800491e:	1aed      	subeq	r5, r5, r3
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	bf0c      	ite	eq
 8004924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004928:	2500      	movne	r5, #0
 800492a:	4293      	cmp	r3, r2
 800492c:	bfc4      	itt	gt
 800492e:	1a9b      	subgt	r3, r3, r2
 8004930:	18ed      	addgt	r5, r5, r3
 8004932:	2600      	movs	r6, #0
 8004934:	341a      	adds	r4, #26
 8004936:	42b5      	cmp	r5, r6
 8004938:	d11a      	bne.n	8004970 <_printf_common+0xc8>
 800493a:	2000      	movs	r0, #0
 800493c:	e008      	b.n	8004950 <_printf_common+0xa8>
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4649      	mov	r1, r9
 8004944:	4638      	mov	r0, r7
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xac>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c6      	b.n	80048e6 <_printf_common+0x3e>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c7      	b.n	8004900 <_printf_common+0x58>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4649      	mov	r1, r9
 8004976:	4638      	mov	r0, r7
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xa4>
 800497e:	3601      	adds	r6, #1
 8004980:	e7d9      	b.n	8004936 <_printf_common+0x8e>
	...

08004984 <_printf_i>:
 8004984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	7e0f      	ldrb	r7, [r1, #24]
 800498a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800498c:	2f78      	cmp	r7, #120	; 0x78
 800498e:	4691      	mov	r9, r2
 8004990:	4680      	mov	r8, r0
 8004992:	460c      	mov	r4, r1
 8004994:	469a      	mov	sl, r3
 8004996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800499a:	d807      	bhi.n	80049ac <_printf_i+0x28>
 800499c:	2f62      	cmp	r7, #98	; 0x62
 800499e:	d80a      	bhi.n	80049b6 <_printf_i+0x32>
 80049a0:	2f00      	cmp	r7, #0
 80049a2:	f000 80d4 	beq.w	8004b4e <_printf_i+0x1ca>
 80049a6:	2f58      	cmp	r7, #88	; 0x58
 80049a8:	f000 80c0 	beq.w	8004b2c <_printf_i+0x1a8>
 80049ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049b4:	e03a      	b.n	8004a2c <_printf_i+0xa8>
 80049b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ba:	2b15      	cmp	r3, #21
 80049bc:	d8f6      	bhi.n	80049ac <_printf_i+0x28>
 80049be:	a101      	add	r1, pc, #4	; (adr r1, 80049c4 <_printf_i+0x40>)
 80049c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	080049ad 	.word	0x080049ad
 80049d0:	080049ad 	.word	0x080049ad
 80049d4:	080049ad 	.word	0x080049ad
 80049d8:	080049ad 	.word	0x080049ad
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	080049ad 	.word	0x080049ad
 80049e4:	080049ad 	.word	0x080049ad
 80049e8:	080049ad 	.word	0x080049ad
 80049ec:	080049ad 	.word	0x080049ad
 80049f0:	08004b35 	.word	0x08004b35
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	08004aef 	.word	0x08004aef
 80049fc:	080049ad 	.word	0x080049ad
 8004a00:	080049ad 	.word	0x080049ad
 8004a04:	08004b57 	.word	0x08004b57
 8004a08:	080049ad 	.word	0x080049ad
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	080049ad 	.word	0x080049ad
 8004a14:	080049ad 	.word	0x080049ad
 8004a18:	08004af7 	.word	0x08004af7
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e09f      	b.n	8004b70 <_printf_i+0x1ec>
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	0607      	lsls	r7, r0, #24
 8004a36:	f103 0104 	add.w	r1, r3, #4
 8004a3a:	6029      	str	r1, [r5, #0]
 8004a3c:	d501      	bpl.n	8004a42 <_printf_i+0xbe>
 8004a3e:	681e      	ldr	r6, [r3, #0]
 8004a40:	e003      	b.n	8004a4a <_printf_i+0xc6>
 8004a42:	0646      	lsls	r6, r0, #25
 8004a44:	d5fb      	bpl.n	8004a3e <_printf_i+0xba>
 8004a46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	da03      	bge.n	8004a56 <_printf_i+0xd2>
 8004a4e:	232d      	movs	r3, #45	; 0x2d
 8004a50:	4276      	negs	r6, r6
 8004a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a56:	485a      	ldr	r0, [pc, #360]	; (8004bc0 <_printf_i+0x23c>)
 8004a58:	230a      	movs	r3, #10
 8004a5a:	e012      	b.n	8004a82 <_printf_i+0xfe>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	1d19      	adds	r1, r3, #4
 8004a62:	6029      	str	r1, [r5, #0]
 8004a64:	0605      	lsls	r5, r0, #24
 8004a66:	d501      	bpl.n	8004a6c <_printf_i+0xe8>
 8004a68:	681e      	ldr	r6, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <_printf_i+0xee>
 8004a6c:	0641      	lsls	r1, r0, #25
 8004a6e:	d5fb      	bpl.n	8004a68 <_printf_i+0xe4>
 8004a70:	881e      	ldrh	r6, [r3, #0]
 8004a72:	4853      	ldr	r0, [pc, #332]	; (8004bc0 <_printf_i+0x23c>)
 8004a74:	2f6f      	cmp	r7, #111	; 0x6f
 8004a76:	bf0c      	ite	eq
 8004a78:	2308      	moveq	r3, #8
 8004a7a:	230a      	movne	r3, #10
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a82:	6865      	ldr	r5, [r4, #4]
 8004a84:	60a5      	str	r5, [r4, #8]
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	bfa2      	ittt	ge
 8004a8a:	6821      	ldrge	r1, [r4, #0]
 8004a8c:	f021 0104 	bicge.w	r1, r1, #4
 8004a90:	6021      	strge	r1, [r4, #0]
 8004a92:	b90e      	cbnz	r6, 8004a98 <_printf_i+0x114>
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d04b      	beq.n	8004b30 <_printf_i+0x1ac>
 8004a98:	4615      	mov	r5, r2
 8004a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8004aa2:	5dc7      	ldrb	r7, [r0, r7]
 8004aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aa8:	4637      	mov	r7, r6
 8004aaa:	42bb      	cmp	r3, r7
 8004aac:	460e      	mov	r6, r1
 8004aae:	d9f4      	bls.n	8004a9a <_printf_i+0x116>
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d10b      	bne.n	8004acc <_printf_i+0x148>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	07de      	lsls	r6, r3, #31
 8004ab8:	d508      	bpl.n	8004acc <_printf_i+0x148>
 8004aba:	6923      	ldr	r3, [r4, #16]
 8004abc:	6861      	ldr	r1, [r4, #4]
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	bfde      	ittt	le
 8004ac2:	2330      	movle	r3, #48	; 0x30
 8004ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004acc:	1b52      	subs	r2, r2, r5
 8004ace:	6122      	str	r2, [r4, #16]
 8004ad0:	f8cd a000 	str.w	sl, [sp]
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	aa03      	add	r2, sp, #12
 8004ad8:	4621      	mov	r1, r4
 8004ada:	4640      	mov	r0, r8
 8004adc:	f7ff fee4 	bl	80048a8 <_printf_common>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d14a      	bne.n	8004b7a <_printf_i+0x1f6>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	b004      	add	sp, #16
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f043 0320 	orr.w	r3, r3, #32
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	4833      	ldr	r0, [pc, #204]	; (8004bc4 <_printf_i+0x240>)
 8004af8:	2778      	movs	r7, #120	; 0x78
 8004afa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	6829      	ldr	r1, [r5, #0]
 8004b02:	061f      	lsls	r7, r3, #24
 8004b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b08:	d402      	bmi.n	8004b10 <_printf_i+0x18c>
 8004b0a:	065f      	lsls	r7, r3, #25
 8004b0c:	bf48      	it	mi
 8004b0e:	b2b6      	uxthmi	r6, r6
 8004b10:	07df      	lsls	r7, r3, #31
 8004b12:	bf48      	it	mi
 8004b14:	f043 0320 	orrmi.w	r3, r3, #32
 8004b18:	6029      	str	r1, [r5, #0]
 8004b1a:	bf48      	it	mi
 8004b1c:	6023      	strmi	r3, [r4, #0]
 8004b1e:	b91e      	cbnz	r6, 8004b28 <_printf_i+0x1a4>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	f023 0320 	bic.w	r3, r3, #32
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	2310      	movs	r3, #16
 8004b2a:	e7a7      	b.n	8004a7c <_printf_i+0xf8>
 8004b2c:	4824      	ldr	r0, [pc, #144]	; (8004bc0 <_printf_i+0x23c>)
 8004b2e:	e7e4      	b.n	8004afa <_printf_i+0x176>
 8004b30:	4615      	mov	r5, r2
 8004b32:	e7bd      	b.n	8004ab0 <_printf_i+0x12c>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	6826      	ldr	r6, [r4, #0]
 8004b38:	6961      	ldr	r1, [r4, #20]
 8004b3a:	1d18      	adds	r0, r3, #4
 8004b3c:	6028      	str	r0, [r5, #0]
 8004b3e:	0635      	lsls	r5, r6, #24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0x1c4>
 8004b44:	6019      	str	r1, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0x1ca>
 8004b48:	0670      	lsls	r0, r6, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0x1c0>
 8004b4c:	8019      	strh	r1, [r3, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	4615      	mov	r5, r2
 8004b54:	e7bc      	b.n	8004ad0 <_printf_i+0x14c>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	602a      	str	r2, [r5, #0]
 8004b5c:	681d      	ldr	r5, [r3, #0]
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	2100      	movs	r1, #0
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7fb fb3c 	bl	80001e0 <memchr>
 8004b68:	b108      	cbz	r0, 8004b6e <_printf_i+0x1ea>
 8004b6a:	1b40      	subs	r0, r0, r5
 8004b6c:	6060      	str	r0, [r4, #4]
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	2300      	movs	r3, #0
 8004b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b78:	e7aa      	b.n	8004ad0 <_printf_i+0x14c>
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	462a      	mov	r2, r5
 8004b7e:	4649      	mov	r1, r9
 8004b80:	4640      	mov	r0, r8
 8004b82:	47d0      	blx	sl
 8004b84:	3001      	adds	r0, #1
 8004b86:	d0ad      	beq.n	8004ae4 <_printf_i+0x160>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	079b      	lsls	r3, r3, #30
 8004b8c:	d413      	bmi.n	8004bb6 <_printf_i+0x232>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e7a6      	b.n	8004ae8 <_printf_i+0x164>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	47d0      	blx	sl
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d09d      	beq.n	8004ae4 <_printf_i+0x160>
 8004ba8:	3501      	adds	r5, #1
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	9903      	ldr	r1, [sp, #12]
 8004bae:	1a5b      	subs	r3, r3, r1
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	dcf2      	bgt.n	8004b9a <_printf_i+0x216>
 8004bb4:	e7eb      	b.n	8004b8e <_printf_i+0x20a>
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	f104 0619 	add.w	r6, r4, #25
 8004bbc:	e7f5      	b.n	8004baa <_printf_i+0x226>
 8004bbe:	bf00      	nop
 8004bc0:	080061c9 	.word	0x080061c9
 8004bc4:	080061da 	.word	0x080061da

08004bc8 <memmove>:
 8004bc8:	4288      	cmp	r0, r1
 8004bca:	b510      	push	{r4, lr}
 8004bcc:	eb01 0402 	add.w	r4, r1, r2
 8004bd0:	d902      	bls.n	8004bd8 <memmove+0x10>
 8004bd2:	4284      	cmp	r4, r0
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	d807      	bhi.n	8004be8 <memmove+0x20>
 8004bd8:	1e43      	subs	r3, r0, #1
 8004bda:	42a1      	cmp	r1, r4
 8004bdc:	d008      	beq.n	8004bf0 <memmove+0x28>
 8004bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004be6:	e7f8      	b.n	8004bda <memmove+0x12>
 8004be8:	4402      	add	r2, r0
 8004bea:	4601      	mov	r1, r0
 8004bec:	428a      	cmp	r2, r1
 8004bee:	d100      	bne.n	8004bf2 <memmove+0x2a>
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bfa:	e7f7      	b.n	8004bec <memmove+0x24>

08004bfc <_sbrk_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	; (8004c18 <_sbrk_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fd f8c2 	bl	8001d90 <_sbrk>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_sbrk_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_sbrk_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	200004a4 	.word	0x200004a4

08004c1c <_realloc_r>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	4680      	mov	r8, r0
 8004c22:	4614      	mov	r4, r2
 8004c24:	460e      	mov	r6, r1
 8004c26:	b921      	cbnz	r1, 8004c32 <_realloc_r+0x16>
 8004c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	f7ff bc57 	b.w	80044e0 <_malloc_r>
 8004c32:	b92a      	cbnz	r2, 8004c40 <_realloc_r+0x24>
 8004c34:	f7ff fbe8 	bl	8004408 <_free_r>
 8004c38:	4625      	mov	r5, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	f000 f81b 	bl	8004c7a <_malloc_usable_size_r>
 8004c44:	4284      	cmp	r4, r0
 8004c46:	4607      	mov	r7, r0
 8004c48:	d802      	bhi.n	8004c50 <_realloc_r+0x34>
 8004c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c4e:	d812      	bhi.n	8004c76 <_realloc_r+0x5a>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fc44 	bl	80044e0 <_malloc_r>
 8004c58:	4605      	mov	r5, r0
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d0ed      	beq.n	8004c3a <_realloc_r+0x1e>
 8004c5e:	42bc      	cmp	r4, r7
 8004c60:	4622      	mov	r2, r4
 8004c62:	4631      	mov	r1, r6
 8004c64:	bf28      	it	cs
 8004c66:	463a      	movcs	r2, r7
 8004c68:	f7ff fbc0 	bl	80043ec <memcpy>
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fbca 	bl	8004408 <_free_r>
 8004c74:	e7e1      	b.n	8004c3a <_realloc_r+0x1e>
 8004c76:	4635      	mov	r5, r6
 8004c78:	e7df      	b.n	8004c3a <_realloc_r+0x1e>

08004c7a <_malloc_usable_size_r>:
 8004c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c7e:	1f18      	subs	r0, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbc      	itt	lt
 8004c84:	580b      	ldrlt	r3, [r1, r0]
 8004c86:	18c0      	addlt	r0, r0, r3
 8004c88:	4770      	bx	lr
	...

08004c8c <_init>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr

08004c98 <_fini>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr
