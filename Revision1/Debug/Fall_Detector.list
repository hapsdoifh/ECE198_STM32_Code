
Fall_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001530  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800553c  0800553c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005544  08005544  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800554c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000078  080055c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080055c4  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a626  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb0  00000000  00000000  0002a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f6  00000000  00000000  0002ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164a3  00000000  00000000  0002d62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf5d  00000000  00000000  00043ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c1d  00000000  00000000  00050a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc4  00000000  00000000  000d864c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000db610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ff4 	.word	0x08003ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003ff4 	.word	0x08003ff4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b3f      	cmp	r3, #63	; 0x3f
 8000590:	d901      	bls.n	8000596 <writeRegister+0x1a>
		address = 63;
 8000592:	233f      	movs	r3, #63	; 0x3f
 8000594:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <writeRegister+0x58>)
 80005a6:	f001 fa1f 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005aa:	1df9      	adds	r1, r7, #7
 80005ac:	230a      	movs	r3, #10
 80005ae:	2201      	movs	r2, #1
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <writeRegister+0x5c>)
 80005b2:	f002 fb5c 	bl	8002c6e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 80005b6:	1db9      	adds	r1, r7, #6
 80005b8:	230a      	movs	r3, #10
 80005ba:	2201      	movs	r2, #1
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <writeRegister+0x5c>)
 80005be:	f002 fb56 	bl	8002c6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <writeRegister+0x58>)
 80005c8:	f001 fa0e 	bl	80019e8 <HAL_GPIO_WritePin>
	

}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400
 80005d8:	200000f4 	.word	0x200000f4

080005dc <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b3f      	cmp	r3, #63	; 0x3f
 80005f0:	d901      	bls.n	80005f6 <readRegister+0x1a>
		address = 63;
 80005f2:	233f      	movs	r3, #63	; 0x3f
 80005f4:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d905      	bls.n	8000608 <readRegister+0x2c>
		address |= 0x40;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000602:	b2db      	uxtb	r3, r3
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e004      	b.n	8000612 <readRegister+0x36>
		else	
		address &= ~(0x40);
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800060e:	b2db      	uxtb	r3, r3
 8000610:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000618:	b2db      	uxtb	r3, r3
 800061a:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <readRegister+0x78>)
 8000622:	f001 f9e1 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	230a      	movs	r3, #10
 800062a:	2201      	movs	r2, #1
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <readRegister+0x7c>)
 800062e:	f002 fb1e 	bl	8002c6e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	b29a      	uxth	r2, r3
 8000636:	230a      	movs	r3, #10
 8000638:	6839      	ldr	r1, [r7, #0]
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <readRegister+0x7c>)
 800063c:	f002 fc53 	bl	8002ee6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <readRegister+0x78>)
 8000646:	f001 f9cf 	bl	80019e8 <HAL_GPIO_WritePin>
	
	
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400
 8000658:	200000f4 	.word	0x200000f4

0800065c <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	4619      	mov	r1, r3
 800066c:	202c      	movs	r0, #44	; 0x2c
 800066e:	f7ff ff85 	bl	800057c <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d11a      	bne.n	80006b0 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	2b06      	cmp	r3, #6
 8000688:	d807      	bhi.n	800069a <adxlBW+0x3e>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	2b0c      	cmp	r3, #12
 8000690:	d903      	bls.n	800069a <adxlBW+0x3e>
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3307      	adds	r3, #7
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e004      	b.n	80006a4 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	78da      	ldrb	r2, [r3, #3]
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4413      	add	r3, r2
 80006a2:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	4619      	mov	r1, r3
 80006a8:	202c      	movs	r0, #44	; 0x2c
 80006aa:	f7ff ff67 	bl	800057c <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 80006ae:	e015      	b.n	80006dc <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	d807      	bhi.n	80006c8 <adxlBW+0x6c>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d903      	bls.n	80006c8 <adxlBW+0x6c>
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	3306      	adds	r3, #6
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e004      	b.n	80006d2 <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	78da      	ldrb	r2, [r3, #3]
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	4413      	add	r3, r2
 80006d0:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4619      	mov	r1, r3
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f7ff ff50 	bl	800057c <writeRegister>
		}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	4619      	mov	r1, r3
 80006f4:	2031      	movs	r0, #49	; 0x31
 80006f6:	f7ff ff41 	bl	800057c <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	b25a      	sxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	015b      	lsls	r3, r3, #5
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b25a      	sxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b25a      	sxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	795b      	ldrb	r3, [r3, #5]
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	b25b      	sxtb	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b25b      	sxtb	r3, r3
 8000726:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791a      	ldrb	r2, [r3, #4]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	4413      	add	r3, r2
 8000730:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4619      	mov	r1, r3
 8000736:	2031      	movs	r0, #49	; 0x31
 8000738:	f7ff ff20 	bl	800057c <writeRegister>
			}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <ADXL_Init+0x13c>)
 8000752:	f001 f949 	bl	80019e8 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000756:	2005      	movs	r0, #5
 8000758:	f000 feb8 	bl	80014cc <HAL_Delay>
	uint8_t testval = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 8000760:	f107 030f 	add.w	r3, r7, #15
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff37 	bl	80005dc <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2be5      	cmp	r3, #229	; 0xe5
 8000772:	d001      	beq.n	8000778 <ADXL_Init+0x34>
 8000774:	2301      	movs	r3, #1
 8000776:	e07f      	b.n	8000878 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff6f 	bl	800065c <adxlBW>
	adxlFormat(adxl);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffb0 	bl	80006e4 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d13f      	bne.n	800080c <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d846      	bhi.n	8000822 <ADXL_Init+0xde>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <ADXL_Init+0x58>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007c5 	.word	0x080007c5
 80007a4:	080007dd 	.word	0x080007dd
 80007a8:	080007f5 	.word	0x080007f5
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <ADXL_Init+0x140>)
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <ADXL_Init+0x144>)
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <ADXL_Init+0x140>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <ADXL_Init+0x148>)
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <ADXL_Init+0x148>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a34      	ldr	r2, [pc, #208]	; (8000890 <ADXL_Init+0x14c>)
 80007c0:	6013      	str	r3, [r2, #0]
								break;
 80007c2:	e02e      	b.n	8000822 <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <ADXL_Init+0x140>)
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <ADXL_Init+0x150>)
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <ADXL_Init+0x140>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <ADXL_Init+0x148>)
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <ADXL_Init+0x148>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <ADXL_Init+0x14c>)
 80007d8:	6013      	str	r3, [r2, #0]
								break;
 80007da:	e022      	b.n	8000822 <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <ADXL_Init+0x140>)
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <ADXL_Init+0x154>)
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <ADXL_Init+0x140>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <ADXL_Init+0x148>)
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <ADXL_Init+0x148>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <ADXL_Init+0x14c>)
 80007f0:	6013      	str	r3, [r2, #0]
								break;
 80007f2:	e016      	b.n	8000822 <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <ADXL_Init+0x140>)
 80007f6:	4a29      	ldr	r2, [pc, #164]	; (800089c <ADXL_Init+0x158>)
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <ADXL_Init+0x140>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <ADXL_Init+0x148>)
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <ADXL_Init+0x148>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <ADXL_Init+0x14c>)
 8000808:	6013      	str	r3, [r2, #0]
								break;
 800080a:	e00a      	b.n	8000822 <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <ADXL_Init+0x140>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <ADXL_Init+0x144>)
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <ADXL_Init+0x140>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <ADXL_Init+0x148>)
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <ADXL_Init+0x148>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <ADXL_Init+0x14c>)
 8000820:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8000822:	f107 030e 	add.w	r3, r7, #14
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	202d      	movs	r0, #45	; 0x2d
 800082c:	f7ff fed6 	bl	80005dc <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	79db      	ldrb	r3, [r3, #7]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d105      	bne.n	8000844 <ADXL_Init+0x100>
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	e004      	b.n	800084e <ADXL_Init+0x10a>
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	f023 0310 	bic.w	r3, r3, #16
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7a1b      	ldrb	r3, [r3, #8]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d105      	bne.n	8000862 <ADXL_Init+0x11e>
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73bb      	strb	r3, [r7, #14]
 8000860:	e004      	b.n	800086c <ADXL_Init+0x128>
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	f023 0320 	bic.w	r3, r3, #32
 8000868:	b2db      	uxtb	r3, r3
 800086a:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	4619      	mov	r1, r3
 8000870:	202d      	movs	r0, #45	; 0x2d
 8000872:	f7ff fe83 	bl	800057c <writeRegister>
			
	return ADXL_OK;
 8000876:	2300      	movs	r3, #0
	
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40020400 	.word	0x40020400
 8000884:	2000009c 	.word	0x2000009c
 8000888:	3b808081 	.word	0x3b808081
 800088c:	20000098 	.word	0x20000098
 8000890:	20000094 	.word	0x20000094
 8000894:	3c010204 	.word	0x3c010204
 8000898:	3c820821 	.word	0x3c820821
 800089c:	3d042108 	.word	0x3d042108

080008a0 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 80008ac:	4a40      	ldr	r2, [pc, #256]	; (80009b0 <ADXL_getAccel+0x110>)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	6018      	str	r0, [r3, #0]
 80008b8:	3304      	adds	r3, #4
 80008ba:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2206      	movs	r2, #6
 80008c2:	4619      	mov	r1, r3
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f7ff fe89 	bl	80005dc <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d125      	bne.n	800091c <ADXL_getAccel+0x7c>
		{
		int16_t * acc = Data;	
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 80008d4:	7a7b      	ldrb	r3, [r7, #9]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b29a      	uxth	r2, r3
 80008dc:	7a3b      	ldrb	r3, [r7, #8]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	7abb      	ldrb	r3, [r7, #10]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	3302      	adds	r3, #2
 80008fe:	b212      	sxth	r2, r2
 8000900:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	b29b      	uxth	r3, r3
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	7b3b      	ldrb	r3, [r7, #12]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29a      	uxth	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3304      	adds	r3, #4
 8000916:	b212      	sxth	r2, r2
 8000918:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 800091a:	e045      	b.n	80009a8 <ADXL_getAccel+0x108>
	else if (outputType == OUTPUT_FLOAT)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d142      	bne.n	80009a8 <ADXL_getAccel+0x108>
						float * fdata = Data;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8000926:	7a7b      	ldrb	r3, [r7, #9]
 8000928:	b29b      	uxth	r3, r3
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b29a      	uxth	r2, r3
 800092e:	7a3b      	ldrb	r3, [r7, #8]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21b      	sxth	r3, r3
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <ADXL_getAccel+0x114>)
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8000950:	7afb      	ldrb	r3, [r7, #11]
 8000952:	b29b      	uxth	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b29a      	uxth	r2, r3
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	b29b      	uxth	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	b21b      	sxth	r3, r3
 8000962:	ee07 3a90 	vmov	s15, r3
 8000966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <ADXL_getAccel+0x118>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3304      	adds	r3, #4
 8000974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000978:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b29b      	uxth	r3, r3
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b29a      	uxth	r2, r3
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b29b      	uxth	r3, r3
 800098c:	b21b      	sxth	r3, r3
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <ADXL_getAccel+0x11c>)
 8000998:	edd3 7a00 	vldr	s15, [r3]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3308      	adds	r3, #8
 80009a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a4:	edc3 7a00 	vstr	s15, [r3]
	}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	0800400c 	.word	0x0800400c
 80009b4:	20000094 	.word	0x20000094
 80009b8:	20000098 	.word	0x20000098
 80009bc:	2000009c 	.word	0x2000009c

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b093      	sub	sp, #76	; 0x4c
 80009c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fd0f 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f867 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f935 	bl	8000c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d2:	f000 f8cd 	bl	8000b70 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009d6:	f000 f8f9 	bl	8000bcc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADXL_Init(&InitInf);
 80009da:	482a      	ldr	r0, [pc, #168]	; (8000a84 <main+0xc4>)
 80009dc:	f7ff feb2 	bl	8000744 <ADXL_Init>
  ssd1306_Init();
 80009e0:	f000 f9ac 	bl	8000d3c <ssd1306_Init>
  ssd1306_Fill(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fa13 	bl	8000e10 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80009ea:	f000 fa35 	bl	8000e58 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(5,5);
 80009ee:	2105      	movs	r1, #5
 80009f0:	2005      	movs	r0, #5
 80009f2:	f000 fb5b 	bl	80010ac <ssd1306_SetCursor>
  ssd1306_WriteString("Testing",Font_11x18,0x01);
 80009f6:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <main+0xc8>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	ca06      	ldmia	r2, {r1, r2}
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <main+0xcc>)
 80009fe:	f000 fb2f 	bl	8001060 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000a02:	f000 fa29 	bl	8000e58 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char oledOut[50];
  while (1)
  {
	int16_t data[4] = {0,0,0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
	ADXL_getAccel(data,OUTPUT_SIGNED);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2101      	movs	r1, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff44 	bl	80008a0 <ADXL_getAccel>
	sprintf(oledOut, "%d,%d,%d", data[0]/255,data[1]/255,data[2]/255);
 8000a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <main+0xd0>)
 8000a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a22:	441a      	add	r2, r3
 8000a24:	11d2      	asrs	r2, r2, #7
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <main+0xd0>)
 8000a34:	fb82 0203 	smull	r0, r2, r2, r3
 8000a38:	441a      	add	r2, r3
 8000a3a:	11d2      	asrs	r2, r2, #7
 8000a3c:	17db      	asrs	r3, r3, #31
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	461c      	mov	r4, r3
 8000a44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a48:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <main+0xd0>)
 8000a4a:	fb82 0203 	smull	r0, r2, r2, r3
 8000a4e:	441a      	add	r2, r3
 8000a50:	11d2      	asrs	r2, r2, #7
 8000a52:	17db      	asrs	r3, r3, #31
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	f107 000c 	add.w	r0, r7, #12
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4623      	mov	r3, r4
 8000a60:	460a      	mov	r2, r1
 8000a62:	490c      	ldr	r1, [pc, #48]	; (8000a94 <main+0xd4>)
 8000a64:	f002 fe22 	bl	80036ac <siprintf>
	//sprintf(oledOut, "%d,%d,%d", !data[0]+1,!data[1]+1,!data[2]+1);
	//ssd1306_Fill(0x00);
	ssd1306_SetCursor(5,5);
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2005      	movs	r0, #5
 8000a6c:	f000 fb1e 	bl	80010ac <ssd1306_SetCursor>
	ssd1306_WriteString(oledOut,Font_7x10,0x01);
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <main+0xd8>)
 8000a72:	f107 000c 	add.w	r0, r7, #12
 8000a76:	2301      	movs	r3, #1
 8000a78:	ca06      	ldmia	r2, {r1, r2}
 8000a7a:	f000 faf1 	bl	8001060 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a7e:	f000 f9eb 	bl	8000e58 <ssd1306_UpdateScreen>
  {
 8000a82:	e7c0      	b.n	8000a06 <main+0x46>
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	08004014 	.word	0x08004014
 8000a90:	80808081 	.word	0x80808081
 8000a94:	0800401c 	.word	0x0800401c
 8000a98:	2000000c 	.word	0x2000000c

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fe1e 	bl	80036ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <SystemClock_Config+0xcc>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <SystemClock_Config+0xd0>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b10:	2308      	movs	r3, #8
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b14:	2340      	movs	r3, #64	; 0x40
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fbd5 	bl	80022d4 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b30:	f000 f8c6 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000b3c:	2390      	movs	r3, #144	; 0x90
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fe37 	bl	80027c4 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b5c:	f000 f8b0 	bl	8000cc0 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	; 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <MX_I2C1_Init+0x54>)
 8000b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x58>)
 8000b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000bae:	f000 ff35 	bl	8001a1c <HAL_I2C_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb8:	f000 f882 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000a0 	.word	0x200000a0
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	000186a0 	.word	0x000186a0

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bd2:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <MX_SPI1_Init+0x6c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000be4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c02:	2218      	movs	r2, #24
 8000c04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000c20:	f001 ff9c 	bl	8002b5c <HAL_SPI_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c2a:	f000 f849 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000f4 	.word	0x200000f4
 8000c38:	40013000 	.word	0x40013000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x7c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	480b      	ldr	r0, [pc, #44]	; (8000cbc <MX_GPIO_Init+0x80>)
 8000c90:	f000 feaa 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GPIO_Init+0x80>)
 8000cac:	f000 fd18 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>

08000cca <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af04      	add	r7, sp, #16
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2178      	movs	r1, #120	; 0x78
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <ssd1306_WriteCommand+0x2c>)
 8000cf8:	f000 ffd4 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200000a0 	.word	0x200000a0

08000d08 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1a:	9202      	str	r2, [sp, #8]
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	2178      	movs	r1, #120	; 0x78
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <ssd1306_WriteData+0x30>)
 8000d2a:	f000 ffbb 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000a0 	.word	0x200000a0

08000d3c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000d40:	f7ff ffc3 	bl	8000cca <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d44:	2064      	movs	r0, #100	; 0x64
 8000d46:	f000 fbc1 	bl	80014cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f9da 	bl	8001104 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d50:	2020      	movs	r0, #32
 8000d52:	f7ff ffc1 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffbe 	bl	8000cd8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d5c:	20b0      	movs	r0, #176	; 0xb0
 8000d5e:	f7ff ffbb 	bl	8000cd8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d62:	20c8      	movs	r0, #200	; 0xc8
 8000d64:	f7ff ffb8 	bl	8000cd8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ffb5 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f7ff ffb2 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d74:	2040      	movs	r0, #64	; 0x40
 8000d76:	f7ff ffaf 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d7a:	20ff      	movs	r0, #255	; 0xff
 8000d7c:	f000 f9ae 	bl	80010dc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d80:	20a1      	movs	r0, #161	; 0xa1
 8000d82:	f7ff ffa9 	bl	8000cd8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d86:	20a6      	movs	r0, #166	; 0xa6
 8000d88:	f7ff ffa6 	bl	8000cd8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d8c:	20a8      	movs	r0, #168	; 0xa8
 8000d8e:	f7ff ffa3 	bl	8000cd8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000d92:	201f      	movs	r0, #31
 8000d94:	f7ff ffa0 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d98:	20a4      	movs	r0, #164	; 0xa4
 8000d9a:	f7ff ff9d 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d9e:	20d3      	movs	r0, #211	; 0xd3
 8000da0:	f7ff ff9a 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff97 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000daa:	20d5      	movs	r0, #213	; 0xd5
 8000dac:	f7ff ff94 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000db0:	20f0      	movs	r0, #240	; 0xf0
 8000db2:	f7ff ff91 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000db6:	20d9      	movs	r0, #217	; 0xd9
 8000db8:	f7ff ff8e 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000dbc:	2022      	movs	r0, #34	; 0x22
 8000dbe:	f7ff ff8b 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000dc2:	20da      	movs	r0, #218	; 0xda
 8000dc4:	f7ff ff88 	bl	8000cd8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff ff85 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000dce:	20db      	movs	r0, #219	; 0xdb
 8000dd0:	f7ff ff82 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000dd4:	2020      	movs	r0, #32
 8000dd6:	f7ff ff7f 	bl	8000cd8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000dda:	208d      	movs	r0, #141	; 0x8d
 8000ddc:	f7ff ff7c 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000de0:	2014      	movs	r0, #20
 8000de2:	f7ff ff79 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f98c 	bl	8001104 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f80f 	bl	8000e10 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000df2:	f000 f831 	bl	8000e58 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <ssd1306_Init+0xd0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <ssd1306_Init+0xd0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000e02:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <ssd1306_Init+0xd0>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	711a      	strb	r2, [r3, #4]
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000034c 	.word	0x2000034c

08000e10 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e00d      	b.n	8000e3c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <ssd1306_Fill+0x1a>
 8000e26:	2100      	movs	r1, #0
 8000e28:	e000      	b.n	8000e2c <ssd1306_Fill+0x1c>
 8000e2a:	21ff      	movs	r1, #255	; 0xff
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <ssd1306_Fill+0x44>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4413      	add	r3, r2
 8000e32:	460a      	mov	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e42:	d3ed      	bcc.n	8000e20 <ssd1306_Fill+0x10>
    }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000014c 	.word	0x2000014c

08000e58 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e016      	b.n	8000e92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b50      	subs	r3, #80	; 0x50
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff34 	bl	8000cd8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ff31 	bl	8000cd8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e76:	2010      	movs	r0, #16
 8000e78:	f7ff ff2e 	bl	8000cd8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	01db      	lsls	r3, r3, #7
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <ssd1306_UpdateScreen+0x4c>)
 8000e82:	4413      	add	r3, r2
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff3e 	bl	8000d08 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d9e5      	bls.n	8000e64 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000014c 	.word	0x2000014c

08000ea8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db3d      	blt.n	8000f3e <ssd1306_DrawPixel+0x96>
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b1f      	cmp	r3, #31
 8000ec6:	d83a      	bhi.n	8000f3e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d11a      	bne.n	8000f04 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	01db      	lsls	r3, r3, #7
 8000eda:	4413      	add	r3, r2
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <ssd1306_DrawPixel+0xa4>)
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b259      	sxtb	r1, r3
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	01db      	lsls	r3, r3, #7
 8000efa:	4413      	add	r3, r2
 8000efc:	b2c9      	uxtb	r1, r1
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <ssd1306_DrawPixel+0xa4>)
 8000f00:	54d1      	strb	r1, [r2, r3]
 8000f02:	e01d      	b.n	8000f40 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	b2d8      	uxtb	r0, r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	01db      	lsls	r3, r3, #7
 8000f10:	4413      	add	r3, r2
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <ssd1306_DrawPixel+0xa4>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	b25a      	sxtb	r2, r3
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	b259      	sxtb	r1, r3
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4603      	mov	r3, r0
 8000f32:	01db      	lsls	r3, r3, #7
 8000f34:	4413      	add	r3, r2
 8000f36:	b2c9      	uxtb	r1, r1
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <ssd1306_DrawPixel+0xa4>)
 8000f3a:	54d1      	strb	r1, [r2, r3]
 8000f3c:	e000      	b.n	8000f40 <ssd1306_DrawPixel+0x98>
        return;
 8000f3e:	bf00      	nop
    }
}
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000014c 	.word	0x2000014c

08000f50 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	1d38      	adds	r0, r7, #4
 8000f5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4623      	mov	r3, r4
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	4613      	mov	r3, r2
 8000f66:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b1f      	cmp	r3, #31
 8000f6c:	d902      	bls.n	8000f74 <ssd1306_WriteChar+0x24>
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b7e      	cmp	r3, #126	; 0x7e
 8000f72:	d901      	bls.n	8000f78 <ssd1306_WriteChar+0x28>
        return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e06d      	b.n	8001054 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <ssd1306_WriteChar+0x10c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	2b80      	cmp	r3, #128	; 0x80
 8000f84:	dc06      	bgt.n	8000f94 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <ssd1306_WriteChar+0x10c>)
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	797b      	ldrb	r3, [r7, #5]
 8000f8e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	dd01      	ble.n	8000f98 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e05d      	b.n	8001054 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	e04c      	b.n	8001038 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3b20      	subs	r3, #32
 8000fa4:	7979      	ldrb	r1, [r7, #5]
 8000fa6:	fb01 f303 	mul.w	r3, r1, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	e034      	b.n	8001028 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d012      	beq.n	8000ff4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <ssd1306_WriteChar+0x10c>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <ssd1306_WriteChar+0x10c>)
 8000fde:	885b      	ldrh	r3, [r3, #2]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff ff5b 	bl	8000ea8 <ssd1306_DrawPixel>
 8000ff2:	e016      	b.n	8001022 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <ssd1306_WriteChar+0x10c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	b2d8      	uxtb	r0, r3
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <ssd1306_WriteChar+0x10c>)
 8001004:	885b      	ldrh	r3, [r3, #2]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b2d9      	uxtb	r1, r3
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff ff43 	bl	8000ea8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	3301      	adds	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	793b      	ldrb	r3, [r7, #4]
 800102a:	461a      	mov	r2, r3
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	4293      	cmp	r3, r2
 8001030:	d3c5      	bcc.n	8000fbe <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	797b      	ldrb	r3, [r7, #5]
 800103a:	461a      	mov	r2, r3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4293      	cmp	r3, r2
 8001040:	d3ad      	bcc.n	8000f9e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <ssd1306_WriteChar+0x10c>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	793b      	ldrb	r3, [r7, #4]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <ssd1306_WriteChar+0x10c>)
 8001050:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	2000034c 	.word	0x2000034c

08001060 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	1d38      	adds	r0, r7, #4
 800106a:	e880 0006 	stmia.w	r0, {r1, r2}
 800106e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001070:	e012      	b.n	8001098 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	7818      	ldrb	r0, [r3, #0]
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	1d3a      	adds	r2, r7, #4
 800107a:	ca06      	ldmia	r2, {r1, r2}
 800107c:	f7ff ff68 	bl	8000f50 <ssd1306_WriteChar>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d002      	beq.n	8001092 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e008      	b.n	80010a4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e8      	bne.n	8001072 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <ssd1306_SetCursor+0x2c>)
 80010c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <ssd1306_SetCursor+0x2c>)
 80010ca:	805a      	strh	r2, [r3, #2]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	2000034c 	.word	0x2000034c

080010dc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80010e6:	2381      	movs	r3, #129	; 0x81
 80010e8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fdf3 	bl	8000cd8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fdef 	bl	8000cd8 <ssd1306_WriteCommand>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001114:	23af      	movs	r3, #175	; 0xaf
 8001116:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <ssd1306_SetDisplayOn+0x38>)
 800111a:	2201      	movs	r2, #1
 800111c:	715a      	strb	r2, [r3, #5]
 800111e:	e004      	b.n	800112a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001120:	23ae      	movs	r3, #174	; 0xae
 8001122:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <ssd1306_SetDisplayOn+0x38>)
 8001126:	2200      	movs	r2, #0
 8001128:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fdd3 	bl	8000cd8 <ssd1306_WriteCommand>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000034c 	.word	0x2000034c

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_MspInit+0x4c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_MspInit+0x4c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_I2C_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12c      	bne.n	800120c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_I2C_MspInit+0x8c>)
 80011ec:	f000 fa78 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_I2C_MspInit+0x88>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005400 	.word	0x40005400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_SPI_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_SPI_MspInit+0x8c>)
 8001296:	f000 fa23 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f8c6 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f002 f9e2 	bl	80036fc <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20018000 	.word	0x20018000
 8001364:	00000400 	.word	0x00000400
 8001368:	20000354 	.word	0x20000354
 800136c:	200004a8 	.word	0x200004a8

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139a:	490e      	ldr	r1, [pc, #56]	; (80013d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b0:	4c0b      	ldr	r4, [pc, #44]	; (80013e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013be:	f7ff ffd7 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f002 f9a1 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c6:	f7ff fafb 	bl	80009c0 <main>
  bx  lr    
 80013ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013d8:	0800554c 	.word	0x0800554c
  ldr r2, =_sbss
 80013dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013e0:	200004a4 	.word	0x200004a4

080013e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_Init+0x40>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_Init+0x40>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x40>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f931 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fe90 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f93b 	bl	80016c6 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f911 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000001c 	.word	0x2000001c
 8001484:	20000024 	.word	0x20000024
 8001488:	20000020 	.word	0x20000020

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000024 	.word	0x20000024
 80014b0:	20000358 	.word	0x20000358

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000358 	.word	0x20000358

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000024 	.word	0x20000024

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff47 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff5c 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffb0 	bl	8001634 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a46      	ldr	r2, [pc, #280]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e12b      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fba4 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a80:	f001 f858 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a81      	ldr	r2, [pc, #516]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d807      	bhi.n	8001aa0 <HAL_I2C_Init+0x84>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a80      	ldr	r2, [pc, #512]	; (8001c94 <HAL_I2C_Init+0x278>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e006      	b.n	8001aae <HAL_I2C_Init+0x92>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7d      	ldr	r2, [pc, #500]	; (8001c98 <HAL_I2C_Init+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_I2C_Init+0x280>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d802      	bhi.n	8001af0 <HAL_I2C_Init+0xd4>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	e009      	b.n	8001b04 <HAL_I2C_Init+0xe8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_I2C_Init+0x284>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	495c      	ldr	r1, [pc, #368]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001b20:	428b      	cmp	r3, r1
 8001b22:	d819      	bhi.n	8001b58 <HAL_I2C_Init+0x13c>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e59      	subs	r1, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b38:	400b      	ands	r3, r1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_I2C_Init+0x138>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e59      	subs	r1, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	e051      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e04f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_I2C_Init+0x168>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Init+0x18e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Init+0x196>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e022      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_I2C_Init+0x1bc>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e58      	subs	r0, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	e00f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6911      	ldr	r1, [r2, #16]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	000186a0 	.word	0x000186a0
 8001c94:	001e847f 	.word	0x001e847f
 8001c98:	003d08ff 	.word	0x003d08ff
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	813b      	strh	r3, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbe:	f7ff fbf9 	bl	80014b4 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	f040 80d9 	bne.w	8001e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2319      	movs	r3, #25
 8001cd8:	2201      	movs	r2, #1
 8001cda:	496d      	ldr	r1, [pc, #436]	; (8001e90 <HAL_I2C_Mem_Write+0x1ec>)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f971 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0cc      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2C_Mem_Write+0x56>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0c5      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d007      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2221      	movs	r2, #33	; 0x21
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_I2C_Mem_Write+0x1f0>)
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d62:	88f8      	ldrh	r0, [r7, #6]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	8979      	ldrh	r1, [r7, #10]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f890 	bl	8001e98 <I2C_RequestMemoryWrite>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d052      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e081      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f9f2 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d107      	bne.n	8001daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x180>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1aa      	bne.n	8001d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f9de 	bl	80021f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e016      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	00100002 	.word	0x00100002
 8001e94:	ffff0000 	.word	0xffff0000

08001e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f878 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d103      	bne.n	8001ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e05f      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	492d      	ldr	r1, [pc, #180]	; (8001fc0 <I2C_RequestMemoryWrite+0x128>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f8b0 	bl	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e04c      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f91a 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d107      	bne.n	8001f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e02b      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f64:	893b      	ldrh	r3, [r7, #8]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	e021      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8f4 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e005      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00010002 	.word	0x00010002

08001fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	e025      	b.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d021      	beq.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff fa69 	bl	80014b4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d116      	bne.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e023      	b.n	800206a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10d      	bne.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4013      	ands	r3, r2
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	e00c      	b.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	d0b6      	beq.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002080:	e051      	b.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002090:	d123      	bne.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f043 0204 	orr.w	r2, r3, #4
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e046      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d021      	beq.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7ff f9e7 	bl	80014b4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e020      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10c      	bne.n	800214a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e00b      	b.n	8002162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d18d      	bne.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217c:	e02d      	b.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f878 	bl	8002274 <I2C_IsAcknowledgeFailed>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e02d      	b.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d021      	beq.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f98d 	bl	80014b4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d116      	bne.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e007      	b.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d1ca      	bne.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021fe:	e02d      	b.n	800225c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f837 	bl	8002274 <I2C_IsAcknowledgeFailed>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e02d      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d021      	beq.n	800225c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7ff f94c 	bl	80014b4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e007      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b04      	cmp	r3, #4
 8002268:	d1ca      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d11b      	bne.n	80022c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e267      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d075      	beq.n	80023de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <HAL_RCC_OscConfig+0x108>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d157      	bne.n	80023dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e242      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x74>
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6f      	ldr	r2, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 800236c:	4b69      	ldr	r3, [pc, #420]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a68      	ldr	r2, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f892 	bl	80014b4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f88e 	bl	80014b4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e207      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xc0>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f87e 	bl	80014b4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff f87a 	bl	80014b4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1f3      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b51      	ldr	r3, [pc, #324]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0xe8>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1c7      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x244>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff f833 	bl	80014b4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff f82f 	bl	80014b4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1a8      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_OscConfig+0x244>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff f812 	bl	80014b4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002494:	f7ff f80e 	bl	80014b4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e187      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_RCC_OscConfig+0x248>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fff2 	bl	80014b4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe ffee 	bl	80014b4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e167      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x200>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x248>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe ffdb 	bl	80014b4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe ffd7 	bl	80014b4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e150      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b77      	ldr	r3, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b74      	ldr	r3, [pc, #464]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a73      	ldr	r2, [pc, #460]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe ff97 	bl	80014b4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe ff93 	bl	80014b4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e10c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x2ea>
 80025b0:	4b64      	ldr	r3, [pc, #400]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a63      	ldr	r2, [pc, #396]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025e0:	4b58      	ldr	r3, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b55      	ldr	r3, [pc, #340]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a54      	ldr	r2, [pc, #336]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe ff58 	bl	80014b4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe ff54 	bl	80014b4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0cb      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x334>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe ff42 	bl	80014b4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe ff3e 	bl	80014b4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0b5      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a38      	ldr	r2, [pc, #224]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a1 	beq.w	80027b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d05c      	beq.n	8002738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d141      	bne.n	800270a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_OscConfig+0x478>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe ff12 	bl	80014b4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe ff0e 	bl	80014b4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e087      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x478>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fee7 	bl	80014b4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fee3 	bl	80014b4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e05c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x416>
 8002708:	e054      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fed0 	bl	80014b4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fecc 	bl	80014b4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e045      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e038      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x4ec>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d028      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d121      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e067      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4934      	ldr	r1, [pc, #208]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fdfe 	bl	80014b4 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fdfa 	bl	80014b4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20c      	bcs.n	800290c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490a      	ldr	r1, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fd5e 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	080054f0 	.word	0x080054f0
 8002988:	2000001c 	.word	0x2000001c
 800298c:	20000020 	.word	0x20000020

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b090      	sub	sp, #64	; 0x40
 8002996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x40>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x3a>
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029c8:	e09b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ce:	e098      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	627a      	str	r2, [r7, #36]	; 0x24
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	460a      	mov	r2, r1
 8002a12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	4413      	add	r3, r2
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a2a:	f7fd fc29 	bl	8000280 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a36:	e053      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4a:	f04f 0b00 	mov.w	fp, #0
 8002a4e:	4652      	mov	r2, sl
 8002a50:	465b      	mov	r3, fp
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	0159      	lsls	r1, r3, #5
 8002a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a60:	0150      	lsls	r0, r2, #5
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a82:	ebb2 0408 	subs.w	r4, r2, r8
 8002a86:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	00eb      	lsls	r3, r5, #3
 8002a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a98:	00e2      	lsls	r2, r4, #3
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	eb14 030a 	adds.w	r3, r4, sl
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	eb45 030b 	adc.w	r3, r5, fp
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	028b      	lsls	r3, r1, #10
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	028a      	lsls	r2, r1, #10
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	2200      	movs	r2, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	f7fd fbd4 	bl	8000280 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3740      	adds	r7, #64	; 0x40
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	017d7840 	.word	0x017d7840

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	2000001c 	.word	0x2000001c

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08005500 	.word	0x08005500

08002b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07b      	b.n	8002c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7e:	d009      	beq.n	8002b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
 8002b86:	e005      	b.n	8002b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fb36 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	ea42 0103 	orr.w	r1, r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0104 	and.w	r1, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f003 0210 	and.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b088      	sub	sp, #32
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_SPI_Transmit+0x22>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e126      	b.n	8002ede <HAL_SPI_Transmit+0x270>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c98:	f7fe fc0c 	bl	80014b4 <HAL_GetTick>
 8002c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cb2:	e10b      	b.n	8002ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Transmit+0x52>
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc4:	e102      	b.n	8002ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0c:	d10f      	bne.n	8002d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d007      	beq.n	8002d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d54:	d14b      	bne.n	8002dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Transmit+0xf6>
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d13e      	bne.n	8002de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d88:	e02b      	b.n	8002de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d112      	bne.n	8002dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dbc:	e011      	b.n	8002de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dbe:	f7fe fb79 	bl	80014b4 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d803      	bhi.n	8002dd6 <HAL_SPI_Transmit+0x168>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d102      	bne.n	8002ddc <HAL_SPI_Transmit+0x16e>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002de0:	e074      	b.n	8002ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ce      	bne.n	8002d8a <HAL_SPI_Transmit+0x11c>
 8002dec:	e04c      	b.n	8002e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_Transmit+0x18e>
 8002df6:	8afb      	ldrh	r3, [r7, #22]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d140      	bne.n	8002e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	7812      	ldrb	r2, [r2, #0]
 8002e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e22:	e02c      	b.n	8002e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d113      	bne.n	8002e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e58:	e011      	b.n	8002e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5a:	f7fe fb2b 	bl	80014b4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d803      	bhi.n	8002e72 <HAL_SPI_Transmit+0x204>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d102      	bne.n	8002e78 <HAL_SPI_Transmit+0x20a>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e7c:	e026      	b.n	8002ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1cd      	bne.n	8002e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fbcb 	bl	8003628 <SPI_EndRxTxTransaction>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e000      	b.n	8002ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af02      	add	r7, sp, #8
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f02:	d112      	bne.n	8002f2a <HAL_SPI_Receive+0x44>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10e      	bne.n	8002f2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f8f1 	bl	8003108 <HAL_SPI_TransmitReceive>
 8002f26:	4603      	mov	r3, r0
 8002f28:	e0ea      	b.n	8003100 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_SPI_Receive+0x52>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0e3      	b.n	8003100 <HAL_SPI_Receive+0x21a>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f40:	f7fe fab8 	bl	80014b4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f56:	e0ca      	b.n	80030ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_Receive+0x7e>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f68:	e0c1      	b.n	80030ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d007      	beq.n	8002ff0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d162      	bne.n	80030be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ff8:	e02e      	b.n	8003058 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d115      	bne.n	8003034 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f103 020c 	add.w	r2, r3, #12
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003032:	e011      	b.n	8003058 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003034:	f7fe fa3e 	bl	80014b4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d803      	bhi.n	800304c <HAL_SPI_Receive+0x166>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Receive+0x16c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003056:	e04a      	b.n	80030ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cb      	bne.n	8002ffa <HAL_SPI_Receive+0x114>
 8003062:	e031      	b.n	80030c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d113      	bne.n	800309a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	b292      	uxth	r2, r2
 800307e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003098:	e011      	b.n	80030be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309a:	f7fe fa0b 	bl	80014b4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d803      	bhi.n	80030b2 <HAL_SPI_Receive+0x1cc>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d102      	bne.n	80030b8 <HAL_SPI_Receive+0x1d2>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030bc:	e017      	b.n	80030ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1cd      	bne.n	8003064 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fa45 	bl	800355c <SPI_EndRxTransaction>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
 80030ea:	e000      	b.n	80030ee <HAL_SPI_Receive+0x208>
  }

error :
 80030ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003116:	2301      	movs	r3, #1
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_SPI_TransmitReceive+0x26>
 800312a:	2302      	movs	r3, #2
 800312c:	e18a      	b.n	8003444 <HAL_SPI_TransmitReceive+0x33c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003136:	f7fe f9bd 	bl	80014b4 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003154:	2b01      	cmp	r3, #1
 8003156:	d00f      	beq.n	8003178 <HAL_SPI_TransmitReceive+0x70>
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315e:	d107      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x68>
 8003168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800316c:	2b04      	cmp	r3, #4
 800316e:	d003      	beq.n	8003178 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003170:	2302      	movs	r3, #2
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003176:	e15b      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_SPI_TransmitReceive+0x82>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_TransmitReceive+0x82>
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003190:	e14e      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2205      	movs	r2, #5
 80031a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	887a      	ldrh	r2, [r7, #2]
 80031b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	887a      	ldrh	r2, [r7, #2]
 80031ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d007      	beq.n	80031fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d178      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x10a>
 800320c:	8b7b      	ldrh	r3, [r7, #26]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d166      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003236:	e053      	b.n	80032e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d11b      	bne.n	800327e <HAL_SPI_TransmitReceive+0x176>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <HAL_SPI_TransmitReceive+0x176>
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d113      	bne.n	800327e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d119      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x1b8>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	b292      	uxth	r2, r2
 80032a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c0:	f7fe f8f8 	bl	80014b4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d807      	bhi.n	80032e0 <HAL_SPI_TransmitReceive+0x1d8>
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d003      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032de:	e0a7      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1a6      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x130>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1a1      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x130>
 80032f4:	e07c      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x1fc>
 80032fe:	8b7b      	ldrh	r3, [r7, #26]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d16b      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332a:	e057      	b.n	80033dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d11c      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x26c>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d017      	beq.n	8003374 <HAL_SPI_TransmitReceive+0x26c>
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d114      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d119      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x2ae>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b2:	2301      	movs	r3, #1
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b6:	f7fe f87d 	bl	80014b4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d803      	bhi.n	80033ce <HAL_SPI_TransmitReceive+0x2c6>
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d102      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x2cc>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033da:	e029      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1a2      	bne.n	800332c <HAL_SPI_TransmitReceive+0x224>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d19d      	bne.n	800332c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f917 	bl	8003628 <SPI_EndRxTxTransaction>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800340c:	e010      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	e000      	b.n	8003430 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800342e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003444:	4618      	mov	r0, r3
 8003446:	3730      	adds	r7, #48	; 0x30
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800345c:	f7fe f82a 	bl	80014b4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4413      	add	r3, r2
 800346a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800346c:	f7fe f822 	bl	80014b4 <HAL_GetTick>
 8003470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	015b      	lsls	r3, r3, #5
 8003478:	0d1b      	lsrs	r3, r3, #20
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003482:	e054      	b.n	800352e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d050      	beq.n	800352e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800348c:	f7fe f812 	bl	80014b4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	429a      	cmp	r2, r3
 800349a:	d902      	bls.n	80034a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d13d      	bne.n	800351e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e8:	d10f      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e017      	b.n	800354e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3b01      	subs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d19b      	bne.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000001c 	.word	0x2000001c

0800355c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003570:	d111      	bne.n	8003596 <SPI_EndRxTransaction+0x3a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357a:	d004      	beq.n	8003586 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d107      	bne.n	8003596 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359e:	d12a      	bne.n	80035f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a8:	d012      	beq.n	80035d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff ff49 	bl	800344c <SPI_WaitFlagStateUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02d      	beq.n	800361c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e026      	b.n	800361e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2101      	movs	r1, #1
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff36 	bl	800344c <SPI_WaitFlagStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01a      	beq.n	800361c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e013      	b.n	800361e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2101      	movs	r1, #1
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff23 	bl	800344c <SPI_WaitFlagStateUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e000      	b.n	800361e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <SPI_EndRxTxTransaction+0x7c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <SPI_EndRxTxTransaction+0x80>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0d5b      	lsrs	r3, r3, #21
 8003640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d112      	bne.n	800367a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fef4 	bl	800344c <SPI_WaitFlagStateUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e00f      	b.n	800369a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3b01      	subs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d0f2      	beq.n	800367a <SPI_EndRxTxTransaction+0x52>
 8003694:	e000      	b.n	8003698 <SPI_EndRxTxTransaction+0x70>
        break;
 8003696:	bf00      	nop
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000001c 	.word	0x2000001c
 80036a8:	165e9f81 	.word	0x165e9f81

080036ac <siprintf>:
 80036ac:	b40e      	push	{r1, r2, r3}
 80036ae:	b500      	push	{lr}
 80036b0:	b09c      	sub	sp, #112	; 0x70
 80036b2:	ab1d      	add	r3, sp, #116	; 0x74
 80036b4:	9002      	str	r0, [sp, #8]
 80036b6:	9006      	str	r0, [sp, #24]
 80036b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036bc:	4809      	ldr	r0, [pc, #36]	; (80036e4 <siprintf+0x38>)
 80036be:	9107      	str	r1, [sp, #28]
 80036c0:	9104      	str	r1, [sp, #16]
 80036c2:	4909      	ldr	r1, [pc, #36]	; (80036e8 <siprintf+0x3c>)
 80036c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c8:	9105      	str	r1, [sp, #20]
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	a902      	add	r1, sp, #8
 80036d0:	f000 f9a0 	bl	8003a14 <_svfiprintf_r>
 80036d4:	9b02      	ldr	r3, [sp, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	b01c      	add	sp, #112	; 0x70
 80036dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e0:	b003      	add	sp, #12
 80036e2:	4770      	bx	lr
 80036e4:	20000074 	.word	0x20000074
 80036e8:	ffff0208 	.word	0xffff0208

080036ec <memset>:
 80036ec:	4402      	add	r2, r0
 80036ee:	4603      	mov	r3, r0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d100      	bne.n	80036f6 <memset+0xa>
 80036f4:	4770      	bx	lr
 80036f6:	f803 1b01 	strb.w	r1, [r3], #1
 80036fa:	e7f9      	b.n	80036f0 <memset+0x4>

080036fc <__errno>:
 80036fc:	4b01      	ldr	r3, [pc, #4]	; (8003704 <__errno+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000074 	.word	0x20000074

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	; (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	; (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	; (800374c <__libc_init_array+0x44>)
 800371c:	f000 fc6a 	bl	8003ff4 <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	08005544 	.word	0x08005544
 8003744:	08005544 	.word	0x08005544
 8003748:	08005544 	.word	0x08005544
 800374c:	08005548 	.word	0x08005548

08003750 <__retarget_lock_acquire_recursive>:
 8003750:	4770      	bx	lr

08003752 <__retarget_lock_release_recursive>:
 8003752:	4770      	bx	lr

08003754 <memcpy>:
 8003754:	440a      	add	r2, r1
 8003756:	4291      	cmp	r1, r2
 8003758:	f100 33ff 	add.w	r3, r0, #4294967295
 800375c:	d100      	bne.n	8003760 <memcpy+0xc>
 800375e:	4770      	bx	lr
 8003760:	b510      	push	{r4, lr}
 8003762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800376a:	4291      	cmp	r1, r2
 800376c:	d1f9      	bne.n	8003762 <memcpy+0xe>
 800376e:	bd10      	pop	{r4, pc}

08003770 <_free_r>:
 8003770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003772:	2900      	cmp	r1, #0
 8003774:	d044      	beq.n	8003800 <_free_r+0x90>
 8003776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377a:	9001      	str	r0, [sp, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f1a1 0404 	sub.w	r4, r1, #4
 8003782:	bfb8      	it	lt
 8003784:	18e4      	addlt	r4, r4, r3
 8003786:	f000 f8df 	bl	8003948 <__malloc_lock>
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378c:	9801      	ldr	r0, [sp, #4]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x30>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	b003      	add	sp, #12
 8003798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800379c:	f000 b8da 	b.w	8003954 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x46>
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	1961      	adds	r1, r4, r5
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1949      	addeq	r1, r1, r5
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x22>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x50>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x46>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1855      	adds	r5, r2, r1
 80037c4:	42a5      	cmp	r5, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x70>
 80037c8:	6824      	ldr	r4, [r4, #0]
 80037ca:	4421      	add	r1, r4
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x26>
 80037d4:	681c      	ldr	r4, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	440c      	add	r4, r1
 80037dc:	6014      	str	r4, [r2, #0]
 80037de:	e7da      	b.n	8003796 <_free_r+0x26>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x78>
 80037e2:	230c      	movs	r3, #12
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x26>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1949      	addeq	r1, r1, r5
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7ca      	b.n	8003796 <_free_r+0x26>
 8003800:	b003      	add	sp, #12
 8003802:	bd30      	pop	{r4, r5, pc}
 8003804:	2000049c 	.word	0x2000049c

08003808 <sbrk_aligned>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4e0e      	ldr	r6, [pc, #56]	; (8003844 <sbrk_aligned+0x3c>)
 800380c:	460c      	mov	r4, r1
 800380e:	6831      	ldr	r1, [r6, #0]
 8003810:	4605      	mov	r5, r0
 8003812:	b911      	cbnz	r1, 800381a <sbrk_aligned+0x12>
 8003814:	f000 fba6 	bl	8003f64 <_sbrk_r>
 8003818:	6030      	str	r0, [r6, #0]
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fba1 	bl	8003f64 <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d00a      	beq.n	800383c <sbrk_aligned+0x34>
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d007      	beq.n	8003840 <sbrk_aligned+0x38>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4628      	mov	r0, r5
 8003834:	f000 fb96 	bl	8003f64 <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d101      	bne.n	8003840 <sbrk_aligned+0x38>
 800383c:	f04f 34ff 	mov.w	r4, #4294967295
 8003840:	4620      	mov	r0, r4
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	200004a0 	.word	0x200004a0

08003848 <_malloc_r>:
 8003848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800384c:	1ccd      	adds	r5, r1, #3
 800384e:	f025 0503 	bic.w	r5, r5, #3
 8003852:	3508      	adds	r5, #8
 8003854:	2d0c      	cmp	r5, #12
 8003856:	bf38      	it	cc
 8003858:	250c      	movcc	r5, #12
 800385a:	2d00      	cmp	r5, #0
 800385c:	4607      	mov	r7, r0
 800385e:	db01      	blt.n	8003864 <_malloc_r+0x1c>
 8003860:	42a9      	cmp	r1, r5
 8003862:	d905      	bls.n	8003870 <_malloc_r+0x28>
 8003864:	230c      	movs	r3, #12
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	2600      	movs	r6, #0
 800386a:	4630      	mov	r0, r6
 800386c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003944 <_malloc_r+0xfc>
 8003874:	f000 f868 	bl	8003948 <__malloc_lock>
 8003878:	f8d8 3000 	ldr.w	r3, [r8]
 800387c:	461c      	mov	r4, r3
 800387e:	bb5c      	cbnz	r4, 80038d8 <_malloc_r+0x90>
 8003880:	4629      	mov	r1, r5
 8003882:	4638      	mov	r0, r7
 8003884:	f7ff ffc0 	bl	8003808 <sbrk_aligned>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	4604      	mov	r4, r0
 800388c:	d155      	bne.n	800393a <_malloc_r+0xf2>
 800388e:	f8d8 4000 	ldr.w	r4, [r8]
 8003892:	4626      	mov	r6, r4
 8003894:	2e00      	cmp	r6, #0
 8003896:	d145      	bne.n	8003924 <_malloc_r+0xdc>
 8003898:	2c00      	cmp	r4, #0
 800389a:	d048      	beq.n	800392e <_malloc_r+0xe6>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	4631      	mov	r1, r6
 80038a0:	4638      	mov	r0, r7
 80038a2:	eb04 0903 	add.w	r9, r4, r3
 80038a6:	f000 fb5d 	bl	8003f64 <_sbrk_r>
 80038aa:	4581      	cmp	r9, r0
 80038ac:	d13f      	bne.n	800392e <_malloc_r+0xe6>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1a6d      	subs	r5, r5, r1
 80038b2:	4629      	mov	r1, r5
 80038b4:	4638      	mov	r0, r7
 80038b6:	f7ff ffa7 	bl	8003808 <sbrk_aligned>
 80038ba:	3001      	adds	r0, #1
 80038bc:	d037      	beq.n	800392e <_malloc_r+0xe6>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	442b      	add	r3, r5
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	f8d8 3000 	ldr.w	r3, [r8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d038      	beq.n	800393e <_malloc_r+0xf6>
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	42a2      	cmp	r2, r4
 80038d0:	d12b      	bne.n	800392a <_malloc_r+0xe2>
 80038d2:	2200      	movs	r2, #0
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e00f      	b.n	80038f8 <_malloc_r+0xb0>
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	1b52      	subs	r2, r2, r5
 80038dc:	d41f      	bmi.n	800391e <_malloc_r+0xd6>
 80038de:	2a0b      	cmp	r2, #11
 80038e0:	d917      	bls.n	8003912 <_malloc_r+0xca>
 80038e2:	1961      	adds	r1, r4, r5
 80038e4:	42a3      	cmp	r3, r4
 80038e6:	6025      	str	r5, [r4, #0]
 80038e8:	bf18      	it	ne
 80038ea:	6059      	strne	r1, [r3, #4]
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	bf08      	it	eq
 80038f0:	f8c8 1000 	streq.w	r1, [r8]
 80038f4:	5162      	str	r2, [r4, r5]
 80038f6:	604b      	str	r3, [r1, #4]
 80038f8:	4638      	mov	r0, r7
 80038fa:	f104 060b 	add.w	r6, r4, #11
 80038fe:	f000 f829 	bl	8003954 <__malloc_unlock>
 8003902:	f026 0607 	bic.w	r6, r6, #7
 8003906:	1d23      	adds	r3, r4, #4
 8003908:	1af2      	subs	r2, r6, r3
 800390a:	d0ae      	beq.n	800386a <_malloc_r+0x22>
 800390c:	1b9b      	subs	r3, r3, r6
 800390e:	50a3      	str	r3, [r4, r2]
 8003910:	e7ab      	b.n	800386a <_malloc_r+0x22>
 8003912:	42a3      	cmp	r3, r4
 8003914:	6862      	ldr	r2, [r4, #4]
 8003916:	d1dd      	bne.n	80038d4 <_malloc_r+0x8c>
 8003918:	f8c8 2000 	str.w	r2, [r8]
 800391c:	e7ec      	b.n	80038f8 <_malloc_r+0xb0>
 800391e:	4623      	mov	r3, r4
 8003920:	6864      	ldr	r4, [r4, #4]
 8003922:	e7ac      	b.n	800387e <_malloc_r+0x36>
 8003924:	4634      	mov	r4, r6
 8003926:	6876      	ldr	r6, [r6, #4]
 8003928:	e7b4      	b.n	8003894 <_malloc_r+0x4c>
 800392a:	4613      	mov	r3, r2
 800392c:	e7cc      	b.n	80038c8 <_malloc_r+0x80>
 800392e:	230c      	movs	r3, #12
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4638      	mov	r0, r7
 8003934:	f000 f80e 	bl	8003954 <__malloc_unlock>
 8003938:	e797      	b.n	800386a <_malloc_r+0x22>
 800393a:	6025      	str	r5, [r4, #0]
 800393c:	e7dc      	b.n	80038f8 <_malloc_r+0xb0>
 800393e:	605b      	str	r3, [r3, #4]
 8003940:	deff      	udf	#255	; 0xff
 8003942:	bf00      	nop
 8003944:	2000049c 	.word	0x2000049c

08003948 <__malloc_lock>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__malloc_lock+0x8>)
 800394a:	f7ff bf01 	b.w	8003750 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	20000498 	.word	0x20000498

08003954 <__malloc_unlock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_unlock+0x8>)
 8003956:	f7ff befc 	b.w	8003752 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	20000498 	.word	0x20000498

08003960 <__ssputs_r>:
 8003960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003964:	688e      	ldr	r6, [r1, #8]
 8003966:	461f      	mov	r7, r3
 8003968:	42be      	cmp	r6, r7
 800396a:	680b      	ldr	r3, [r1, #0]
 800396c:	4682      	mov	sl, r0
 800396e:	460c      	mov	r4, r1
 8003970:	4690      	mov	r8, r2
 8003972:	d82c      	bhi.n	80039ce <__ssputs_r+0x6e>
 8003974:	898a      	ldrh	r2, [r1, #12]
 8003976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800397a:	d026      	beq.n	80039ca <__ssputs_r+0x6a>
 800397c:	6965      	ldr	r5, [r4, #20]
 800397e:	6909      	ldr	r1, [r1, #16]
 8003980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003984:	eba3 0901 	sub.w	r9, r3, r1
 8003988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800398c:	1c7b      	adds	r3, r7, #1
 800398e:	444b      	add	r3, r9
 8003990:	106d      	asrs	r5, r5, #1
 8003992:	429d      	cmp	r5, r3
 8003994:	bf38      	it	cc
 8003996:	461d      	movcc	r5, r3
 8003998:	0553      	lsls	r3, r2, #21
 800399a:	d527      	bpl.n	80039ec <__ssputs_r+0x8c>
 800399c:	4629      	mov	r1, r5
 800399e:	f7ff ff53 	bl	8003848 <_malloc_r>
 80039a2:	4606      	mov	r6, r0
 80039a4:	b360      	cbz	r0, 8003a00 <__ssputs_r+0xa0>
 80039a6:	6921      	ldr	r1, [r4, #16]
 80039a8:	464a      	mov	r2, r9
 80039aa:	f7ff fed3 	bl	8003754 <memcpy>
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	6126      	str	r6, [r4, #16]
 80039bc:	6165      	str	r5, [r4, #20]
 80039be:	444e      	add	r6, r9
 80039c0:	eba5 0509 	sub.w	r5, r5, r9
 80039c4:	6026      	str	r6, [r4, #0]
 80039c6:	60a5      	str	r5, [r4, #8]
 80039c8:	463e      	mov	r6, r7
 80039ca:	42be      	cmp	r6, r7
 80039cc:	d900      	bls.n	80039d0 <__ssputs_r+0x70>
 80039ce:	463e      	mov	r6, r7
 80039d0:	6820      	ldr	r0, [r4, #0]
 80039d2:	4632      	mov	r2, r6
 80039d4:	4641      	mov	r1, r8
 80039d6:	f000 faab 	bl	8003f30 <memmove>
 80039da:	68a3      	ldr	r3, [r4, #8]
 80039dc:	1b9b      	subs	r3, r3, r6
 80039de:	60a3      	str	r3, [r4, #8]
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	4433      	add	r3, r6
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	2000      	movs	r0, #0
 80039e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ec:	462a      	mov	r2, r5
 80039ee:	f000 fac9 	bl	8003f84 <_realloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1e0      	bne.n	80039ba <__ssputs_r+0x5a>
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	4650      	mov	r0, sl
 80039fc:	f7ff feb8 	bl	8003770 <_free_r>
 8003a00:	230c      	movs	r3, #12
 8003a02:	f8ca 3000 	str.w	r3, [sl]
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	e7e9      	b.n	80039e8 <__ssputs_r+0x88>

08003a14 <_svfiprintf_r>:
 8003a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4698      	mov	r8, r3
 8003a1a:	898b      	ldrh	r3, [r1, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	b09d      	sub	sp, #116	; 0x74
 8003a20:	4607      	mov	r7, r0
 8003a22:	460d      	mov	r5, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	d50e      	bpl.n	8003a46 <_svfiprintf_r+0x32>
 8003a28:	690b      	ldr	r3, [r1, #16]
 8003a2a:	b963      	cbnz	r3, 8003a46 <_svfiprintf_r+0x32>
 8003a2c:	2140      	movs	r1, #64	; 0x40
 8003a2e:	f7ff ff0b 	bl	8003848 <_malloc_r>
 8003a32:	6028      	str	r0, [r5, #0]
 8003a34:	6128      	str	r0, [r5, #16]
 8003a36:	b920      	cbnz	r0, 8003a42 <_svfiprintf_r+0x2e>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e0d0      	b.n	8003be4 <_svfiprintf_r+0x1d0>
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	616b      	str	r3, [r5, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9309      	str	r3, [sp, #36]	; 0x24
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a54:	2330      	movs	r3, #48	; 0x30
 8003a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bfc <_svfiprintf_r+0x1e8>
 8003a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a5e:	f04f 0901 	mov.w	r9, #1
 8003a62:	4623      	mov	r3, r4
 8003a64:	469a      	mov	sl, r3
 8003a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6a:	b10a      	cbz	r2, 8003a70 <_svfiprintf_r+0x5c>
 8003a6c:	2a25      	cmp	r2, #37	; 0x25
 8003a6e:	d1f9      	bne.n	8003a64 <_svfiprintf_r+0x50>
 8003a70:	ebba 0b04 	subs.w	fp, sl, r4
 8003a74:	d00b      	beq.n	8003a8e <_svfiprintf_r+0x7a>
 8003a76:	465b      	mov	r3, fp
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	f7ff ff6f 	bl	8003960 <__ssputs_r>
 8003a82:	3001      	adds	r0, #1
 8003a84:	f000 80a9 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a8a:	445a      	add	r2, fp
 8003a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80a1 	beq.w	8003bda <_svfiprintf_r+0x1c6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa2:	f10a 0a01 	add.w	sl, sl, #1
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	9307      	str	r3, [sp, #28]
 8003aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aae:	931a      	str	r3, [sp, #104]	; 0x68
 8003ab0:	4654      	mov	r4, sl
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab8:	4850      	ldr	r0, [pc, #320]	; (8003bfc <_svfiprintf_r+0x1e8>)
 8003aba:	f7fc fb91 	bl	80001e0 <memchr>
 8003abe:	9a04      	ldr	r2, [sp, #16]
 8003ac0:	b9d8      	cbnz	r0, 8003afa <_svfiprintf_r+0xe6>
 8003ac2:	06d0      	lsls	r0, r2, #27
 8003ac4:	bf44      	itt	mi
 8003ac6:	2320      	movmi	r3, #32
 8003ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003acc:	0711      	lsls	r1, r2, #28
 8003ace:	bf44      	itt	mi
 8003ad0:	232b      	movmi	r3, #43	; 0x2b
 8003ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ada:	2b2a      	cmp	r3, #42	; 0x2a
 8003adc:	d015      	beq.n	8003b0a <_svfiprintf_r+0xf6>
 8003ade:	9a07      	ldr	r2, [sp, #28]
 8003ae0:	4654      	mov	r4, sl
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f04f 0c0a 	mov.w	ip, #10
 8003ae8:	4621      	mov	r1, r4
 8003aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aee:	3b30      	subs	r3, #48	; 0x30
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d94d      	bls.n	8003b90 <_svfiprintf_r+0x17c>
 8003af4:	b1b0      	cbz	r0, 8003b24 <_svfiprintf_r+0x110>
 8003af6:	9207      	str	r2, [sp, #28]
 8003af8:	e014      	b.n	8003b24 <_svfiprintf_r+0x110>
 8003afa:	eba0 0308 	sub.w	r3, r0, r8
 8003afe:	fa09 f303 	lsl.w	r3, r9, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	9304      	str	r3, [sp, #16]
 8003b06:	46a2      	mov	sl, r4
 8003b08:	e7d2      	b.n	8003ab0 <_svfiprintf_r+0x9c>
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	1d19      	adds	r1, r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	9103      	str	r1, [sp, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfbb      	ittet	lt
 8003b16:	425b      	neglt	r3, r3
 8003b18:	f042 0202 	orrlt.w	r2, r2, #2
 8003b1c:	9307      	strge	r3, [sp, #28]
 8003b1e:	9307      	strlt	r3, [sp, #28]
 8003b20:	bfb8      	it	lt
 8003b22:	9204      	strlt	r2, [sp, #16]
 8003b24:	7823      	ldrb	r3, [r4, #0]
 8003b26:	2b2e      	cmp	r3, #46	; 0x2e
 8003b28:	d10c      	bne.n	8003b44 <_svfiprintf_r+0x130>
 8003b2a:	7863      	ldrb	r3, [r4, #1]
 8003b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b2e:	d134      	bne.n	8003b9a <_svfiprintf_r+0x186>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bfb8      	it	lt
 8003b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b40:	3402      	adds	r4, #2
 8003b42:	9305      	str	r3, [sp, #20]
 8003b44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c0c <_svfiprintf_r+0x1f8>
 8003b48:	7821      	ldrb	r1, [r4, #0]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	4650      	mov	r0, sl
 8003b4e:	f7fc fb47 	bl	80001e0 <memchr>
 8003b52:	b138      	cbz	r0, 8003b64 <_svfiprintf_r+0x150>
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	eba0 000a 	sub.w	r0, r0, sl
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	4082      	lsls	r2, r0
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	3401      	adds	r4, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b68:	4825      	ldr	r0, [pc, #148]	; (8003c00 <_svfiprintf_r+0x1ec>)
 8003b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b6e:	2206      	movs	r2, #6
 8003b70:	f7fc fb36 	bl	80001e0 <memchr>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d038      	beq.n	8003bea <_svfiprintf_r+0x1d6>
 8003b78:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <_svfiprintf_r+0x1f0>)
 8003b7a:	bb1b      	cbnz	r3, 8003bc4 <_svfiprintf_r+0x1b0>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	f023 0307 	bic.w	r3, r3, #7
 8003b84:	3308      	adds	r3, #8
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8a:	4433      	add	r3, r6
 8003b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8e:	e768      	b.n	8003a62 <_svfiprintf_r+0x4e>
 8003b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b94:	460c      	mov	r4, r1
 8003b96:	2001      	movs	r0, #1
 8003b98:	e7a6      	b.n	8003ae8 <_svfiprintf_r+0xd4>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0c0a 	mov.w	ip, #10
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bac:	3a30      	subs	r2, #48	; 0x30
 8003bae:	2a09      	cmp	r2, #9
 8003bb0:	d903      	bls.n	8003bba <_svfiprintf_r+0x1a6>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0c6      	beq.n	8003b44 <_svfiprintf_r+0x130>
 8003bb6:	9105      	str	r1, [sp, #20]
 8003bb8:	e7c4      	b.n	8003b44 <_svfiprintf_r+0x130>
 8003bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e7f0      	b.n	8003ba6 <_svfiprintf_r+0x192>
 8003bc4:	ab03      	add	r3, sp, #12
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <_svfiprintf_r+0x1f4>)
 8003bcc:	a904      	add	r1, sp, #16
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f3af 8000 	nop.w
 8003bd4:	1c42      	adds	r2, r0, #1
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	d1d6      	bne.n	8003b88 <_svfiprintf_r+0x174>
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	065b      	lsls	r3, r3, #25
 8003bde:	f53f af2d 	bmi.w	8003a3c <_svfiprintf_r+0x28>
 8003be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be4:	b01d      	add	sp, #116	; 0x74
 8003be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bea:	ab03      	add	r3, sp, #12
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	462a      	mov	r2, r5
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <_svfiprintf_r+0x1f4>)
 8003bf2:	a904      	add	r1, sp, #16
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f000 f879 	bl	8003cec <_printf_i>
 8003bfa:	e7eb      	b.n	8003bd4 <_svfiprintf_r+0x1c0>
 8003bfc:	08005508 	.word	0x08005508
 8003c00:	08005512 	.word	0x08005512
 8003c04:	00000000 	.word	0x00000000
 8003c08:	08003961 	.word	0x08003961
 8003c0c:	0800550e 	.word	0x0800550e

08003c10 <_printf_common>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	4616      	mov	r6, r2
 8003c16:	4699      	mov	r9, r3
 8003c18:	688a      	ldr	r2, [r1, #8]
 8003c1a:	690b      	ldr	r3, [r1, #16]
 8003c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bfb8      	it	lt
 8003c24:	4613      	movlt	r3, r2
 8003c26:	6033      	str	r3, [r6, #0]
 8003c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	b10a      	cbz	r2, 8003c36 <_printf_common+0x26>
 8003c32:	3301      	adds	r3, #1
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	0699      	lsls	r1, r3, #26
 8003c3a:	bf42      	ittt	mi
 8003c3c:	6833      	ldrmi	r3, [r6, #0]
 8003c3e:	3302      	addmi	r3, #2
 8003c40:	6033      	strmi	r3, [r6, #0]
 8003c42:	6825      	ldr	r5, [r4, #0]
 8003c44:	f015 0506 	ands.w	r5, r5, #6
 8003c48:	d106      	bne.n	8003c58 <_printf_common+0x48>
 8003c4a:	f104 0a19 	add.w	sl, r4, #25
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	6832      	ldr	r2, [r6, #0]
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	42ab      	cmp	r3, r5
 8003c56:	dc26      	bgt.n	8003ca6 <_printf_common+0x96>
 8003c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c5c:	1e13      	subs	r3, r2, #0
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	bf18      	it	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	0692      	lsls	r2, r2, #26
 8003c66:	d42b      	bmi.n	8003cc0 <_printf_common+0xb0>
 8003c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	3001      	adds	r0, #1
 8003c74:	d01e      	beq.n	8003cb4 <_printf_common+0xa4>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	f003 0306 	and.w	r3, r3, #6
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf02      	ittt	eq
 8003c82:	68e5      	ldreq	r5, [r4, #12]
 8003c84:	6833      	ldreq	r3, [r6, #0]
 8003c86:	1aed      	subeq	r5, r5, r3
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	bf0c      	ite	eq
 8003c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c90:	2500      	movne	r5, #0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bfc4      	itt	gt
 8003c96:	1a9b      	subgt	r3, r3, r2
 8003c98:	18ed      	addgt	r5, r5, r3
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	341a      	adds	r4, #26
 8003c9e:	42b5      	cmp	r5, r6
 8003ca0:	d11a      	bne.n	8003cd8 <_printf_common+0xc8>
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e008      	b.n	8003cb8 <_printf_common+0xa8>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4649      	mov	r1, r9
 8003cac:	4638      	mov	r0, r7
 8003cae:	47c0      	blx	r8
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d103      	bne.n	8003cbc <_printf_common+0xac>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbc:	3501      	adds	r5, #1
 8003cbe:	e7c6      	b.n	8003c4e <_printf_common+0x3e>
 8003cc0:	18e1      	adds	r1, r4, r3
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	2030      	movs	r0, #48	; 0x30
 8003cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cca:	4422      	add	r2, r4
 8003ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	e7c7      	b.n	8003c68 <_printf_common+0x58>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4649      	mov	r1, r9
 8003cde:	4638      	mov	r0, r7
 8003ce0:	47c0      	blx	r8
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d0e6      	beq.n	8003cb4 <_printf_common+0xa4>
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7d9      	b.n	8003c9e <_printf_common+0x8e>
	...

08003cec <_printf_i>:
 8003cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	7e0f      	ldrb	r7, [r1, #24]
 8003cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cf4:	2f78      	cmp	r7, #120	; 0x78
 8003cf6:	4691      	mov	r9, r2
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	469a      	mov	sl, r3
 8003cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d02:	d807      	bhi.n	8003d14 <_printf_i+0x28>
 8003d04:	2f62      	cmp	r7, #98	; 0x62
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x32>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	f000 80d4 	beq.w	8003eb6 <_printf_i+0x1ca>
 8003d0e:	2f58      	cmp	r7, #88	; 0x58
 8003d10:	f000 80c0 	beq.w	8003e94 <_printf_i+0x1a8>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d1c:	e03a      	b.n	8003d94 <_printf_i+0xa8>
 8003d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	d8f6      	bhi.n	8003d14 <_printf_i+0x28>
 8003d26:	a101      	add	r1, pc, #4	; (adr r1, 8003d2c <_printf_i+0x40>)
 8003d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d99 	.word	0x08003d99
 8003d34:	08003d15 	.word	0x08003d15
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d15 	.word	0x08003d15
 8003d40:	08003d15 	.word	0x08003d15
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003d15 	.word	0x08003d15
 8003d4c:	08003d15 	.word	0x08003d15
 8003d50:	08003d15 	.word	0x08003d15
 8003d54:	08003d15 	.word	0x08003d15
 8003d58:	08003e9d 	.word	0x08003e9d
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003e57 	.word	0x08003e57
 8003d64:	08003d15 	.word	0x08003d15
 8003d68:	08003d15 	.word	0x08003d15
 8003d6c:	08003ebf 	.word	0x08003ebf
 8003d70:	08003d15 	.word	0x08003d15
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003d15 	.word	0x08003d15
 8003d7c:	08003d15 	.word	0x08003d15
 8003d80:	08003e5f 	.word	0x08003e5f
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	602a      	str	r2, [r5, #0]
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d94:	2301      	movs	r3, #1
 8003d96:	e09f      	b.n	8003ed8 <_printf_i+0x1ec>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	0607      	lsls	r7, r0, #24
 8003d9e:	f103 0104 	add.w	r1, r3, #4
 8003da2:	6029      	str	r1, [r5, #0]
 8003da4:	d501      	bpl.n	8003daa <_printf_i+0xbe>
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0xc6>
 8003daa:	0646      	lsls	r6, r0, #25
 8003dac:	d5fb      	bpl.n	8003da6 <_printf_i+0xba>
 8003dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003db2:	2e00      	cmp	r6, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0xd2>
 8003db6:	232d      	movs	r3, #45	; 0x2d
 8003db8:	4276      	negs	r6, r6
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbe:	485a      	ldr	r0, [pc, #360]	; (8003f28 <_printf_i+0x23c>)
 8003dc0:	230a      	movs	r3, #10
 8003dc2:	e012      	b.n	8003dea <_printf_i+0xfe>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1d19      	adds	r1, r3, #4
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	0605      	lsls	r5, r0, #24
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0xe8>
 8003dd0:	681e      	ldr	r6, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0xee>
 8003dd4:	0641      	lsls	r1, r0, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0xe4>
 8003dd8:	881e      	ldrh	r6, [r3, #0]
 8003dda:	4853      	ldr	r0, [pc, #332]	; (8003f28 <_printf_i+0x23c>)
 8003ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8003dde:	bf0c      	ite	eq
 8003de0:	2308      	moveq	r3, #8
 8003de2:	230a      	movne	r3, #10
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dea:	6865      	ldr	r5, [r4, #4]
 8003dec:	60a5      	str	r5, [r4, #8]
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	bfa2      	ittt	ge
 8003df2:	6821      	ldrge	r1, [r4, #0]
 8003df4:	f021 0104 	bicge.w	r1, r1, #4
 8003df8:	6021      	strge	r1, [r4, #0]
 8003dfa:	b90e      	cbnz	r6, 8003e00 <_printf_i+0x114>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	d04b      	beq.n	8003e98 <_printf_i+0x1ac>
 8003e00:	4615      	mov	r5, r2
 8003e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e06:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0a:	5dc7      	ldrb	r7, [r0, r7]
 8003e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e10:	4637      	mov	r7, r6
 8003e12:	42bb      	cmp	r3, r7
 8003e14:	460e      	mov	r6, r1
 8003e16:	d9f4      	bls.n	8003e02 <_printf_i+0x116>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d10b      	bne.n	8003e34 <_printf_i+0x148>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	07de      	lsls	r6, r3, #31
 8003e20:	d508      	bpl.n	8003e34 <_printf_i+0x148>
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6861      	ldr	r1, [r4, #4]
 8003e26:	4299      	cmp	r1, r3
 8003e28:	bfde      	ittt	le
 8003e2a:	2330      	movle	r3, #48	; 0x30
 8003e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e34:	1b52      	subs	r2, r2, r5
 8003e36:	6122      	str	r2, [r4, #16]
 8003e38:	f8cd a000 	str.w	sl, [sp]
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	4621      	mov	r1, r4
 8003e42:	4640      	mov	r0, r8
 8003e44:	f7ff fee4 	bl	8003c10 <_printf_common>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d14a      	bne.n	8003ee2 <_printf_i+0x1f6>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b004      	add	sp, #16
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	4833      	ldr	r0, [pc, #204]	; (8003f2c <_printf_i+0x240>)
 8003e60:	2778      	movs	r7, #120	; 0x78
 8003e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6829      	ldr	r1, [r5, #0]
 8003e6a:	061f      	lsls	r7, r3, #24
 8003e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e70:	d402      	bmi.n	8003e78 <_printf_i+0x18c>
 8003e72:	065f      	lsls	r7, r3, #25
 8003e74:	bf48      	it	mi
 8003e76:	b2b6      	uxthmi	r6, r6
 8003e78:	07df      	lsls	r7, r3, #31
 8003e7a:	bf48      	it	mi
 8003e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e80:	6029      	str	r1, [r5, #0]
 8003e82:	bf48      	it	mi
 8003e84:	6023      	strmi	r3, [r4, #0]
 8003e86:	b91e      	cbnz	r6, 8003e90 <_printf_i+0x1a4>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f023 0320 	bic.w	r3, r3, #32
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	2310      	movs	r3, #16
 8003e92:	e7a7      	b.n	8003de4 <_printf_i+0xf8>
 8003e94:	4824      	ldr	r0, [pc, #144]	; (8003f28 <_printf_i+0x23c>)
 8003e96:	e7e4      	b.n	8003e62 <_printf_i+0x176>
 8003e98:	4615      	mov	r5, r2
 8003e9a:	e7bd      	b.n	8003e18 <_printf_i+0x12c>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6826      	ldr	r6, [r4, #0]
 8003ea0:	6961      	ldr	r1, [r4, #20]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6028      	str	r0, [r5, #0]
 8003ea6:	0635      	lsls	r5, r6, #24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0x1c4>
 8003eac:	6019      	str	r1, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0x1ca>
 8003eb0:	0670      	lsls	r0, r6, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0x1c0>
 8003eb4:	8019      	strh	r1, [r3, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	4615      	mov	r5, r2
 8003ebc:	e7bc      	b.n	8003e38 <_printf_i+0x14c>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f7fc f988 	bl	80001e0 <memchr>
 8003ed0:	b108      	cbz	r0, 8003ed6 <_printf_i+0x1ea>
 8003ed2:	1b40      	subs	r0, r0, r5
 8003ed4:	6060      	str	r0, [r4, #4]
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	2300      	movs	r3, #0
 8003edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee0:	e7aa      	b.n	8003e38 <_printf_i+0x14c>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d0ad      	beq.n	8003e4c <_printf_i+0x160>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d413      	bmi.n	8003f1e <_printf_i+0x232>
 8003ef6:	68e0      	ldr	r0, [r4, #12]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	4298      	cmp	r0, r3
 8003efc:	bfb8      	it	lt
 8003efe:	4618      	movlt	r0, r3
 8003f00:	e7a6      	b.n	8003e50 <_printf_i+0x164>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4632      	mov	r2, r6
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	47d0      	blx	sl
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d09d      	beq.n	8003e4c <_printf_i+0x160>
 8003f10:	3501      	adds	r5, #1
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	1a5b      	subs	r3, r3, r1
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dcf2      	bgt.n	8003f02 <_printf_i+0x216>
 8003f1c:	e7eb      	b.n	8003ef6 <_printf_i+0x20a>
 8003f1e:	2500      	movs	r5, #0
 8003f20:	f104 0619 	add.w	r6, r4, #25
 8003f24:	e7f5      	b.n	8003f12 <_printf_i+0x226>
 8003f26:	bf00      	nop
 8003f28:	08005519 	.word	0x08005519
 8003f2c:	0800552a 	.word	0x0800552a

08003f30 <memmove>:
 8003f30:	4288      	cmp	r0, r1
 8003f32:	b510      	push	{r4, lr}
 8003f34:	eb01 0402 	add.w	r4, r1, r2
 8003f38:	d902      	bls.n	8003f40 <memmove+0x10>
 8003f3a:	4284      	cmp	r4, r0
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	d807      	bhi.n	8003f50 <memmove+0x20>
 8003f40:	1e43      	subs	r3, r0, #1
 8003f42:	42a1      	cmp	r1, r4
 8003f44:	d008      	beq.n	8003f58 <memmove+0x28>
 8003f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f4e:	e7f8      	b.n	8003f42 <memmove+0x12>
 8003f50:	4402      	add	r2, r0
 8003f52:	4601      	mov	r1, r0
 8003f54:	428a      	cmp	r2, r1
 8003f56:	d100      	bne.n	8003f5a <memmove+0x2a>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f62:	e7f7      	b.n	8003f54 <memmove+0x24>

08003f64 <_sbrk_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_sbrk_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fd f9c8 	bl	8001304 <_sbrk>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_sbrk_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_sbrk_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20000494 	.word	0x20000494

08003f84 <_realloc_r>:
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	4680      	mov	r8, r0
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	460e      	mov	r6, r1
 8003f8e:	b921      	cbnz	r1, 8003f9a <_realloc_r+0x16>
 8003f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	4611      	mov	r1, r2
 8003f96:	f7ff bc57 	b.w	8003848 <_malloc_r>
 8003f9a:	b92a      	cbnz	r2, 8003fa8 <_realloc_r+0x24>
 8003f9c:	f7ff fbe8 	bl	8003770 <_free_r>
 8003fa0:	4625      	mov	r5, r4
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa8:	f000 f81b 	bl	8003fe2 <_malloc_usable_size_r>
 8003fac:	4284      	cmp	r4, r0
 8003fae:	4607      	mov	r7, r0
 8003fb0:	d802      	bhi.n	8003fb8 <_realloc_r+0x34>
 8003fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fb6:	d812      	bhi.n	8003fde <_realloc_r+0x5a>
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f7ff fc44 	bl	8003848 <_malloc_r>
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d0ed      	beq.n	8003fa2 <_realloc_r+0x1e>
 8003fc6:	42bc      	cmp	r4, r7
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4631      	mov	r1, r6
 8003fcc:	bf28      	it	cs
 8003fce:	463a      	movcs	r2, r7
 8003fd0:	f7ff fbc0 	bl	8003754 <memcpy>
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	f7ff fbca 	bl	8003770 <_free_r>
 8003fdc:	e7e1      	b.n	8003fa2 <_realloc_r+0x1e>
 8003fde:	4635      	mov	r5, r6
 8003fe0:	e7df      	b.n	8003fa2 <_realloc_r+0x1e>

08003fe2 <_malloc_usable_size_r>:
 8003fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe6:	1f18      	subs	r0, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bfbc      	itt	lt
 8003fec:	580b      	ldrlt	r3, [r1, r0]
 8003fee:	18c0      	addlt	r0, r0, r3
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
